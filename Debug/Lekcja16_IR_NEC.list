
Lekcja16_IR_NEC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007940  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08007ad0  08007ad0  00017ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da4  08007da4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dac  08007dac  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dac  08007dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007db0  08007db0  00017db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000090  08007e44  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08007e44  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133cc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a36  00000000  00000000  0003348c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00035ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00036f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002898b  00000000  00000000  00037ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c0d  00000000  00000000  0006086b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5ed1  00000000  00000000  00075478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b349  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb4  00000000  00000000  0016b39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ab8 	.word	0x08007ab8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08007ab8 	.word	0x08007ab8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_DMA_Init+0x38>)
 800057c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <MX_DMA_Init+0x38>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6493      	str	r3, [r2, #72]	; 0x48
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_DMA_Init+0x38>)
 8000588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2010      	movs	r0, #16
 8000598:	f001 fcb5 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800059c:	2010      	movs	r0, #16
 800059e:	f001 fcce 	bl	8001f3e <HAL_NVIC_EnableIRQ>

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_GPIO_Init+0x2c>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	4a08      	ldr	r2, [pc, #32]	; (80005dc <MX_GPIO_Init+0x2c>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_GPIO_Init+0x2c>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <calc_pulse>:

static volatile uint32_t received_value;
static int received_bits;

static pulse_t calc_pulse(uint32_t time)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2bf9      	cmp	r3, #249	; 0xf9
 80005ec:	d801      	bhi.n	80005f2 <calc_pulse+0x12>
		return PULSE_ERROR;
 80005ee:	2305      	movs	r3, #5
 80005f0:	e021      	b.n	8000636 <calc_pulse+0x56>
	else if (time < 1200)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80005f8:	d201      	bcs.n	80005fe <calc_pulse+0x1e>
		return PULSE_SHORT;
 80005fa:	2304      	movs	r3, #4
 80005fc:	e01b      	b.n	8000636 <calc_pulse+0x56>
	else if (time < 2000)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000604:	d201      	bcs.n	800060a <calc_pulse+0x2a>
		return PULSE_LONG;
 8000606:	2303      	movs	r3, #3
 8000608:	e015      	b.n	8000636 <calc_pulse+0x56>
	else if (time < 3000)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000610:	4293      	cmp	r3, r2
 8000612:	d801      	bhi.n	8000618 <calc_pulse+0x38>
		return PULSE_2MS;
 8000614:	2302      	movs	r3, #2
 8000616:	e00e      	b.n	8000636 <calc_pulse+0x56>
	else if (time < 6000)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f241 726f 	movw	r2, #5999	; 0x176f
 800061e:	4293      	cmp	r3, r2
 8000620:	d801      	bhi.n	8000626 <calc_pulse+0x46>
		return PULSE_4MS;
 8000622:	2301      	movs	r3, #1
 8000624:	e007      	b.n	8000636 <calc_pulse+0x56>
	else if (time < 12000)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f642 62df 	movw	r2, #11999	; 0x2edf
 800062c:	4293      	cmp	r3, r2
 800062e:	d801      	bhi.n	8000634 <calc_pulse+0x54>
		return PULSE_9MS;
 8000630:	2300      	movs	r3, #0
 8000632:	e000      	b.n	8000636 <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8000634:	2305      	movs	r3, #5
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <ir_tim_interrupt>:

void ir_tim_interrupt(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 800064a:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <ir_tim_interrupt+0xa4>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b1f      	cmp	r3, #31
 8000650:	dc43      	bgt.n	80006da <ir_tim_interrupt+0x96>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 8000652:	2100      	movs	r1, #0
 8000654:	4825      	ldr	r0, [pc, #148]	; (80006ec <ir_tim_interrupt+0xa8>)
 8000656:	f004 fc19 	bl	8004e8c <HAL_TIM_ReadCapturedValue>
 800065a:	4603      	mov	r3, r0
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ffbf 	bl	80005e0 <calc_pulse>
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]

	switch (pulse)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	3b01      	subs	r3, #1
 800066a:	2b03      	cmp	r3, #3
 800066c:	d831      	bhi.n	80006d2 <ir_tim_interrupt+0x8e>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <ir_tim_interrupt+0x30>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	080006b5 	.word	0x080006b5
 8000678:	080006c3 	.word	0x080006c3
 800067c:	0800069b 	.word	0x0800069b
 8000680:	08000685 	.word	0x08000685
	{
	case PULSE_SHORT:
		received_value = received_value >> 1;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <ir_tim_interrupt+0xac>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	085b      	lsrs	r3, r3, #1
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <ir_tim_interrupt+0xac>)
 800068c:	6013      	str	r3, [r2, #0]
		received_bits++;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <ir_tim_interrupt+0xa4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <ir_tim_interrupt+0xa4>)
 8000696:	6013      	str	r3, [r2, #0]
		break;
 8000698:	e022      	b.n	80006e0 <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <ir_tim_interrupt+0xac>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	085b      	lsrs	r3, r3, #1
 80006a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006a4:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <ir_tim_interrupt+0xac>)
 80006a6:	6013      	str	r3, [r2, #0]
		received_bits++;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <ir_tim_interrupt+0xa4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <ir_tim_interrupt+0xa4>)
 80006b0:	6013      	str	r3, [r2, #0]
		break;
 80006b2:	e015      	b.n	80006e0 <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <ir_tim_interrupt+0xac>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <ir_tim_interrupt+0xa4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
		break;
 80006c0:	e00e      	b.n	80006e0 <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if (received_bits == 0)
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <ir_tim_interrupt+0xa4>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <ir_tim_interrupt+0x9a>
			received_bits = 32;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <ir_tim_interrupt+0xa4>)
 80006cc:	2220      	movs	r2, #32
 80006ce:	601a      	str	r2, [r3, #0]
		break;
 80006d0:	e005      	b.n	80006de <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ir_tim_interrupt+0xa4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
		break;
 80006d8:	e002      	b.n	80006e0 <ir_tim_interrupt+0x9c>
		return;
 80006da:	bf00      	nop
 80006dc:	e000      	b.n	80006e0 <ir_tim_interrupt+0x9c>
		break;
 80006de:	bf00      	nop
	}
}
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000b0 	.word	0x200000b0
 80006ec:	200000ec 	.word	0x200000ec
 80006f0:	200000ac 	.word	0x200000ac

080006f4 <ir_init>:

void ir_init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <ir_init+0x18>)
 80006fa:	f003 fb55 	bl	8003da8 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80006fe:	2100      	movs	r1, #0
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <ir_init+0x18>)
 8000702:	f003 fe9d 	bl	8004440 <HAL_TIM_IC_Start_IT>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000ec 	.word	0x200000ec

08000710 <ir_read>:

int ir_read(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <ir_read+0x30>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b20      	cmp	r3, #32
 800071c:	d002      	beq.n	8000724 <ir_read+0x14>
		return -1;
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	e007      	b.n	8000734 <ir_read+0x24>

	uint8_t value = received_value >> 16;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <ir_read+0x34>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <ir_read+0x30>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
	return value;
 8000732:	79fb      	ldrb	r3, [r7, #7]
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	200000b0 	.word	0x200000b0
 8000744:	200000ac 	.word	0x200000ac

08000748 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b0a      	cmp	r3, #10
 8000754:	d102      	bne.n	800075c <__io_putchar+0x14>
		__io_putchar('\r');
 8000756:	200d      	movs	r0, #13
 8000758:	f7ff fff6 	bl	8000748 <__io_putchar>

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800075c:	1d39      	adds	r1, r7, #4
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	2201      	movs	r2, #1
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <__io_putchar+0x2c>)
 8000766:	f005 fbcb 	bl	8005f00 <HAL_UART_Transmit>

	return 1;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200001cc 	.word	0x200001cc

08000778 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d108      	bne.n	800079a <HAL_TIM_IC_CaptureCallback+0x22>
	{
		switch (HAL_TIM_GetActiveChannel(&htim2))
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <HAL_TIM_IC_CaptureCallback+0x30>)
 800078a:	f004 fbff 	bl	8004f8c <HAL_TIM_GetActiveChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b01      	cmp	r3, #1
 8000792:	d104      	bne.n	800079e <HAL_TIM_IC_CaptureCallback+0x26>
		{
		case HAL_TIM_ACTIVE_CHANNEL_1:
			ir_tim_interrupt();
 8000794:	f7ff ff56 	bl	8000644 <ir_tim_interrupt>
			break;
 8000798:	e002      	b.n	80007a0 <HAL_TIM_IC_CaptureCallback+0x28>
		default:
			break;
		}
	}
 800079a:	bf00      	nop
 800079c:	e000      	b.n	80007a0 <HAL_TIM_IC_CaptureCallback+0x28>
			break;
 800079e:	bf00      	nop
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000ec 	.word	0x200000ec

080007ac <change_brightness>:
// zmiana jasnosci koloru
#define BRIGHTNESS_LIMIT_UP		50
#define BRIGHTNESS_LIMIT_DOWN	0
#define BRIGHTNESS_STEP			2
void change_brightness(led_t* led, int color_number, bool dir)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b087      	sub	sp, #28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	4613      	mov	r3, r2
 80007b8:	71fb      	strb	r3, [r7, #7]
	uint8_t* color;
	switch (color_number)
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d011      	beq.n	80007e4 <change_brightness+0x38>
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	2b03      	cmp	r3, #3
 80007c4:	dc12      	bgt.n	80007ec <change_brightness+0x40>
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d003      	beq.n	80007d4 <change_brightness+0x28>
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d004      	beq.n	80007dc <change_brightness+0x30>
		break;
	case 3:
		color = &led->b;
		break;
	default:
		break;
 80007d2:	e00b      	b.n	80007ec <change_brightness+0x40>
		color = &led->r;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3304      	adds	r3, #4
 80007d8:	617b      	str	r3, [r7, #20]
		break;
 80007da:	e008      	b.n	80007ee <change_brightness+0x42>
		color = &led->g;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3305      	adds	r3, #5
 80007e0:	617b      	str	r3, [r7, #20]
		break;
 80007e2:	e004      	b.n	80007ee <change_brightness+0x42>
		color = &led->b;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3306      	adds	r3, #6
 80007e8:	617b      	str	r3, [r7, #20]
		break;
 80007ea:	e000      	b.n	80007ee <change_brightness+0x42>
		break;
 80007ec:	bf00      	nop
	}

	if (dir)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00e      	beq.n	8000812 <change_brightness+0x66>
	{
		if (*color < BRIGHTNESS_LIMIT_UP)
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b31      	cmp	r3, #49	; 0x31
 80007fa:	d806      	bhi.n	800080a <change_brightness+0x5e>
			*color += BRIGHTNESS_STEP;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	3302      	adds	r3, #2
 8000802:	b2da      	uxtb	r2, r3
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	701a      	strb	r2, [r3, #0]
		if (*color > BRIGHTNESS_LIMIT_DOWN)
			*color -= BRIGHTNESS_STEP;
		else
			*color = BRIGHTNESS_LIMIT_DOWN;
	}
}
 8000808:	e011      	b.n	800082e <change_brightness+0x82>
			*color = BRIGHTNESS_LIMIT_UP;
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	2232      	movs	r2, #50	; 0x32
 800080e:	701a      	strb	r2, [r3, #0]
}
 8000810:	e00d      	b.n	800082e <change_brightness+0x82>
		if (*color > BRIGHTNESS_LIMIT_DOWN)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d006      	beq.n	8000828 <change_brightness+0x7c>
			*color -= BRIGHTNESS_STEP;
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	3b02      	subs	r3, #2
 8000820:	b2da      	uxtb	r2, r3
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	701a      	strb	r2, [r3, #0]
}
 8000826:	e002      	b.n	800082e <change_brightness+0x82>
			*color = BRIGHTNESS_LIMIT_DOWN;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <toggle_led>:

// wylaczanie ledow
void toggle_led(led_t* led)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	if (led->power) ws2812b_set_color(led->no, 0, 0, 0);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	79db      	ldrb	r3, [r3, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d007      	beq.n	800085a <toggle_led+0x20>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	2300      	movs	r3, #0
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	f001 f984 	bl	8001b60 <ws2812b_set_color>
 8000858:	e009      	b.n	800086e <toggle_led+0x34>
	else ws2812b_set_color(led->no, led->r, led->g, led->b);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7919      	ldrb	r1, [r3, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	795a      	ldrb	r2, [r3, #5]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	799b      	ldrb	r3, [r3, #6]
 800086a:	f001 f979 	bl	8001b60 <ws2812b_set_color>

	led->power = !led->power;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	79db      	ldrb	r3, [r3, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	f083 0301 	eor.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	71da      	strb	r2, [r3, #7]
	ws2812b_update();
 800088c:	f001 f95a 	bl	8001b44 <ws2812b_update>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <led_reset>:

// inicjalizacja oraz reset ledow
void led_reset(led_t* led)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	led_t* pointer = led;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<7; i++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	e01e      	b.n	80008e8 <led_reset+0x50>
	{
		pointer->no = i;
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	601a      	str	r2, [r3, #0]
		pointer->r = 2;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2202      	movs	r2, #2
 80008b4:	711a      	strb	r2, [r3, #4]
		pointer->g = 2;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2202      	movs	r2, #2
 80008ba:	715a      	strb	r2, [r3, #5]
		pointer->b = 2;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2202      	movs	r2, #2
 80008c0:	719a      	strb	r2, [r3, #6]
		pointer->power = true;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2201      	movs	r2, #1
 80008c6:	71da      	strb	r2, [r3, #7]
		ws2812b_set_color(pointer->no, pointer->r, pointer->g, pointer->b);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	7919      	ldrb	r1, [r3, #4]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	795a      	ldrb	r2, [r3, #5]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	799b      	ldrb	r3, [r3, #6]
 80008d8:	f001 f942 	bl	8001b60 <ws2812b_set_color>
		pointer++;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	3308      	adds	r3, #8
 80008e0:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<7; i++)
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	dddd      	ble.n	80008aa <led_reset+0x12>
	}
	ws2812b_update();
 80008ee:	f001 f929 	bl	8001b44 <ws2812b_update>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <color_patern>:
// tryby automatyczne
int limit = 80;
int speed = 1;

void color_patern(int* i, bool* dir)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	if (*dir)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d015      	beq.n	800093a <color_patern+0x3e>
	{
		if (*i < limit) *i+=speed;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <color_patern+0x70>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	da07      	bge.n	800092a <color_patern+0x2e>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <color_patern+0x74>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	441a      	add	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	601a      	str	r2, [r3, #0]
		{
			*i = 0;
			*dir = true;
		}
	}
}
 8000928:	e019      	b.n	800095e <color_patern+0x62>
			*i = limit;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <color_patern+0x70>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	601a      	str	r2, [r3, #0]
			*dir = false;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
}
 8000938:	e011      	b.n	800095e <color_patern+0x62>
		if (*i > 0) *i-=speed;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	dd07      	ble.n	8000952 <color_patern+0x56>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <color_patern+0x74>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	1ad2      	subs	r2, r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	e005      	b.n	800095e <color_patern+0x62>
			*i = 0;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
			*dir = true;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000000 	.word	0x20000000
 8000970:	20000004 	.word	0x20000004

08000974 <automatic_mode1>:

// tryb automatyczny nr 1
void automatic_mode1(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	static bool dir = true;				// zmienne do stopniowej zmiany barwy ledow
	static int i = 0;					//

	ws2812b_set_color(0, gamma8[i], 			gamma8[i], 			gamma8[i]);
 8000978:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <automatic_mode1+0x128>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a48      	ldr	r2, [pc, #288]	; (8000aa0 <automatic_mode1+0x12c>)
 800097e:	5cd1      	ldrb	r1, [r2, r3]
 8000980:	4b46      	ldr	r3, [pc, #280]	; (8000a9c <automatic_mode1+0x128>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a46      	ldr	r2, [pc, #280]	; (8000aa0 <automatic_mode1+0x12c>)
 8000986:	5cd2      	ldrb	r2, [r2, r3]
 8000988:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <automatic_mode1+0x128>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4844      	ldr	r0, [pc, #272]	; (8000aa0 <automatic_mode1+0x12c>)
 800098e:	5cc3      	ldrb	r3, [r0, r3]
 8000990:	2000      	movs	r0, #0
 8000992:	f001 f8e5 	bl	8001b60 <ws2812b_set_color>
	ws2812b_set_color(1, gamma8[i], 			gamma8[i], 			gamma8[limit-i]);
 8000996:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <automatic_mode1+0x128>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a41      	ldr	r2, [pc, #260]	; (8000aa0 <automatic_mode1+0x12c>)
 800099c:	5cd1      	ldrb	r1, [r2, r3]
 800099e:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <automatic_mode1+0x128>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a3f      	ldr	r2, [pc, #252]	; (8000aa0 <automatic_mode1+0x12c>)
 80009a4:	5cd0      	ldrb	r0, [r2, r3]
 80009a6:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <automatic_mode1+0x130>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <automatic_mode1+0x128>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	4a3b      	ldr	r2, [pc, #236]	; (8000aa0 <automatic_mode1+0x12c>)
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	4602      	mov	r2, r0
 80009b6:	2001      	movs	r0, #1
 80009b8:	f001 f8d2 	bl	8001b60 <ws2812b_set_color>
	ws2812b_set_color(2, gamma8[i], 			gamma8[limit-i], 	gamma8[i]);
 80009bc:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <automatic_mode1+0x128>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a37      	ldr	r2, [pc, #220]	; (8000aa0 <automatic_mode1+0x12c>)
 80009c2:	5cd1      	ldrb	r1, [r2, r3]
 80009c4:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <automatic_mode1+0x130>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <automatic_mode1+0x128>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	4a34      	ldr	r2, [pc, #208]	; (8000aa0 <automatic_mode1+0x12c>)
 80009d0:	5cd2      	ldrb	r2, [r2, r3]
 80009d2:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <automatic_mode1+0x128>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4832      	ldr	r0, [pc, #200]	; (8000aa0 <automatic_mode1+0x12c>)
 80009d8:	5cc3      	ldrb	r3, [r0, r3]
 80009da:	2002      	movs	r0, #2
 80009dc:	f001 f8c0 	bl	8001b60 <ws2812b_set_color>
	ws2812b_set_color(3, gamma8[i], 			gamma8[limit-i], 	gamma8[limit-i]);
 80009e0:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <automatic_mode1+0x128>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a2e      	ldr	r2, [pc, #184]	; (8000aa0 <automatic_mode1+0x12c>)
 80009e6:	5cd1      	ldrb	r1, [r2, r3]
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <automatic_mode1+0x130>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <automatic_mode1+0x128>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	4a2b      	ldr	r2, [pc, #172]	; (8000aa0 <automatic_mode1+0x12c>)
 80009f4:	5cd0      	ldrb	r0, [r2, r3]
 80009f6:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <automatic_mode1+0x130>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <automatic_mode1+0x128>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	4a27      	ldr	r2, [pc, #156]	; (8000aa0 <automatic_mode1+0x12c>)
 8000a02:	5cd3      	ldrb	r3, [r2, r3]
 8000a04:	4602      	mov	r2, r0
 8000a06:	2003      	movs	r0, #3
 8000a08:	f001 f8aa 	bl	8001b60 <ws2812b_set_color>
	ws2812b_set_color(4, gamma8[limit-i], 		gamma8[i], 			gamma8[i]);
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <automatic_mode1+0x130>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <automatic_mode1+0x128>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <automatic_mode1+0x12c>)
 8000a18:	5cd1      	ldrb	r1, [r2, r3]
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <automatic_mode1+0x128>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <automatic_mode1+0x12c>)
 8000a20:	5cd2      	ldrb	r2, [r2, r3]
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <automatic_mode1+0x128>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	481e      	ldr	r0, [pc, #120]	; (8000aa0 <automatic_mode1+0x12c>)
 8000a28:	5cc3      	ldrb	r3, [r0, r3]
 8000a2a:	2004      	movs	r0, #4
 8000a2c:	f001 f898 	bl	8001b60 <ws2812b_set_color>
	ws2812b_set_color(5, gamma8[limit-i], 		gamma8[i], 			gamma8[limit-i]);
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <automatic_mode1+0x130>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <automatic_mode1+0x128>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <automatic_mode1+0x12c>)
 8000a3c:	5cd1      	ldrb	r1, [r2, r3]
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <automatic_mode1+0x128>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <automatic_mode1+0x12c>)
 8000a44:	5cd0      	ldrb	r0, [r2, r3]
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <automatic_mode1+0x130>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <automatic_mode1+0x128>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <automatic_mode1+0x12c>)
 8000a52:	5cd3      	ldrb	r3, [r2, r3]
 8000a54:	4602      	mov	r2, r0
 8000a56:	2005      	movs	r0, #5
 8000a58:	f001 f882 	bl	8001b60 <ws2812b_set_color>
	ws2812b_set_color(6, gamma8[limit-i], 		gamma8[limit-i], 	gamma8[i]);
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <automatic_mode1+0x130>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <automatic_mode1+0x128>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <automatic_mode1+0x12c>)
 8000a68:	5cd1      	ldrb	r1, [r2, r3]
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <automatic_mode1+0x130>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <automatic_mode1+0x128>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <automatic_mode1+0x12c>)
 8000a76:	5cd2      	ldrb	r2, [r2, r3]
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <automatic_mode1+0x128>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <automatic_mode1+0x12c>)
 8000a7e:	5cc3      	ldrb	r3, [r0, r3]
 8000a80:	2006      	movs	r0, #6
 8000a82:	f001 f86d 	bl	8001b60 <ws2812b_set_color>
	ws2812b_update();
 8000a86:	f001 f85d 	bl	8001b44 <ws2812b_update>
	HAL_Delay(5);
 8000a8a:	2005      	movs	r0, #5
 8000a8c:	f001 f93c 	bl	8001d08 <HAL_Delay>

	color_patern(&i, &dir);
 8000a90:	4905      	ldr	r1, [pc, #20]	; (8000aa8 <automatic_mode1+0x134>)
 8000a92:	4802      	ldr	r0, [pc, #8]	; (8000a9c <automatic_mode1+0x128>)
 8000a94:	f7ff ff32 	bl	80008fc <color_patern>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200000b4 	.word	0x200000b4
 8000aa0:	08007b14 	.word	0x08007b14
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008

08000aac <automatic_mode2>:

//tryb automatyczny nr 2
void automatic_mode2(void)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
	static bool dir_i=true, dir_j=true, dir_k=true;				// zmienne do stopniowej zmiany barwy ledow
	static int i=0, j=30, k=60;									//

	for (int m=0; m<7; m++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	e011      	b.n	8000adc <automatic_mode2+0x30>
		ws2812b_set_color(m, gamma8[i], gamma8[j], gamma8[k]);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <automatic_mode2+0x60>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <automatic_mode2+0x64>)
 8000ac0:	5cd1      	ldrb	r1, [r2, r3]
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <automatic_mode2+0x68>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <automatic_mode2+0x64>)
 8000ac8:	5cd2      	ldrb	r2, [r2, r3]
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <automatic_mode2+0x6c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4c10      	ldr	r4, [pc, #64]	; (8000b10 <automatic_mode2+0x64>)
 8000ad0:	5ce3      	ldrb	r3, [r4, r3]
 8000ad2:	f001 f845 	bl	8001b60 <ws2812b_set_color>
	for (int m=0; m<7; m++)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	ddea      	ble.n	8000ab8 <automatic_mode2+0xc>
	ws2812b_update();
 8000ae2:	f001 f82f 	bl	8001b44 <ws2812b_update>
	HAL_Delay(5);
 8000ae6:	2005      	movs	r0, #5
 8000ae8:	f001 f90e 	bl	8001d08 <HAL_Delay>

	color_patern(&i, &dir_i);
 8000aec:	490b      	ldr	r1, [pc, #44]	; (8000b1c <automatic_mode2+0x70>)
 8000aee:	4807      	ldr	r0, [pc, #28]	; (8000b0c <automatic_mode2+0x60>)
 8000af0:	f7ff ff04 	bl	80008fc <color_patern>
	color_patern(&j, &dir_j);
 8000af4:	490a      	ldr	r1, [pc, #40]	; (8000b20 <automatic_mode2+0x74>)
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <automatic_mode2+0x68>)
 8000af8:	f7ff ff00 	bl	80008fc <color_patern>
	color_patern(&k, &dir_k);
 8000afc:	4909      	ldr	r1, [pc, #36]	; (8000b24 <automatic_mode2+0x78>)
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <automatic_mode2+0x6c>)
 8000b00:	f7ff fefc 	bl	80008fc <color_patern>
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	200000b8 	.word	0x200000b8
 8000b10:	08007b14 	.word	0x08007b14
 8000b14:	2000000c 	.word	0x2000000c
 8000b18:	20000010 	.word	0x20000010
 8000b1c:	20000014 	.word	0x20000014
 8000b20:	20000015 	.word	0x20000015
 8000b24:	20000016 	.word	0x20000016

08000b28 <automatic_mode3>:

//tryb automatyczny nr 3
void automatic_mode3(void)
{
 8000b28:	b598      	push	{r3, r4, r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	static int led_pos = 0;
	static bool dir = true;
	static uint8_t color_r = 0, color_g = 10, color_b = 20;

	ws2812b_set_color(led_pos, gamma8[color_r], gamma8[color_g], gamma8[color_b]);
 8000b2c:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <automatic_mode3+0x148>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	461c      	mov	r4, r3
 8000b32:	4b50      	ldr	r3, [pc, #320]	; (8000c74 <automatic_mode3+0x14c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b4f      	ldr	r3, [pc, #316]	; (8000c78 <automatic_mode3+0x150>)
 8000b3a:	5c99      	ldrb	r1, [r3, r2]
 8000b3c:	4b4f      	ldr	r3, [pc, #316]	; (8000c7c <automatic_mode3+0x154>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b4d      	ldr	r3, [pc, #308]	; (8000c78 <automatic_mode3+0x150>)
 8000b44:	5c9a      	ldrb	r2, [r3, r2]
 8000b46:	4b4e      	ldr	r3, [pc, #312]	; (8000c80 <automatic_mode3+0x158>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	4b4a      	ldr	r3, [pc, #296]	; (8000c78 <automatic_mode3+0x150>)
 8000b4e:	5c1b      	ldrb	r3, [r3, r0]
 8000b50:	4620      	mov	r0, r4
 8000b52:	f001 f805 	bl	8001b60 <ws2812b_set_color>
	ws2812b_update();
 8000b56:	f000 fff5 	bl	8001b44 <ws2812b_update>

	if (dir)
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <automatic_mode3+0x15c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d040      	beq.n	8000be4 <automatic_mode3+0xbc>
	{
		if (led_pos < 6) led_pos++;
 8000b62:	4b43      	ldr	r3, [pc, #268]	; (8000c70 <automatic_mode3+0x148>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	dc05      	bgt.n	8000b76 <automatic_mode3+0x4e>
 8000b6a:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <automatic_mode3+0x148>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a3f      	ldr	r2, [pc, #252]	; (8000c70 <automatic_mode3+0x148>)
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	e076      	b.n	8000c64 <automatic_mode3+0x13c>
		else
		{
			dir = !dir;
 8000b76:	4b43      	ldr	r3, [pc, #268]	; (8000c84 <automatic_mode3+0x15c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bf14      	ite	ne
 8000b7e:	2301      	movne	r3, #1
 8000b80:	2300      	moveq	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f083 0301 	eor.w	r3, r3, #1
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <automatic_mode3+0x15c>)
 8000b92:	701a      	strb	r2, [r3, #0]
			color_r = rand()%limit;
 8000b94:	f005 ff10 	bl	80069b8 <rand>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <automatic_mode3+0x160>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	fb92 f1f3 	sdiv	r1, r2, r3
 8000ba2:	fb01 f303 	mul.w	r3, r1, r3
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <automatic_mode3+0x14c>)
 8000bac:	701a      	strb	r2, [r3, #0]
			color_g = rand()%limit;
 8000bae:	f005 ff03 	bl	80069b8 <rand>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <automatic_mode3+0x160>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	fb92 f1f3 	sdiv	r1, r2, r3
 8000bbc:	fb01 f303 	mul.w	r3, r1, r3
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <automatic_mode3+0x154>)
 8000bc6:	701a      	strb	r2, [r3, #0]
			color_b = rand()%limit;
 8000bc8:	f005 fef6 	bl	80069b8 <rand>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <automatic_mode3+0x160>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	fb92 f1f3 	sdiv	r1, r2, r3
 8000bd6:	fb01 f303 	mul.w	r3, r1, r3
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <automatic_mode3+0x158>)
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e03f      	b.n	8000c64 <automatic_mode3+0x13c>
		}
	}
	else
	{
		if (led_pos > 0) led_pos--;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <automatic_mode3+0x148>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	dd05      	ble.n	8000bf8 <automatic_mode3+0xd0>
 8000bec:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <automatic_mode3+0x148>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <automatic_mode3+0x148>)
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	e035      	b.n	8000c64 <automatic_mode3+0x13c>
		else
		{
			dir = !dir;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <automatic_mode3+0x15c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <automatic_mode3+0x15c>)
 8000c14:	701a      	strb	r2, [r3, #0]
			color_r = rand()%limit;
 8000c16:	f005 fecf 	bl	80069b8 <rand>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <automatic_mode3+0x160>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	fb92 f1f3 	sdiv	r1, r2, r3
 8000c24:	fb01 f303 	mul.w	r3, r1, r3
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <automatic_mode3+0x14c>)
 8000c2e:	701a      	strb	r2, [r3, #0]
			color_g = rand()%limit;
 8000c30:	f005 fec2 	bl	80069b8 <rand>
 8000c34:	4602      	mov	r2, r0
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <automatic_mode3+0x160>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	fb92 f1f3 	sdiv	r1, r2, r3
 8000c3e:	fb01 f303 	mul.w	r3, r1, r3
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <automatic_mode3+0x154>)
 8000c48:	701a      	strb	r2, [r3, #0]
			color_b = rand()%limit;
 8000c4a:	f005 feb5 	bl	80069b8 <rand>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <automatic_mode3+0x160>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	fb92 f1f3 	sdiv	r1, r2, r3
 8000c58:	fb01 f303 	mul.w	r3, r1, r3
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <automatic_mode3+0x158>)
 8000c62:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_Delay(100);
 8000c64:	2064      	movs	r0, #100	; 0x64
 8000c66:	f001 f84f 	bl	8001d08 <HAL_Delay>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd98      	pop	{r3, r4, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000bc 	.word	0x200000bc
 8000c74:	200000c0 	.word	0x200000c0
 8000c78:	08007b14 	.word	0x08007b14
 8000c7c:	20000017 	.word	0x20000017
 8000c80:	20000018 	.word	0x20000018
 8000c84:	20000019 	.word	0x20000019
 8000c88:	20000000 	.word	0x20000000

08000c8c <automatic_mode4>:

//tryb automatyczny nr 4
void automatic_mode4(void)
{
 8000c8c:	b598      	push	{r3, r4, r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	static int led_pos = 0;
	static int positions[7] = {0}, positions_left = 7;
	static uint8_t color_r = 0, color_g = 10, color_b = 20;

	ws2812b_set_color(led_pos, gamma8[color_r], gamma8[color_g], gamma8[color_b]);
 8000c90:	4b38      	ldr	r3, [pc, #224]	; (8000d74 <automatic_mode4+0xe8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	461c      	mov	r4, r3
 8000c96:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <automatic_mode4+0xec>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <automatic_mode4+0xf0>)
 8000c9e:	5c99      	ldrb	r1, [r3, r2]
 8000ca0:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <automatic_mode4+0xf4>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <automatic_mode4+0xf0>)
 8000ca8:	5c9a      	ldrb	r2, [r3, r2]
 8000caa:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <automatic_mode4+0xf8>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <automatic_mode4+0xf0>)
 8000cb2:	5c1b      	ldrb	r3, [r3, r0]
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f000 ff53 	bl	8001b60 <ws2812b_set_color>
	ws2812b_update();
 8000cba:	f000 ff43 	bl	8001b44 <ws2812b_update>

	while(1)
	{
		led_pos = rand()%7;
 8000cbe:	f005 fe7b 	bl	80069b8 <rand>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <automatic_mode4+0xfc>)
 8000cc6:	fb83 1302 	smull	r1, r3, r3, r2
 8000cca:	4413      	add	r3, r2
 8000ccc:	1099      	asrs	r1, r3, #2
 8000cce:	17d3      	asrs	r3, r2, #31
 8000cd0:	1ac9      	subs	r1, r1, r3
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	1a5b      	subs	r3, r3, r1
 8000cd8:	1ad1      	subs	r1, r2, r3
 8000cda:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <automatic_mode4+0xe8>)
 8000cdc:	6019      	str	r1, [r3, #0]
		if (positions[led_pos] == 0)
 8000cde:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <automatic_mode4+0xe8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a2a      	ldr	r2, [pc, #168]	; (8000d8c <automatic_mode4+0x100>)
 8000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10b      	bne.n	8000d04 <automatic_mode4+0x78>
		{
			positions[led_pos] = 1;
 8000cec:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <automatic_mode4+0xe8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a26      	ldr	r2, [pc, #152]	; (8000d8c <automatic_mode4+0x100>)
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			positions_left--;
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <automatic_mode4+0x104>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	4a24      	ldr	r2, [pc, #144]	; (8000d90 <automatic_mode4+0x104>)
 8000d00:	6013      	str	r3, [r2, #0]
			break;
 8000d02:	e032      	b.n	8000d6a <automatic_mode4+0xde>
		}
		else if (positions_left == 0)
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <automatic_mode4+0x104>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1d8      	bne.n	8000cbe <automatic_mode4+0x32>
		{
			memset(&positions[0], 0, sizeof(positions));
 8000d0c:	221c      	movs	r2, #28
 8000d0e:	2100      	movs	r1, #0
 8000d10:	481e      	ldr	r0, [pc, #120]	; (8000d8c <automatic_mode4+0x100>)
 8000d12:	f005 fe1b 	bl	800694c <memset>
			positions_left = 7;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <automatic_mode4+0x104>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
			color_r = rand()%limit;
 8000d1c:	f005 fe4c 	bl	80069b8 <rand>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <automatic_mode4+0x108>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	fb92 f1f3 	sdiv	r1, r2, r3
 8000d2a:	fb01 f303 	mul.w	r3, r1, r3
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <automatic_mode4+0xec>)
 8000d34:	701a      	strb	r2, [r3, #0]
			color_g = rand()%limit;
 8000d36:	f005 fe3f 	bl	80069b8 <rand>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <automatic_mode4+0x108>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	fb92 f1f3 	sdiv	r1, r2, r3
 8000d44:	fb01 f303 	mul.w	r3, r1, r3
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <automatic_mode4+0xf4>)
 8000d4e:	701a      	strb	r2, [r3, #0]
			color_b = rand()%limit;
 8000d50:	f005 fe32 	bl	80069b8 <rand>
 8000d54:	4602      	mov	r2, r0
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <automatic_mode4+0x108>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	fb92 f1f3 	sdiv	r1, r2, r3
 8000d5e:	fb01 f303 	mul.w	r3, r1, r3
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <automatic_mode4+0xf8>)
 8000d68:	701a      	strb	r2, [r3, #0]
			break;
		}
	}

	HAL_Delay(100);
 8000d6a:	2064      	movs	r0, #100	; 0x64
 8000d6c:	f000 ffcc 	bl	8001d08 <HAL_Delay>
}
 8000d70:	bf00      	nop
 8000d72:	bd98      	pop	{r3, r4, r7, pc}
 8000d74:	200000c4 	.word	0x200000c4
 8000d78:	200000c8 	.word	0x200000c8
 8000d7c:	08007b14 	.word	0x08007b14
 8000d80:	2000001a 	.word	0x2000001a
 8000d84:	2000001b 	.word	0x2000001b
 8000d88:	92492493 	.word	0x92492493
 8000d8c:	200000cc 	.word	0x200000cc
 8000d90:	2000001c 	.word	0x2000001c
 8000d94:	20000000 	.word	0x20000000

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b09a      	sub	sp, #104	; 0x68
 8000d9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9e:	f000 ff3e 	bl	8001c1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da2:	f000 fa8d 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da6:	f7ff fc03 	bl	80005b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000daa:	f7ff fbe3 	bl	8000574 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000dae:	f000 fde1 	bl	8001974 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000db2:	f000 fc17 	bl	80015e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000db6:	f000 fca1 	bl	80016fc <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // inicjalizacja TIM2 jako timera mierzacego czas impulsow wyjsciowych z odbiornika IR zarowno
  // dodatnich i ujemnych
  ir_init();
 8000dba:	f7ff fc9b 	bl	80006f4 <ir_init>
  ws2812b_init();
 8000dbe:	f000 fe91 	bl	8001ae4 <ws2812b_init>

  uint32_t last_time = HAL_GetTick();	// do odmierzania interwalu 1000ms w wysylaniu danych do konsoli po USART2
 8000dc2:	f000 ff95 	bl	8001cf0 <HAL_GetTick>
 8000dc6:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t active_led_no = 0;			// numer wybranej diody (0...6)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	65bb      	str	r3, [r7, #88]	; 0x58
  int active_color = 1;					// edytowany kolor (1-red, 2-green, 3-blue)
 8000dcc:	2301      	movs	r3, #1
 8000dce:	657b      	str	r3, [r7, #84]	; 0x54
  int mode = 1;							// tryby pracy (1-manual pojedyncza dioda, 2-manual wszystkie diody, 3..5-automat)
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	653b      	str	r3, [r7, #80]	; 0x50

  led_t led[7];
  led_reset(&led[0]);
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fd5e 	bl	8000898 <led_reset>

  while (1)
  {
	  int value = ir_read();
 8000ddc:	f7ff fc98 	bl	8000710 <ir_read>
 8000de0:	63f8      	str	r0, [r7, #60]	; 0x3c

	  switch (value)	// kod wspolny dla wszystkich trybow sterowania
 8000de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000de4:	3b42      	subs	r3, #66	; 0x42
 8000de6:	2b10      	cmp	r3, #16
 8000de8:	d861      	bhi.n	8000eae <main+0x116>
 8000dea:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <main+0x58>)
 8000dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df0:	08000e35 	.word	0x08000e35
 8000df4:	08000eaf 	.word	0x08000eaf
 8000df8:	08000eaf 	.word	0x08000eaf
 8000dfc:	08000e47 	.word	0x08000e47
 8000e00:	08000eaf 	.word	0x08000eaf
 8000e04:	08000e85 	.word	0x08000e85
 8000e08:	08000eaf 	.word	0x08000eaf
 8000e0c:	08000eaf 	.word	0x08000eaf
 8000e10:	08000e41 	.word	0x08000e41
 8000e14:	08000eaf 	.word	0x08000eaf
 8000e18:	08000eaf 	.word	0x08000eaf
 8000e1c:	08000eaf 	.word	0x08000eaf
 8000e20:	08000eaf 	.word	0x08000eaf
 8000e24:	08000eaf 	.word	0x08000eaf
 8000e28:	08000eaf 	.word	0x08000eaf
 8000e2c:	08000eaf 	.word	0x08000eaf
 8000e30:	08000e3b 	.word	0x08000e3b
	  {
	  case IR_CODE_7:
		  active_color = 1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	657b      	str	r3, [r7, #84]	; 0x54
		  break;
 8000e38:	e039      	b.n	8000eae <main+0x116>
	  case IR_CODE_8:
		  active_color = 2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	657b      	str	r3, [r7, #84]	; 0x54
		  break;
 8000e3e:	e036      	b.n	8000eae <main+0x116>
	  case IR_CODE_9:
		  active_color = 3;
 8000e40:	2303      	movs	r3, #3
 8000e42:	657b      	str	r3, [r7, #84]	; 0x54
		  break;
 8000e44:	e033      	b.n	8000eae <main+0x116>
	  case IR_CODE_ONOFF:
		  if (mode == 1)
 8000e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d107      	bne.n	8000e5c <main+0xc4>
			  toggle_led(&led[active_led_no]);
 8000e4c:	1d3a      	adds	r2, r7, #4
 8000e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	4413      	add	r3, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fcf0 	bl	800083a <toggle_led>
 8000e5a:	e00f      	b.n	8000e7c <main+0xe4>
		  else
		  {
			  for (int i=0; i<7; i++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e60:	e009      	b.n	8000e76 <main+0xde>
			  {
				  toggle_led(&led[i]);
 8000e62:	1d3a      	adds	r2, r7, #4
 8000e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4413      	add	r3, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fce5 	bl	800083a <toggle_led>
			  for (int i=0; i<7; i++)
 8000e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e72:	3301      	adds	r3, #1
 8000e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e78:	2b06      	cmp	r3, #6
 8000e7a:	ddf2      	ble.n	8000e62 <main+0xca>
			  }
		  }
		  HAL_Delay(NEXT_CLICK_DELAY);
 8000e7c:	200a      	movs	r0, #10
 8000e7e:	f000 ff43 	bl	8001d08 <HAL_Delay>
		  break;
 8000e82:	e014      	b.n	8000eae <main+0x116>
  	  case IR_CODE_MENU:
  		  active_led_no = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	65bb      	str	r3, [r7, #88]	; 0x58
  		  active_color = 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	657b      	str	r3, [r7, #84]	; 0x54
  		  if (mode < 6) mode++;
 8000e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	dc03      	bgt.n	8000e9a <main+0x102>
 8000e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e94:	3301      	adds	r3, #1
 8000e96:	653b      	str	r3, [r7, #80]	; 0x50
 8000e98:	e001      	b.n	8000e9e <main+0x106>
  		  else mode = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	653b      	str	r3, [r7, #80]	; 0x50
  		  led_reset(&led[0]);
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fcf9 	bl	8000898 <led_reset>
  		  HAL_Delay(NEXT_CLICK_DELAY);
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f000 ff2e 	bl	8001d08 <HAL_Delay>
  		  break;
 8000eac:	bf00      	nop
	  }

	  if (mode == 1)	// tryb sterowania pojedyncza dioda led
 8000eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	f040 8142 	bne.w	800113a <main+0x3a2>
	  {
		  switch (value)
 8000eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb8:	3b07      	subs	r3, #7
 8000eba:	2b57      	cmp	r3, #87	; 0x57
 8000ebc:	f200 81c4 	bhi.w	8001248 <main+0x4b0>
 8000ec0:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <main+0x130>)
 8000ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec6:	bf00      	nop
 8000ec8:	0800106f 	.word	0x0800106f
 8000ecc:	08001051 	.word	0x08001051
 8000ed0:	08001089 	.word	0x08001089
 8000ed4:	08001249 	.word	0x08001249
 8000ed8:	08001249 	.word	0x08001249
 8000edc:	08001033 	.word	0x08001033
 8000ee0:	08001249 	.word	0x08001249
 8000ee4:	08001249 	.word	0x08001249
 8000ee8:	08001249 	.word	0x08001249
 8000eec:	08001249 	.word	0x08001249
 8000ef0:	08001249 	.word	0x08001249
 8000ef4:	08001249 	.word	0x08001249
 8000ef8:	08001249 	.word	0x08001249
 8000efc:	08001249 	.word	0x08001249
 8000f00:	08001249 	.word	0x08001249
 8000f04:	08001029 	.word	0x08001029
 8000f08:	08001249 	.word	0x08001249
 8000f0c:	0800103d 	.word	0x0800103d
 8000f10:	080010ef 	.word	0x080010ef
 8000f14:	08001249 	.word	0x08001249
 8000f18:	08001249 	.word	0x08001249
 8000f1c:	0800105b 	.word	0x0800105b
 8000f20:	08001249 	.word	0x08001249
 8000f24:	08001249 	.word	0x08001249
 8000f28:	08001249 	.word	0x08001249
 8000f2c:	08001249 	.word	0x08001249
 8000f30:	08001249 	.word	0x08001249
 8000f34:	08001249 	.word	0x08001249
 8000f38:	08001249 	.word	0x08001249
 8000f3c:	08001249 	.word	0x08001249
 8000f40:	08001249 	.word	0x08001249
 8000f44:	08001249 	.word	0x08001249
 8000f48:	08001249 	.word	0x08001249
 8000f4c:	08001249 	.word	0x08001249
 8000f50:	08001249 	.word	0x08001249
 8000f54:	08001249 	.word	0x08001249
 8000f58:	08001249 	.word	0x08001249
 8000f5c:	08001249 	.word	0x08001249
 8000f60:	08001249 	.word	0x08001249
 8000f64:	08001249 	.word	0x08001249
 8000f68:	08001249 	.word	0x08001249
 8000f6c:	08001249 	.word	0x08001249
 8000f70:	08001249 	.word	0x08001249
 8000f74:	08001249 	.word	0x08001249
 8000f78:	08001249 	.word	0x08001249
 8000f7c:	08001249 	.word	0x08001249
 8000f80:	08001249 	.word	0x08001249
 8000f84:	08001249 	.word	0x08001249
 8000f88:	08001249 	.word	0x08001249
 8000f8c:	08001249 	.word	0x08001249
 8000f90:	08001249 	.word	0x08001249
 8000f94:	08001249 	.word	0x08001249
 8000f98:	08001249 	.word	0x08001249
 8000f9c:	08001249 	.word	0x08001249
 8000fa0:	08001249 	.word	0x08001249
 8000fa4:	08001249 	.word	0x08001249
 8000fa8:	08001249 	.word	0x08001249
 8000fac:	080010a3 	.word	0x080010a3
 8000fb0:	08001249 	.word	0x08001249
 8000fb4:	08001249 	.word	0x08001249
 8000fb8:	08001249 	.word	0x08001249
 8000fbc:	08001249 	.word	0x08001249
 8000fc0:	08001249 	.word	0x08001249
 8000fc4:	08001249 	.word	0x08001249
 8000fc8:	08001249 	.word	0x08001249
 8000fcc:	08001249 	.word	0x08001249
 8000fd0:	08001249 	.word	0x08001249
 8000fd4:	08001249 	.word	0x08001249
 8000fd8:	08001249 	.word	0x08001249
 8000fdc:	08001249 	.word	0x08001249
 8000fe0:	08001249 	.word	0x08001249
 8000fe4:	08001249 	.word	0x08001249
 8000fe8:	08001249 	.word	0x08001249
 8000fec:	08001249 	.word	0x08001249
 8000ff0:	08001249 	.word	0x08001249
 8000ff4:	08001249 	.word	0x08001249
 8000ff8:	08001249 	.word	0x08001249
 8000ffc:	08001249 	.word	0x08001249
 8001000:	08001249 	.word	0x08001249
 8001004:	08001249 	.word	0x08001249
 8001008:	08001249 	.word	0x08001249
 800100c:	08001249 	.word	0x08001249
 8001010:	08001249 	.word	0x08001249
 8001014:	08001065 	.word	0x08001065
 8001018:	08001249 	.word	0x08001249
 800101c:	08001249 	.word	0x08001249
 8001020:	08001249 	.word	0x08001249
 8001024:	08001047 	.word	0x08001047
		  	  {
		  	  case IR_CODE_0:
		  		  active_led_no = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	65bb      	str	r3, [r7, #88]	; 0x58
		  		  active_color = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	657b      	str	r3, [r7, #84]	; 0x54
		  		  break;
 8001030:	e10a      	b.n	8001248 <main+0x4b0>
		  	  case IR_CODE_1:
		  		  active_led_no = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	65bb      	str	r3, [r7, #88]	; 0x58
		  		  active_color = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	657b      	str	r3, [r7, #84]	; 0x54
		  		  break;
 800103a:	e105      	b.n	8001248 <main+0x4b0>
		  	  case IR_CODE_2:
		  		  active_led_no = 2;
 800103c:	2302      	movs	r3, #2
 800103e:	65bb      	str	r3, [r7, #88]	; 0x58
		  		  active_color = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	657b      	str	r3, [r7, #84]	; 0x54
		  		  break;
 8001044:	e100      	b.n	8001248 <main+0x4b0>
		  	  case IR_CODE_3:
		  		  active_led_no = 3;
 8001046:	2303      	movs	r3, #3
 8001048:	65bb      	str	r3, [r7, #88]	; 0x58
		  		  active_color = 1;
 800104a:	2301      	movs	r3, #1
 800104c:	657b      	str	r3, [r7, #84]	; 0x54
		  		  break;
 800104e:	e0fb      	b.n	8001248 <main+0x4b0>
		  	  case IR_CODE_4:
		  		  active_led_no = 4;
 8001050:	2304      	movs	r3, #4
 8001052:	65bb      	str	r3, [r7, #88]	; 0x58
		  		  active_color = 1;
 8001054:	2301      	movs	r3, #1
 8001056:	657b      	str	r3, [r7, #84]	; 0x54
		  		  break;
 8001058:	e0f6      	b.n	8001248 <main+0x4b0>
		  	  case IR_CODE_5:
		  		  active_led_no = 5;
 800105a:	2305      	movs	r3, #5
 800105c:	65bb      	str	r3, [r7, #88]	; 0x58
		  		  active_color = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	657b      	str	r3, [r7, #84]	; 0x54
		  		  break;
 8001062:	e0f1      	b.n	8001248 <main+0x4b0>
		  	  case IR_CODE_6:
		  		  active_led_no = 6;
 8001064:	2306      	movs	r3, #6
 8001066:	65bb      	str	r3, [r7, #88]	; 0x58
		  		  active_color = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	657b      	str	r3, [r7, #84]	; 0x54
		  		  break;
 800106c:	e0ec      	b.n	8001248 <main+0x4b0>
		  	  case IR_CODE_REWIND:
		  		  if (active_led_no > 0) active_led_no--;
 800106e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <main+0x2e4>
 8001074:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001076:	3b01      	subs	r3, #1
 8001078:	65bb      	str	r3, [r7, #88]	; 0x58
 800107a:	e001      	b.n	8001080 <main+0x2e8>
		  		  else active_led_no = 6;
 800107c:	2306      	movs	r3, #6
 800107e:	65bb      	str	r3, [r7, #88]	; 0x58
		  		  HAL_Delay(NEXT_CLICK_DELAY);
 8001080:	200a      	movs	r0, #10
 8001082:	f000 fe41 	bl	8001d08 <HAL_Delay>
		  		  break;
 8001086:	e0df      	b.n	8001248 <main+0x4b0>
		  	  case IR_CODE_FORWARD:
		  		  if (active_led_no < 6) active_led_no++;
 8001088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800108a:	2b05      	cmp	r3, #5
 800108c:	d803      	bhi.n	8001096 <main+0x2fe>
 800108e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001090:	3301      	adds	r3, #1
 8001092:	65bb      	str	r3, [r7, #88]	; 0x58
 8001094:	e001      	b.n	800109a <main+0x302>
				  else active_led_no = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	65bb      	str	r3, [r7, #88]	; 0x58
		  		  HAL_Delay(NEXT_CLICK_DELAY);
 800109a:	200a      	movs	r0, #10
 800109c:	f000 fe34 	bl	8001d08 <HAL_Delay>
		  		  break;
 80010a0:	e0d2      	b.n	8001248 <main+0x4b0>
		  	  case IR_CODE_PLUS:
		  		  change_brightness(&led[active_led_no], active_color, true);
 80010a2:	1d3a      	adds	r2, r7, #4
 80010a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	2201      	movs	r2, #1
 80010ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fb7c 	bl	80007ac <change_brightness>
		  		  ws2812b_set_color(led[active_led_no].no, led[active_led_no].r, led[active_led_no].g, led[active_led_no].b);
 80010b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	3360      	adds	r3, #96	; 0x60
 80010ba:	443b      	add	r3, r7
 80010bc:	f853 0c5c 	ldr.w	r0, [r3, #-92]
 80010c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	3360      	adds	r3, #96	; 0x60
 80010c6:	443b      	add	r3, r7
 80010c8:	f813 1c58 	ldrb.w	r1, [r3, #-88]
 80010cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	3360      	adds	r3, #96	; 0x60
 80010d2:	443b      	add	r3, r7
 80010d4:	f813 2c57 	ldrb.w	r2, [r3, #-87]
 80010d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	3360      	adds	r3, #96	; 0x60
 80010de:	443b      	add	r3, r7
 80010e0:	f813 3c56 	ldrb.w	r3, [r3, #-86]
 80010e4:	f000 fd3c 	bl	8001b60 <ws2812b_set_color>
		  		  ws2812b_update();
 80010e8:	f000 fd2c 	bl	8001b44 <ws2812b_update>
		  		  break;
 80010ec:	e0ac      	b.n	8001248 <main+0x4b0>
		  	  case IR_CODE_MINUS:
		  		  change_brightness(&led[active_led_no], active_color, false);
 80010ee:	1d3a      	adds	r2, r7, #4
 80010f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4413      	add	r3, r2
 80010f6:	2200      	movs	r2, #0
 80010f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fb56 	bl	80007ac <change_brightness>
		  		  ws2812b_set_color(led[active_led_no].no, led[active_led_no].r, led[active_led_no].g, led[active_led_no].b);
 8001100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	3360      	adds	r3, #96	; 0x60
 8001106:	443b      	add	r3, r7
 8001108:	f853 0c5c 	ldr.w	r0, [r3, #-92]
 800110c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	3360      	adds	r3, #96	; 0x60
 8001112:	443b      	add	r3, r7
 8001114:	f813 1c58 	ldrb.w	r1, [r3, #-88]
 8001118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	3360      	adds	r3, #96	; 0x60
 800111e:	443b      	add	r3, r7
 8001120:	f813 2c57 	ldrb.w	r2, [r3, #-87]
 8001124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	3360      	adds	r3, #96	; 0x60
 800112a:	443b      	add	r3, r7
 800112c:	f813 3c56 	ldrb.w	r3, [r3, #-86]
 8001130:	f000 fd16 	bl	8001b60 <ws2812b_set_color>
		  		  ws2812b_update();
 8001134:	f000 fd06 	bl	8001b44 <ws2812b_update>
		  		  break;
 8001138:	e086      	b.n	8001248 <main+0x4b0>
		  	  }
	  }
	  else if (mode == 2)	// tryb sterowania wszystkimi diodami led
 800113a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800113c:	2b02      	cmp	r3, #2
 800113e:	d163      	bne.n	8001208 <main+0x470>
	  {
		  switch (value)
 8001140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001142:	2b19      	cmp	r3, #25
 8001144:	d031      	beq.n	80011aa <main+0x412>
 8001146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001148:	2b40      	cmp	r3, #64	; 0x40
 800114a:	d17d      	bne.n	8001248 <main+0x4b0>
			  {
			  case IR_CODE_PLUS:
				  for (int i=0; i<7; i++)
 800114c:	2300      	movs	r3, #0
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001150:	e025      	b.n	800119e <main+0x406>
				  {
					  change_brightness(&led[i], active_color, true);
 8001152:	1d3a      	adds	r2, r7, #4
 8001154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	2201      	movs	r2, #1
 800115c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fb24 	bl	80007ac <change_brightness>
					  ws2812b_set_color(led[i].no, led[i].r, led[i].g, led[i].b);
 8001164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	3360      	adds	r3, #96	; 0x60
 800116a:	443b      	add	r3, r7
 800116c:	f853 0c5c 	ldr.w	r0, [r3, #-92]
 8001170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	3360      	adds	r3, #96	; 0x60
 8001176:	443b      	add	r3, r7
 8001178:	f813 1c58 	ldrb.w	r1, [r3, #-88]
 800117c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	3360      	adds	r3, #96	; 0x60
 8001182:	443b      	add	r3, r7
 8001184:	f813 2c57 	ldrb.w	r2, [r3, #-87]
 8001188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	3360      	adds	r3, #96	; 0x60
 800118e:	443b      	add	r3, r7
 8001190:	f813 3c56 	ldrb.w	r3, [r3, #-86]
 8001194:	f000 fce4 	bl	8001b60 <ws2812b_set_color>
				  for (int i=0; i<7; i++)
 8001198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800119a:	3301      	adds	r3, #1
 800119c:	64bb      	str	r3, [r7, #72]	; 0x48
 800119e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011a0:	2b06      	cmp	r3, #6
 80011a2:	ddd6      	ble.n	8001152 <main+0x3ba>
				  }
				  ws2812b_update();
 80011a4:	f000 fcce 	bl	8001b44 <ws2812b_update>
				  break;
 80011a8:	e04e      	b.n	8001248 <main+0x4b0>
			  case IR_CODE_MINUS:
				  for (int i=0; i<7; i++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
 80011ae:	e025      	b.n	80011fc <main+0x464>
				  {
					  change_brightness(&led[i], active_color, false);
 80011b0:	1d3a      	adds	r2, r7, #4
 80011b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff faf5 	bl	80007ac <change_brightness>
					  ws2812b_set_color(led[i].no, led[i].r, led[i].g, led[i].b);
 80011c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	3360      	adds	r3, #96	; 0x60
 80011c8:	443b      	add	r3, r7
 80011ca:	f853 0c5c 	ldr.w	r0, [r3, #-92]
 80011ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	3360      	adds	r3, #96	; 0x60
 80011d4:	443b      	add	r3, r7
 80011d6:	f813 1c58 	ldrb.w	r1, [r3, #-88]
 80011da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	3360      	adds	r3, #96	; 0x60
 80011e0:	443b      	add	r3, r7
 80011e2:	f813 2c57 	ldrb.w	r2, [r3, #-87]
 80011e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	3360      	adds	r3, #96	; 0x60
 80011ec:	443b      	add	r3, r7
 80011ee:	f813 3c56 	ldrb.w	r3, [r3, #-86]
 80011f2:	f000 fcb5 	bl	8001b60 <ws2812b_set_color>
				  for (int i=0; i<7; i++)
 80011f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f8:	3301      	adds	r3, #1
 80011fa:	647b      	str	r3, [r7, #68]	; 0x44
 80011fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011fe:	2b06      	cmp	r3, #6
 8001200:	ddd6      	ble.n	80011b0 <main+0x418>
				  }
				  ws2812b_update();
 8001202:	f000 fc9f 	bl	8001b44 <ws2812b_update>
				  break;
 8001206:	e01f      	b.n	8001248 <main+0x4b0>
			  }
	  }
	  else if (mode == 3)				// tryb automatyczny nr 1
 8001208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800120a:	2b03      	cmp	r3, #3
 800120c:	d105      	bne.n	800121a <main+0x482>
	  {
		  if (led[0].power) automatic_mode1();
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d019      	beq.n	8001248 <main+0x4b0>
 8001214:	f7ff fbae 	bl	8000974 <automatic_mode1>
 8001218:	e016      	b.n	8001248 <main+0x4b0>
	  }
	  else if (mode == 4)				// tryb automatyczny nr 2
 800121a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800121c:	2b04      	cmp	r3, #4
 800121e:	d105      	bne.n	800122c <main+0x494>
	  {
		  if (led[0].power) automatic_mode2();
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d010      	beq.n	8001248 <main+0x4b0>
 8001226:	f7ff fc41 	bl	8000aac <automatic_mode2>
 800122a:	e00d      	b.n	8001248 <main+0x4b0>
	  }
	  else if (mode == 5)				// tryb automatyczny nr 3
 800122c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800122e:	2b05      	cmp	r3, #5
 8001230:	d105      	bne.n	800123e <main+0x4a6>
	  {
		  if (led[0].power) automatic_mode3();
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d007      	beq.n	8001248 <main+0x4b0>
 8001238:	f7ff fc76 	bl	8000b28 <automatic_mode3>
 800123c:	e004      	b.n	8001248 <main+0x4b0>
	  }
	  else								// tryb automatyczny nr 4
	  {
		  if (led[0].power) automatic_mode4();
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <main+0x4b0>
 8001244:	f7ff fd22 	bl	8000c8c <automatic_mode4>
	  }

	  // pomoc przy debugowaniu - wysylanie na UART
	  if (HAL_GetTick() - last_time > 1000)
 8001248:	f000 fd52 	bl	8001cf0 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001256:	f67f adc1 	bls.w	8000ddc <main+0x44>
	  {
		  printf("Aktywna dioda: %lu, aktywny kolor: %d\n", active_led_no, active_color);
 800125a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800125c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800125e:	4816      	ldr	r0, [pc, #88]	; (80012b8 <main+0x520>)
 8001260:	f005 fb7c 	bl	800695c <iprintf>
		  for (int i=0; i<7; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
 8001268:	e01c      	b.n	80012a4 <main+0x50c>
		  {
			  printf("LED %d\tR: %d\tG: %d\tB: %d\t\n", i, led[i].r, led[i].g, led[i].b);
 800126a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	3360      	adds	r3, #96	; 0x60
 8001270:	443b      	add	r3, r7
 8001272:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001276:	461a      	mov	r2, r3
 8001278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	3360      	adds	r3, #96	; 0x60
 800127e:	443b      	add	r3, r7
 8001280:	f813 3c57 	ldrb.w	r3, [r3, #-87]
 8001284:	4619      	mov	r1, r3
 8001286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	3360      	adds	r3, #96	; 0x60
 800128c:	443b      	add	r3, r7
 800128e:	f813 3c56 	ldrb.w	r3, [r3, #-86]
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	460b      	mov	r3, r1
 8001296:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <main+0x524>)
 800129a:	f005 fb5f 	bl	800695c <iprintf>
		  for (int i=0; i<7; i++)
 800129e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012a0:	3301      	adds	r3, #1
 80012a2:	643b      	str	r3, [r7, #64]	; 0x40
 80012a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	dddf      	ble.n	800126a <main+0x4d2>
		  }
		  printf("\n");
 80012aa:	200a      	movs	r0, #10
 80012ac:	f005 fb6e 	bl	800698c <putchar>
		  last_time = HAL_GetTick();
 80012b0:	f000 fd1e 	bl	8001cf0 <HAL_GetTick>
 80012b4:	65f8      	str	r0, [r7, #92]	; 0x5c
  {
 80012b6:	e591      	b.n	8000ddc <main+0x44>
 80012b8:	08007ad0 	.word	0x08007ad0
 80012bc:	08007af8 	.word	0x08007af8

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b096      	sub	sp, #88	; 0x58
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2244      	movs	r2, #68	; 0x44
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f005 fb3c 	bl	800694c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012e6:	f001 f9f5 	bl	80026d4 <HAL_PWREx_ControlVoltageScaling>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012f0:	f000 f838 	bl	8001364 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012f4:	2310      	movs	r3, #16
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001300:	2360      	movs	r3, #96	; 0x60
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001304:	2302      	movs	r3, #2
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001308:	2301      	movs	r3, #1
 800130a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001310:	2328      	movs	r3, #40	; 0x28
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001314:	2307      	movs	r3, #7
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fa2b 	bl	8002780 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001330:	f000 f818 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001338:	2303      	movs	r3, #3
 800133a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	2104      	movs	r1, #4
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fdf3 	bl	8002f38 <HAL_RCC_ClockConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001358:	f000 f804 	bl	8001364 <Error_Handler>
  }
}
 800135c:	bf00      	nop
 800135e:	3758      	adds	r7, #88	; 0x58
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	e7fe      	b.n	800136c <Error_Handler+0x8>
	...

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x44>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_MspInit+0x44>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6613      	str	r3, [r2, #96]	; 0x60
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x44>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_MspInit+0x44>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_MspInit+0x44>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6593      	str	r3, [r2, #88]	; 0x58
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_MspInit+0x44>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 fc60 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA1_Channel6_IRQHandler+0x10>)
 8001412:	f000 fec7 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000184 	.word	0x20000184

08001420 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <TIM2_IRQHandler+0x10>)
 8001426:	f003 f955 	bl	80046d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200000ec 	.word	0x200000ec

08001434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return 1;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_kill>:

int _kill(int pid, int sig)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800144e:	f005 fa53 	bl	80068f8 <__errno>
 8001452:	4603      	mov	r3, r0
 8001454:	2216      	movs	r2, #22
 8001456:	601a      	str	r2, [r3, #0]
  return -1;
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_exit>:

void _exit (int status)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ffe7 	bl	8001444 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001476:	e7fe      	b.n	8001476 <_exit+0x12>

08001478 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	e00a      	b.n	80014a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800148a:	f3af 8000 	nop.w
 800148e:	4601      	mov	r1, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	60ba      	str	r2, [r7, #8]
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbf0      	blt.n	800148a <_read+0x12>
  }

  return len;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e009      	b.n	80014d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	60ba      	str	r2, [r7, #8]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f93b 	bl	8000748 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf1      	blt.n	80014c4 <_write+0x12>
  }
  return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_close>:

int _close(int file)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001512:	605a      	str	r2, [r3, #4]
  return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_isatty>:

int _isatty(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f005 f9b8 	bl	80068f8 <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20018000 	.word	0x20018000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	200000e8 	.word	0x200000e8
 80015bc:	20000338 	.word	0x20000338

080015c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b090      	sub	sp, #64	; 0x40
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001620:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <MX_TIM2_Init+0x114>)
 8001622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001626:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001628:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <MX_TIM2_Init+0x114>)
 800162a:	224f      	movs	r2, #79	; 0x4f
 800162c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <MX_TIM2_Init+0x114>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001634:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <MX_TIM2_Init+0x114>)
 8001636:	f04f 32ff 	mov.w	r2, #4294967295
 800163a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <MX_TIM2_Init+0x114>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <MX_TIM2_Init+0x114>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001648:	482b      	ldr	r0, [pc, #172]	; (80016f8 <MX_TIM2_Init+0x114>)
 800164a:	f002 fb55 	bl	8003cf8 <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001654:	f7ff fe86 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800165e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001662:	4619      	mov	r1, r3
 8001664:	4824      	ldr	r0, [pc, #144]	; (80016f8 <MX_TIM2_Init+0x114>)
 8001666:	f003 fb05 	bl	8004c74 <HAL_TIM_ConfigClockSource>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001670:	f7ff fe78 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001674:	4820      	ldr	r0, [pc, #128]	; (80016f8 <MX_TIM2_Init+0x114>)
 8001676:	f002 fe81 	bl	800437c <HAL_TIM_IC_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001680:	f7ff fe70 	bl	8001364 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001684:	2304      	movs	r3, #4
 8001686:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001688:	2340      	movs	r3, #64	; 0x40
 800168a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4817      	ldr	r0, [pc, #92]	; (80016f8 <MX_TIM2_Init+0x114>)
 800169c:	f003 fbb3 	bl	8004e06 <HAL_TIM_SlaveConfigSynchro>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80016a6:	f7ff fe5d 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4619      	mov	r1, r3
 80016b8:	480f      	ldr	r0, [pc, #60]	; (80016f8 <MX_TIM2_Init+0x114>)
 80016ba:	f004 fb2d 	bl	8005d18 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80016c4:	f7ff fe4e 	bl	8001364 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80016c8:	2302      	movs	r3, #2
 80016ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016cc:	2301      	movs	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <MX_TIM2_Init+0x114>)
 80016e0:	f003 f917 	bl	8004912 <HAL_TIM_IC_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80016ea:	f7ff fe3b 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	3740      	adds	r7, #64	; 0x40
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200000ec 	.word	0x200000ec

080016fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171c:	463b      	mov	r3, r7
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	615a      	str	r2, [r3, #20]
 800172c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800172e:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001730:	4a2c      	ldr	r2, [pc, #176]	; (80017e4 <MX_TIM3_Init+0xe8>)
 8001732:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MX_TIM3_Init+0xe4>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001742:	2263      	movs	r2, #99	; 0x63
 8001744:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <MX_TIM3_Init+0xe4>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001752:	4823      	ldr	r0, [pc, #140]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001754:	f002 fad0 	bl	8003cf8 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800175e:	f7ff fe01 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176c:	4619      	mov	r1, r3
 800176e:	481c      	ldr	r0, [pc, #112]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001770:	f003 fa80 	bl	8004c74 <HAL_TIM_ConfigClockSource>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800177a:	f7ff fdf3 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800177e:	4818      	ldr	r0, [pc, #96]	; (80017e0 <MX_TIM3_Init+0xe4>)
 8001780:	f002 fb7a 	bl	8003e78 <HAL_TIM_PWM_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800178a:	f7ff fdeb 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <MX_TIM3_Init+0xe4>)
 800179e:	f004 fabb 	bl	8005d18 <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017a8:	f7ff fddc 	bl	8001364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ac:	2360      	movs	r3, #96	; 0x60
 80017ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <MX_TIM3_Init+0xe4>)
 80017c4:	f003 f942 	bl	8004a4c <HAL_TIM_PWM_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80017ce:	f7ff fdc9 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017d2:	4803      	ldr	r0, [pc, #12]	; (80017e0 <MX_TIM3_Init+0xe4>)
 80017d4:	f000 f898 	bl	8001908 <HAL_TIM_MspPostInit>

}
 80017d8:	bf00      	nop
 80017da:	3738      	adds	r7, #56	; 0x38
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000138 	.word	0x20000138
 80017e4:	40000400 	.word	0x40000400

080017e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001808:	d131      	bne.n	800186e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180a:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_TIM_Base_MspInit+0x110>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a3a      	ldr	r2, [pc, #232]	; (80018f8 <HAL_TIM_Base_MspInit+0x110>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_TIM_Base_MspInit+0x110>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <HAL_TIM_Base_MspInit+0x110>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	4a34      	ldr	r2, [pc, #208]	; (80018f8 <HAL_TIM_Base_MspInit+0x110>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <HAL_TIM_Base_MspInit+0x110>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800183a:	2301      	movs	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800184a:	2301      	movs	r3, #1
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f000 fd84 	bl	8002364 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	210a      	movs	r1, #10
 8001860:	201c      	movs	r0, #28
 8001862:	f000 fb50 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001866:	201c      	movs	r0, #28
 8001868:	f000 fb69 	bl	8001f3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800186c:	e040      	b.n	80018f0 <HAL_TIM_Base_MspInit+0x108>
  else if(tim_baseHandle->Instance==TIM3)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a22      	ldr	r2, [pc, #136]	; (80018fc <HAL_TIM_Base_MspInit+0x114>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d13b      	bne.n	80018f0 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <HAL_TIM_Base_MspInit+0x110>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_TIM_Base_MspInit+0x110>)
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	6593      	str	r3, [r2, #88]	; 0x58
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_TIM_Base_MspInit+0x110>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 8001892:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <HAL_TIM_Base_MspInit+0x11c>)
 8001894:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 8001898:	2205      	movs	r2, #5
 800189a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 800189e:	2210      	movs	r2, #16
 80018a0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80018c8:	480d      	ldr	r0, [pc, #52]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018ca:	f000 fb53 	bl	8001f74 <HAL_DMA_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_TIM_Base_MspInit+0xf0>
      Error_Handler();
 80018d4:	f7ff fd46 	bl	8001364 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018e8:	639a      	str	r2, [r3, #56]	; 0x38
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <HAL_TIM_Base_MspInit+0x118>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6293      	str	r3, [r2, #40]	; 0x28
}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	; 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40000400 	.word	0x40000400
 8001900:	20000184 	.word	0x20000184
 8001904:	4002006c 	.word	0x4002006c

08001908 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a11      	ldr	r2, [pc, #68]	; (800196c <HAL_TIM_MspPostInit+0x64>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d11c      	bne.n	8001964 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_TIM_MspPostInit+0x68>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a10      	ldr	r2, [pc, #64]	; (8001970 <HAL_TIM_MspPostInit+0x68>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_TIM_MspPostInit+0x68>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001942:	2340      	movs	r3, #64	; 0x40
 8001944:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001952:	2302      	movs	r3, #2
 8001954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 030c 	add.w	r3, r7, #12
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001960:	f000 fd00 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40000400 	.word	0x40000400
 8001970:	40021000 	.word	0x40021000

08001974 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <MX_USART2_UART_Init+0x5c>)
 800197c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019b8:	f004 fa54 	bl	8005e64 <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019c2:	f7ff fccf 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200001cc 	.word	0x200001cc
 80019d0:	40004400 	.word	0x40004400

080019d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b0ac      	sub	sp, #176	; 0xb0
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2288      	movs	r2, #136	; 0x88
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 ffa9 	bl	800694c <memset>
  if(uartHandle->Instance==USART2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <HAL_UART_MspInit+0xb0>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d13b      	bne.n	8001a7c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fcb5 	bl	8003380 <HAL_RCCEx_PeriphCLKConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a1c:	f7ff fca2 	bl	8001364 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_UART_MspInit+0xb4>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <HAL_UART_MspInit+0xb4>)
 8001a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_UART_MspInit+0xb4>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <HAL_UART_MspInit+0xb4>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <HAL_UART_MspInit+0xb4>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_UART_MspInit+0xb4>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a50:	230c      	movs	r3, #12
 8001a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a78:	f000 fc74 	bl	8002364 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	37b0      	adds	r7, #176	; 0xb0
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40004400 	.word	0x40004400
 8001a88:	40021000 	.word	0x40021000

08001a8c <set_byte>:
#define LED_N		7

static uint8_t led_buffer[RESET_LEN + 24*LED_N + 1];

static void set_byte(uint32_t pos, uint8_t value)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
	for (int i=0; i<8; i++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e016      	b.n	8001acc <set_byte+0x40>
	{
		if (value & 0x80)
 8001a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	da06      	bge.n	8001ab4 <set_byte+0x28>
			led_buffer[pos + i] = BIT_1_TIME;
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <set_byte+0x54>)
 8001aae:	2140      	movs	r1, #64	; 0x40
 8001ab0:	54d1      	strb	r1, [r2, r3]
 8001ab2:	e005      	b.n	8001ac0 <set_byte+0x34>
		else
			led_buffer[pos + i] = BIT_0_TIME;
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <set_byte+0x54>)
 8001abc:	2120      	movs	r1, #32
 8001abe:	54d1      	strb	r1, [r2, r3]

		value <<= 1;
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	70fb      	strb	r3, [r7, #3]
	for (int i=0; i<8; i++)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b07      	cmp	r3, #7
 8001ad0:	dde5      	ble.n	8001a9e <set_byte+0x12>
	}
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	20000250 	.word	0x20000250

08001ae4 <ws2812b_init>:

void ws2812b_init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
	for (int i=0; i<RESET_LEN; i++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	e007      	b.n	8001b00 <ws2812b_init+0x1c>
		led_buffer[i] = 0;
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <ws2812b_init+0x58>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<RESET_LEN; i++)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3301      	adds	r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b27      	cmp	r3, #39	; 0x27
 8001b04:	ddf4      	ble.n	8001af0 <ws2812b_init+0xc>

	for (int i=0; i<24*LED_N; i++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	e007      	b.n	8001b1c <ws2812b_init+0x38>
		led_buffer[RESET_LEN + i] = BIT_0_TIME;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3328      	adds	r3, #40	; 0x28
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <ws2812b_init+0x58>)
 8001b12:	2120      	movs	r1, #32
 8001b14:	54d1      	strb	r1, [r2, r3]
	for (int i=0; i<24*LED_N; i++)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2ba7      	cmp	r3, #167	; 0xa7
 8001b20:	ddf4      	ble.n	8001b0c <ws2812b_init+0x28>

	led_buffer[RESET_LEN + 24*LED_N] = 0;
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <ws2812b_init+0x58>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0

	HAL_TIM_Base_Start(&htim3);
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <ws2812b_init+0x5c>)
 8001b2c:	f002 f93c 	bl	8003da8 <HAL_TIM_Base_Start>
	ws2812b_update();
 8001b30:	f000 f808 	bl	8001b44 <ws2812b_update>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000250 	.word	0x20000250
 8001b40:	20000138 	.word	0x20000138

08001b44 <ws2812b_update>:

void ws2812b_update(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (const uint32_t*)&led_buffer, sizeof(led_buffer));
 8001b48:	23d1      	movs	r3, #209	; 0xd1
 8001b4a:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <ws2812b_update+0x14>)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4803      	ldr	r0, [pc, #12]	; (8001b5c <ws2812b_update+0x18>)
 8001b50:	f002 f9f4 	bl	8003f3c <HAL_TIM_PWM_Start_DMA>
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000250 	.word	0x20000250
 8001b5c:	20000138 	.word	0x20000138

08001b60 <ws2812b_set_color>:
{
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY) {}
}

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	4608      	mov	r0, r1
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	70fb      	strb	r3, [r7, #3]
 8001b72:	460b      	mov	r3, r1
 8001b74:	70bb      	strb	r3, [r7, #2]
 8001b76:	4613      	mov	r3, r2
 8001b78:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d820      	bhi.n	8001bc2 <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	3328      	adds	r3, #40	; 0x28
 8001b8c:	78ba      	ldrb	r2, [r7, #2]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff7b 	bl	8001a8c <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	3330      	adds	r3, #48	; 0x30
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff70 	bl	8001a8c <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	3338      	adds	r3, #56	; 0x38
 8001bb8:	787a      	ldrb	r2, [r7, #1]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff65 	bl	8001a8c <set_byte>
	}
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd0:	f7ff fcf6 	bl	80015c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bd6:	490d      	ldr	r1, [pc, #52]	; (8001c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <LoopForever+0xe>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bec:	4c0a      	ldr	r4, [pc, #40]	; (8001c18 <LoopForever+0x16>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f004 fe83 	bl	8006904 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bfe:	f7ff f8cb 	bl	8000d98 <main>

08001c02 <LoopForever>:

LoopForever:
    b LoopForever
 8001c02:	e7fe      	b.n	8001c02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001c10:	08007db4 	.word	0x08007db4
  ldr r2, =_sbss
 8001c14:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001c18:	20000338 	.word	0x20000338

08001c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC1_2_IRQHandler>

08001c1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f961 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f000 f80e 	bl	8001c50 <HAL_InitTick>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	71fb      	strb	r3, [r7, #7]
 8001c3e:	e001      	b.n	8001c44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c40:	f7ff fb96 	bl	8001370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c44:	79fb      	ldrb	r3, [r7, #7]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_InitTick+0x6c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d023      	beq.n	8001cac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_InitTick+0x70>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_InitTick+0x6c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f96d 	bl	8001f5a <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10f      	bne.n	8001ca6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d809      	bhi.n	8001ca0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f000 f937 	bl	8001f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_InitTick+0x74>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e007      	b.n	8001cb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e004      	b.n	8001cb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	e001      	b.n	8001cb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000028 	.word	0x20000028
 8001cc0:	20000020 	.word	0x20000020
 8001cc4:	20000024 	.word	0x20000024

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000028 	.word	0x20000028
 8001cec:	20000324 	.word	0x20000324

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000324 	.word	0x20000324

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000028 	.word	0x20000028

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff29 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff3e 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff8e 	bl	8001e44 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff31 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e098      	b.n	80020b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <HAL_DMA_Init+0x150>)
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d80f      	bhi.n	8001fb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <HAL_DMA_Init+0x154>)
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a4b      	ldr	r2, [pc, #300]	; (80020cc <HAL_DMA_Init+0x158>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	009a      	lsls	r2, r3, #2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a48      	ldr	r2, [pc, #288]	; (80020d0 <HAL_DMA_Init+0x15c>)
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
 8001fb0:	e00e      	b.n	8001fd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <HAL_DMA_Init+0x160>)
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a43      	ldr	r2, [pc, #268]	; (80020cc <HAL_DMA_Init+0x158>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	009a      	lsls	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a42      	ldr	r2, [pc, #264]	; (80020d8 <HAL_DMA_Init+0x164>)
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800202a:	d039      	beq.n	80020a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <HAL_DMA_Init+0x15c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d11a      	bne.n	800206c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002036:	4b29      	ldr	r3, [pc, #164]	; (80020dc <HAL_DMA_Init+0x168>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f003 031c 	and.w	r3, r3, #28
 8002042:	210f      	movs	r1, #15
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	4924      	ldr	r1, [pc, #144]	; (80020dc <HAL_DMA_Init+0x168>)
 800204c:	4013      	ands	r3, r2
 800204e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002050:	4b22      	ldr	r3, [pc, #136]	; (80020dc <HAL_DMA_Init+0x168>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205c:	f003 031c 	and.w	r3, r3, #28
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	491d      	ldr	r1, [pc, #116]	; (80020dc <HAL_DMA_Init+0x168>)
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]
 800206a:	e019      	b.n	80020a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_DMA_Init+0x16c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f003 031c 	and.w	r3, r3, #28
 8002078:	210f      	movs	r1, #15
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	4917      	ldr	r1, [pc, #92]	; (80020e0 <HAL_DMA_Init+0x16c>)
 8002082:	4013      	ands	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002086:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_DMA_Init+0x16c>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6859      	ldr	r1, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f003 031c 	and.w	r3, r3, #28
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	4911      	ldr	r1, [pc, #68]	; (80020e0 <HAL_DMA_Init+0x16c>)
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	40020407 	.word	0x40020407
 80020c8:	bffdfff8 	.word	0xbffdfff8
 80020cc:	cccccccd 	.word	0xcccccccd
 80020d0:	40020000 	.word	0x40020000
 80020d4:	bffdfbf8 	.word	0xbffdfbf8
 80020d8:	40020400 	.word	0x40020400
 80020dc:	400200a8 	.word	0x400200a8
 80020e0:	400204a8 	.word	0x400204a8

080020e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_DMA_Start_IT+0x20>
 8002100:	2302      	movs	r3, #2
 8002102:	e04b      	b.n	800219c <HAL_DMA_Start_IT+0xb8>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d13a      	bne.n	800218e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f8e0 	bl	8002302 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 020e 	orr.w	r2, r2, #14
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e00f      	b.n	800217c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0204 	bic.w	r2, r2, #4
 800216a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 020a 	orr.w	r2, r2, #10
 800217a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e005      	b.n	800219a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002196:	2302      	movs	r3, #2
 8002198:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800219a:	7dfb      	ldrb	r3, [r7, #23]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	f003 031c 	and.w	r3, r3, #28
 80021c4:	2204      	movs	r2, #4
 80021c6:	409a      	lsls	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d026      	beq.n	800221e <HAL_DMA_IRQHandler+0x7a>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d021      	beq.n	800221e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d107      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0204 	bic.w	r2, r2, #4
 80021f6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	f003 021c 	and.w	r2, r3, #28
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	2104      	movs	r1, #4
 8002206:	fa01 f202 	lsl.w	r2, r1, r2
 800220a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	2b00      	cmp	r3, #0
 8002212:	d071      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800221c:	e06c      	b.n	80022f8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f003 031c 	and.w	r3, r3, #28
 8002226:	2202      	movs	r2, #2
 8002228:	409a      	lsls	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d02e      	beq.n	8002290 <HAL_DMA_IRQHandler+0xec>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d029      	beq.n	8002290 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10b      	bne.n	8002262 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 020a 	bic.w	r2, r2, #10
 8002258:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f003 021c 	and.w	r2, r3, #28
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	2102      	movs	r1, #2
 8002270:	fa01 f202 	lsl.w	r2, r1, r2
 8002274:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	2b00      	cmp	r3, #0
 8002284:	d038      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800228e:	e033      	b.n	80022f8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f003 031c 	and.w	r3, r3, #28
 8002298:	2208      	movs	r2, #8
 800229a:	409a      	lsls	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d02a      	beq.n	80022fa <HAL_DMA_IRQHandler+0x156>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d025      	beq.n	80022fa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 020e 	bic.w	r2, r2, #14
 80022bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f003 021c 	and.w	r2, r3, #28
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2101      	movs	r1, #1
 80022cc:	fa01 f202 	lsl.w	r2, r1, r2
 80022d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d004      	beq.n	80022fa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
}
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f003 021c 	and.w	r2, r3, #28
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f202 	lsl.w	r2, r1, r2
 8002322:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b10      	cmp	r3, #16
 8002332:	d108      	bne.n	8002346 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002344:	e007      	b.n	8002356 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	60da      	str	r2, [r3, #12]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e17f      	b.n	8002674 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8171 	beq.w	800266e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d005      	beq.n	80023a4 <HAL_GPIO_Init+0x40>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d130      	bne.n	8002406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023da:	2201      	movs	r2, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 0201 	and.w	r2, r3, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b03      	cmp	r3, #3
 8002410:	d118      	bne.n	8002444 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002418:	2201      	movs	r2, #1
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	08db      	lsrs	r3, r3, #3
 800242e:	f003 0201 	and.w	r2, r3, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b03      	cmp	r3, #3
 800244e:	d017      	beq.n	8002480 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d123      	bne.n	80024d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	6939      	ldr	r1, [r7, #16]
 80024d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80ac 	beq.w	800266e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_GPIO_Init+0x330>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	4a5e      	ldr	r2, [pc, #376]	; (8002694 <HAL_GPIO_Init+0x330>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6613      	str	r3, [r2, #96]	; 0x60
 8002522:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <HAL_GPIO_Init+0x330>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800252e:	4a5a      	ldr	r2, [pc, #360]	; (8002698 <HAL_GPIO_Init+0x334>)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	3302      	adds	r3, #2
 8002536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	220f      	movs	r2, #15
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002558:	d025      	beq.n	80025a6 <HAL_GPIO_Init+0x242>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4f      	ldr	r2, [pc, #316]	; (800269c <HAL_GPIO_Init+0x338>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01f      	beq.n	80025a2 <HAL_GPIO_Init+0x23e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4e      	ldr	r2, [pc, #312]	; (80026a0 <HAL_GPIO_Init+0x33c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d019      	beq.n	800259e <HAL_GPIO_Init+0x23a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4d      	ldr	r2, [pc, #308]	; (80026a4 <HAL_GPIO_Init+0x340>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0x236>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4c      	ldr	r2, [pc, #304]	; (80026a8 <HAL_GPIO_Init+0x344>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00d      	beq.n	8002596 <HAL_GPIO_Init+0x232>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4b      	ldr	r2, [pc, #300]	; (80026ac <HAL_GPIO_Init+0x348>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x22e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4a      	ldr	r2, [pc, #296]	; (80026b0 <HAL_GPIO_Init+0x34c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_GPIO_Init+0x22a>
 800258a:	2306      	movs	r3, #6
 800258c:	e00c      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800258e:	2307      	movs	r3, #7
 8002590:	e00a      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 8002592:	2305      	movs	r3, #5
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 8002596:	2304      	movs	r3, #4
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 80025a6:	2300      	movs	r3, #0
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025b8:	4937      	ldr	r1, [pc, #220]	; (8002698 <HAL_GPIO_Init+0x334>)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_GPIO_Init+0x350>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ea:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <HAL_GPIO_Init+0x350>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_GPIO_Init+0x350>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002614:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <HAL_GPIO_Init+0x350>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800261a:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <HAL_GPIO_Init+0x350>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800263e:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_GPIO_Init+0x350>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_GPIO_Init+0x350>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002668:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_GPIO_Init+0x350>)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	f47f ae78 	bne.w	8002374 <HAL_GPIO_Init+0x10>
  }
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000
 800269c:	48000400 	.word	0x48000400
 80026a0:	48000800 	.word	0x48000800
 80026a4:	48000c00 	.word	0x48000c00
 80026a8:	48001000 	.word	0x48001000
 80026ac:	48001400 	.word	0x48001400
 80026b0:	48001800 	.word	0x48001800
 80026b4:	40010400 	.word	0x40010400

080026b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40007000 	.word	0x40007000

080026d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e2:	d130      	bne.n	8002746 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f0:	d038      	beq.n	8002764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026fa:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002700:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2232      	movs	r2, #50	; 0x32
 8002708:	fb02 f303 	mul.w	r3, r2, r3
 800270c:	4a1b      	ldr	r2, [pc, #108]	; (800277c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0c9b      	lsrs	r3, r3, #18
 8002714:	3301      	adds	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002718:	e002      	b.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3b01      	subs	r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272c:	d102      	bne.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x60>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f2      	bne.n	800271a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002740:	d110      	bne.n	8002764 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e00f      	b.n	8002766 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800274e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002752:	d007      	beq.n	8002764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800275c:	4a05      	ldr	r2, [pc, #20]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002762:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40007000 	.word	0x40007000
 8002778:	20000020 	.word	0x20000020
 800277c:	431bde83 	.word	0x431bde83

08002780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e3ca      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002792:	4b97      	ldr	r3, [pc, #604]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800279c:	4b94      	ldr	r3, [pc, #592]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80e4 	beq.w	800297c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_RCC_OscConfig+0x4a>
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	f040 808b 	bne.w	80028d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f040 8087 	bne.w	80028d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x62>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e3a2      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1a      	ldr	r2, [r3, #32]
 80027e6:	4b82      	ldr	r3, [pc, #520]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_RCC_OscConfig+0x7c>
 80027f2:	4b7f      	ldr	r3, [pc, #508]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fa:	e005      	b.n	8002808 <HAL_RCC_OscConfig+0x88>
 80027fc:	4b7c      	ldr	r3, [pc, #496]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80027fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002808:	4293      	cmp	r3, r2
 800280a:	d223      	bcs.n	8002854 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fd55 	bl	80032c0 <RCC_SetFlashLatencyFromMSIRange>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e383      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002820:	4b73      	ldr	r3, [pc, #460]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a72      	ldr	r2, [pc, #456]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002826:	f043 0308 	orr.w	r3, r3, #8
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b70      	ldr	r3, [pc, #448]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	496d      	ldr	r1, [pc, #436]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800283e:	4b6c      	ldr	r3, [pc, #432]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	4968      	ldr	r1, [pc, #416]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
 8002852:	e025      	b.n	80028a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002854:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a65      	ldr	r2, [pc, #404]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4960      	ldr	r1, [pc, #384]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002872:	4b5f      	ldr	r3, [pc, #380]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	495b      	ldr	r1, [pc, #364]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fd15 	bl	80032c0 <RCC_SetFlashLatencyFromMSIRange>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e343      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028a0:	f000 fc4a 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b52      	ldr	r3, [pc, #328]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	4950      	ldr	r1, [pc, #320]	; (80029f4 <HAL_RCC_OscConfig+0x274>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	4a4e      	ldr	r2, [pc, #312]	; (80029f8 <HAL_RCC_OscConfig+0x278>)
 80028be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028c0:	4b4e      	ldr	r3, [pc, #312]	; (80029fc <HAL_RCC_OscConfig+0x27c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff f9c3 	bl	8001c50 <HAL_InitTick>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d052      	beq.n	800297a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	e327      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d032      	beq.n	8002946 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028e0:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028ec:	f7ff fa00 	bl	8001cf0 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f4:	f7ff f9fc 	bl	8001cf0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e310      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002906:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002912:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a36      	ldr	r2, [pc, #216]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4931      	ldr	r1, [pc, #196]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002930:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	492c      	ldr	r1, [pc, #176]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
 8002944:	e01a      	b.n	800297c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002946:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002952:	f7ff f9cd 	bl	8001cf0 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800295a:	f7ff f9c9 	bl	8001cf0 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e2dd      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800296c:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x1da>
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800297a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d074      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b08      	cmp	r3, #8
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x21a>
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	d10e      	bne.n	80029b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d10b      	bne.n	80029b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d064      	beq.n	8002a70 <HAL_RCC_OscConfig+0x2f0>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d160      	bne.n	8002a70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e2ba      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x24a>
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0b      	ldr	r2, [pc, #44]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	e026      	b.n	8002a18 <HAL_RCC_OscConfig+0x298>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d2:	d115      	bne.n	8002a00 <HAL_RCC_OscConfig+0x280>
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a02      	ldr	r2, [pc, #8]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	e014      	b.n	8002a18 <HAL_RCC_OscConfig+0x298>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08007c14 	.word	0x08007c14
 80029f8:	20000020 	.word	0x20000020
 80029fc:	20000024 	.word	0x20000024
 8002a00:	4ba0      	ldr	r3, [pc, #640]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a9f      	ldr	r2, [pc, #636]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b9d      	ldr	r3, [pc, #628]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a9c      	ldr	r2, [pc, #624]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7ff f966 	bl	8001cf0 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7ff f962 	bl	8001cf0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e276      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3a:	4b92      	ldr	r3, [pc, #584]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x2a8>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7ff f952 	bl	8001cf0 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a50:	f7ff f94e 	bl	8001cf0 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e262      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a62:	4b88      	ldr	r3, [pc, #544]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2d0>
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d060      	beq.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_OscConfig+0x310>
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d119      	bne.n	8002abe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d116      	bne.n	8002abe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a90:	4b7c      	ldr	r3, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x328>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e23f      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa8:	4b76      	ldr	r3, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	4973      	ldr	r1, [pc, #460]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002abc:	e040      	b.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d023      	beq.n	8002b0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac6:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7ff f90d 	bl	8001cf0 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ada:	f7ff f909 	bl	8001cf0 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e21d      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aec:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	4b62      	ldr	r3, [pc, #392]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	495f      	ldr	r1, [pc, #380]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
 8002b0c:	e018      	b.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0e:	4b5d      	ldr	r3, [pc, #372]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a5c      	ldr	r2, [pc, #368]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7ff f8e9 	bl	8001cf0 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7ff f8e5 	bl	8001cf0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1f9      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d03c      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01c      	beq.n	8002b8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b54:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5a:	4a4a      	ldr	r2, [pc, #296]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7ff f8c4 	bl	8001cf0 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7ff f8c0 	bl	8001cf0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1d4      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ef      	beq.n	8002b6c <HAL_RCC_OscConfig+0x3ec>
 8002b8c:	e01b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b94:	4a3b      	ldr	r2, [pc, #236]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7ff f8a7 	bl	8001cf0 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7ff f8a3 	bl	8001cf0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1b7      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb8:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ef      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80a6 	beq.w	8002d20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bd8:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10d      	bne.n	8002c00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf0:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_RCC_OscConfig+0x508>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d118      	bne.n	8002c3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_RCC_OscConfig+0x508>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_RCC_OscConfig+0x508>)
 8002c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c18:	f7ff f86a 	bl	8001cf0 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c20:	f7ff f866 	bl	8001cf0 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e17a      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_RCC_OscConfig+0x508>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4d8>
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c56:	e029      	b.n	8002cac <HAL_RCC_OscConfig+0x52c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d115      	bne.n	8002c8c <HAL_RCC_OscConfig+0x50c>
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	4a03      	ldr	r2, [pc, #12]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c80:	e014      	b.n	8002cac <HAL_RCC_OscConfig+0x52c>
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	4b9c      	ldr	r3, [pc, #624]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a9b      	ldr	r2, [pc, #620]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9c:	4b98      	ldr	r3, [pc, #608]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	4a97      	ldr	r2, [pc, #604]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d016      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7ff f81c 	bl	8001cf0 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7ff f818 	bl	8001cf0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e12a      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd2:	4b8b      	ldr	r3, [pc, #556]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ed      	beq.n	8002cbc <HAL_RCC_OscConfig+0x53c>
 8002ce0:	e015      	b.n	8002d0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7ff f805 	bl	8001cf0 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7ff f801 	bl	8001cf0 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e113      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d00:	4b7f      	ldr	r3, [pc, #508]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ed      	bne.n	8002cea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d0e:	7ffb      	ldrb	r3, [r7, #31]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d105      	bne.n	8002d20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d14:	4b7a      	ldr	r3, [pc, #488]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	4a79      	ldr	r2, [pc, #484]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80fe 	beq.w	8002f26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	f040 80d0 	bne.w	8002ed4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d34:	4b72      	ldr	r3, [pc, #456]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0203 	and.w	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d130      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	3b01      	subs	r3, #1
 8002d54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d127      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d11f      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d74:	2a07      	cmp	r2, #7
 8002d76:	bf14      	ite	ne
 8002d78:	2201      	movne	r2, #1
 8002d7a:	2200      	moveq	r2, #0
 8002d7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d113      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	3b01      	subs	r3, #1
 8002da4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d06e      	beq.n	8002e88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d069      	beq.n	8002e84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002db0:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0ad      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a4b      	ldr	r2, [pc, #300]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dd8:	f7fe ff8a 	bl	8001cf0 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe ff86 	bl	8001cf0 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e09a      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df2:	4b43      	ldr	r3, [pc, #268]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfe:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	4b40      	ldr	r3, [pc, #256]	; (8002f04 <HAL_RCC_OscConfig+0x784>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e0e:	3a01      	subs	r2, #1
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e18:	0212      	lsls	r2, r2, #8
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e20:	0852      	lsrs	r2, r2, #1
 8002e22:	3a01      	subs	r2, #1
 8002e24:	0552      	lsls	r2, r2, #21
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e2c:	0852      	lsrs	r2, r2, #1
 8002e2e:	3a01      	subs	r2, #1
 8002e30:	0652      	lsls	r2, r2, #25
 8002e32:	4311      	orrs	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e38:	0912      	lsrs	r2, r2, #4
 8002e3a:	0452      	lsls	r2, r2, #17
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	4930      	ldr	r1, [pc, #192]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e44:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2d      	ldr	r2, [pc, #180]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e50:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e5c:	f7fe ff48 	bl	8001cf0 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe ff44 	bl	8001cf0 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e058      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e82:	e050      	b.n	8002f26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e04f      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d148      	bne.n	8002f26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eac:	f7fe ff20 	bl	8001cf0 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe ff1c 	bl	8001cf0 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e030      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x734>
 8002ed2:	e028      	b.n	8002f26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d023      	beq.n	8002f22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002ee0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe ff03 	bl	8001cf0 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eec:	e00c      	b.n	8002f08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe feff 	bl	8001cf0 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d905      	bls.n	8002f08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e013      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_OscConfig+0x7b0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ec      	bne.n	8002eee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_OscConfig+0x7b0>)
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	4905      	ldr	r1, [pc, #20]	; (8002f30 <HAL_RCC_OscConfig+0x7b0>)
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x7b4>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60cb      	str	r3, [r1, #12]
 8002f20:	e001      	b.n	8002f26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	feeefffc 	.word	0xfeeefffc

08002f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0e7      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b75      	ldr	r3, [pc, #468]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d910      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b72      	ldr	r3, [pc, #456]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	4970      	ldr	r1, [pc, #448]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b6e      	ldr	r3, [pc, #440]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0cf      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d010      	beq.n	8002faa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d908      	bls.n	8002faa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f98:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4960      	ldr	r1, [pc, #384]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d04c      	beq.n	8003050 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbe:	4b5a      	ldr	r3, [pc, #360]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d121      	bne.n	800300e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0a6      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd6:	4b54      	ldr	r3, [pc, #336]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d115      	bne.n	800300e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e09a      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fee:	4b4e      	ldr	r3, [pc, #312]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e08e      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffe:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e086      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800300e:	4b46      	ldr	r3, [pc, #280]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f023 0203 	bic.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4943      	ldr	r1, [pc, #268]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003020:	f7fe fe66 	bl	8001cf0 <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	e00a      	b.n	800303e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003028:	f7fe fe62 	bl	8001cf0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e06e      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 020c 	and.w	r2, r3, #12
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	429a      	cmp	r2, r3
 800304e:	d1eb      	bne.n	8003028 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b31      	ldr	r3, [pc, #196]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003068:	429a      	cmp	r2, r3
 800306a:	d208      	bcs.n	800307e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b2e      	ldr	r3, [pc, #184]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	492b      	ldr	r1, [pc, #172]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800307e:	4b29      	ldr	r3, [pc, #164]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d210      	bcs.n	80030ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308c:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 0207 	bic.w	r2, r3, #7
 8003094:	4923      	ldr	r1, [pc, #140]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309c:	4b21      	ldr	r3, [pc, #132]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e036      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	4918      	ldr	r1, [pc, #96]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d009      	beq.n	80030ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4910      	ldr	r1, [pc, #64]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ec:	f000 f824 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	490b      	ldr	r1, [pc, #44]	; (800312c <HAL_RCC_ClockConfig+0x1f4>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x1f8>)
 800310a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1fc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe fd9d 	bl	8001c50 <HAL_InitTick>
 8003116:	4603      	mov	r3, r0
 8003118:	72fb      	strb	r3, [r7, #11]

  return status;
 800311a:	7afb      	ldrb	r3, [r7, #11]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40022000 	.word	0x40022000
 8003128:	40021000 	.word	0x40021000
 800312c:	08007c14 	.word	0x08007c14
 8003130:	20000020 	.word	0x20000020
 8003134:	20000024 	.word	0x20000024

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003146:	4b3e      	ldr	r3, [pc, #248]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003150:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x34>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	d121      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d11e      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800316c:	4b34      	ldr	r3, [pc, #208]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003178:	4b31      	ldr	r3, [pc, #196]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e005      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003188:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003194:	4a2b      	ldr	r2, [pc, #172]	; (8003244 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10d      	bne.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d102      	bne.n	80031b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031b0:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_RCC_GetSysClockFreq+0x110>)
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	e004      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031bc:	4b23      	ldr	r3, [pc, #140]	; (800324c <HAL_RCC_GetSysClockFreq+0x114>)
 80031be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d134      	bne.n	8003230 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031c6:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d003      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0xa6>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d003      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0xac>
 80031dc:	e005      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031de:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <HAL_RCC_GetSysClockFreq+0x110>)
 80031e0:	617b      	str	r3, [r7, #20]
      break;
 80031e2:	e005      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_GetSysClockFreq+0x114>)
 80031e6:	617b      	str	r3, [r7, #20]
      break;
 80031e8:	e002      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	617b      	str	r3, [r7, #20]
      break;
 80031ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f0:	4b13      	ldr	r3, [pc, #76]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	3301      	adds	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	fb03 f202 	mul.w	r2, r3, r2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	0e5b      	lsrs	r3, r3, #25
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	3301      	adds	r3, #1
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003230:	69bb      	ldr	r3, [r7, #24]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3724      	adds	r7, #36	; 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	08007c2c 	.word	0x08007c2c
 8003248:	00f42400 	.word	0x00f42400
 800324c:	007a1200 	.word	0x007a1200

08003250 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_RCC_GetHCLKFreq+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000020 	.word	0x20000020

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800326c:	f7ff fff0 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4904      	ldr	r1, [pc, #16]	; (8003290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	08007c24 	.word	0x08007c24

08003294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003298:	f7ff ffda 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	0adb      	lsrs	r3, r3, #11
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4904      	ldr	r1, [pc, #16]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	08007c24 	.word	0x08007c24

080032c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032d8:	f7ff f9ee 	bl	80026b8 <HAL_PWREx_GetVoltageRange>
 80032dc:	6178      	str	r0, [r7, #20]
 80032de:	e014      	b.n	800330a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032e0:	4b25      	ldr	r3, [pc, #148]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	4a24      	ldr	r2, [pc, #144]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ea:	6593      	str	r3, [r2, #88]	; 0x58
 80032ec:	4b22      	ldr	r3, [pc, #136]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032f8:	f7ff f9de 	bl	80026b8 <HAL_PWREx_GetVoltageRange>
 80032fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032fe:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003308:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003310:	d10b      	bne.n	800332a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d919      	bls.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2ba0      	cmp	r3, #160	; 0xa0
 800331c:	d902      	bls.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800331e:	2302      	movs	r3, #2
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	e013      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003324:	2301      	movs	r3, #1
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	e010      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b80      	cmp	r3, #128	; 0x80
 800332e:	d902      	bls.n	8003336 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003330:	2303      	movs	r3, #3
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	e00a      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d102      	bne.n	8003342 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800333c:	2302      	movs	r3, #2
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	e004      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b70      	cmp	r3, #112	; 0x70
 8003346:	d101      	bne.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003348:	2301      	movs	r3, #1
 800334a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 0207 	bic.w	r2, r3, #7
 8003354:	4909      	ldr	r1, [pc, #36]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800335c:	4b07      	ldr	r3, [pc, #28]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	429a      	cmp	r2, r3
 8003368:	d001      	beq.n	800336e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	40022000 	.word	0x40022000

08003380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003388:	2300      	movs	r3, #0
 800338a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800338c:	2300      	movs	r3, #0
 800338e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003398:	2b00      	cmp	r3, #0
 800339a:	d041      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033a4:	d02a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033aa:	d824      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033b0:	d008      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033b6:	d81e      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c0:	d010      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033c2:	e018      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033c4:	4b86      	ldr	r3, [pc, #536]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a85      	ldr	r2, [pc, #532]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d0:	e015      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fabb 	bl	8003954 <RCCEx_PLLSAI1_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e2:	e00c      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3320      	adds	r3, #32
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fba6 	bl	8003b3c <RCCEx_PLLSAI2_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	74fb      	strb	r3, [r7, #19]
      break;
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003404:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003412:	4973      	ldr	r1, [pc, #460]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800341a:	e001      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d041      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003430:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003434:	d02a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003436:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800343a:	d824      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800343c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003440:	d008      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003446:	d81e      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800344c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003450:	d010      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003452:	e018      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003454:	4b62      	ldr	r3, [pc, #392]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003460:	e015      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fa73 	bl	8003954 <RCCEx_PLLSAI1_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003472:	e00c      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3320      	adds	r3, #32
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fb5e 	bl	8003b3c <RCCEx_PLLSAI2_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003484:	e003      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	74fb      	strb	r3, [r7, #19]
      break;
 800348a:	e000      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800348c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003494:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a2:	494f      	ldr	r1, [pc, #316]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034aa:	e001      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80a0 	beq.w	80035fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034c2:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00d      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d8:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	4a40      	ldr	r2, [pc, #256]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e2:	6593      	str	r3, [r2, #88]	; 0x58
 80034e4:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f0:	2301      	movs	r3, #1
 80034f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f4:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a3a      	ldr	r2, [pc, #232]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003500:	f7fe fbf6 	bl	8001cf0 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003506:	e009      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003508:	f7fe fbf2 	bl	8001cf0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d902      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	74fb      	strb	r3, [r7, #19]
        break;
 800351a:	e005      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800351c:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ef      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d15c      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800352e:	4b2c      	ldr	r3, [pc, #176]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003538:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01f      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	429a      	cmp	r2, r3
 800354a:	d019      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003556:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003558:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	4a20      	ldr	r2, [pc, #128]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fe fbb1 	bl	8001cf0 <HAL_GetTick>
 800358e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003590:	e00b      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fe fbad 	bl	8001cf0 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d902      	bls.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	74fb      	strb	r3, [r7, #19]
            break;
 80035a8:	e006      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0ec      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ce:	4904      	ldr	r1, [pc, #16]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035d6:	e009      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	74bb      	strb	r3, [r7, #18]
 80035dc:	e006      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ec:	7c7b      	ldrb	r3, [r7, #17]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f2:	4b9e      	ldr	r3, [pc, #632]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	4a9d      	ldr	r2, [pc, #628]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800360a:	4b98      	ldr	r3, [pc, #608]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f023 0203 	bic.w	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	4994      	ldr	r1, [pc, #592]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800362c:	4b8f      	ldr	r3, [pc, #572]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f023 020c 	bic.w	r2, r3, #12
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	498c      	ldr	r1, [pc, #560]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800364e:	4b87      	ldr	r3, [pc, #540]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	4983      	ldr	r1, [pc, #524]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003670:	4b7e      	ldr	r3, [pc, #504]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	497b      	ldr	r1, [pc, #492]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003692:	4b76      	ldr	r3, [pc, #472]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a0:	4972      	ldr	r1, [pc, #456]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036b4:	4b6d      	ldr	r3, [pc, #436]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c2:	496a      	ldr	r1, [pc, #424]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036d6:	4b65      	ldr	r3, [pc, #404]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	4961      	ldr	r1, [pc, #388]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036f8:	4b5c      	ldr	r3, [pc, #368]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003706:	4959      	ldr	r1, [pc, #356]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800371a:	4b54      	ldr	r3, [pc, #336]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	4950      	ldr	r1, [pc, #320]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800373c:	4b4b      	ldr	r3, [pc, #300]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	4948      	ldr	r1, [pc, #288]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800375e:	4b43      	ldr	r3, [pc, #268]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	493f      	ldr	r1, [pc, #252]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d028      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003780:	4b3a      	ldr	r3, [pc, #232]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378e:	4937      	ldr	r1, [pc, #220]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800379e:	d106      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a0:	4b32      	ldr	r3, [pc, #200]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a31      	ldr	r2, [pc, #196]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037aa:	60d3      	str	r3, [r2, #12]
 80037ac:	e011      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037b6:	d10c      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	2101      	movs	r1, #1
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f8c8 	bl	8003954 <RCCEx_PLLSAI1_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d028      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037de:	4b23      	ldr	r3, [pc, #140]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	491f      	ldr	r1, [pc, #124]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037fc:	d106      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fe:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	4a1a      	ldr	r2, [pc, #104]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003808:	60d3      	str	r3, [r2, #12]
 800380a:	e011      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003814:	d10c      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3304      	adds	r3, #4
 800381a:	2101      	movs	r1, #1
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f899 	bl	8003954 <RCCEx_PLLSAI1_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800382c:	7cfb      	ldrb	r3, [r7, #19]
 800382e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02b      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384a:	4908      	ldr	r1, [pc, #32]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003856:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800385a:	d109      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800385c:	4b03      	ldr	r3, [pc, #12]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a02      	ldr	r2, [pc, #8]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003866:	60d3      	str	r3, [r2, #12]
 8003868:	e014      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003874:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003878:	d10c      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	2101      	movs	r1, #1
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f867 	bl	8003954 <RCCEx_PLLSAI1_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d02f      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038a0:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ae:	4928      	ldr	r1, [pc, #160]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038be:	d10d      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	2102      	movs	r1, #2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f844 	bl	8003954 <RCCEx_PLLSAI1_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d014      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	74bb      	strb	r3, [r7, #18]
 80038da:	e011      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3320      	adds	r3, #32
 80038ea:	2102      	movs	r1, #2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 f925 	bl	8003b3c <RCCEx_PLLSAI2_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038fc:	7cfb      	ldrb	r3, [r7, #19]
 80038fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391a:	490d      	ldr	r1, [pc, #52]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800393e:	4904      	ldr	r1, [pc, #16]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003946:	7cbb      	ldrb	r3, [r7, #18]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000

08003954 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003962:	4b75      	ldr	r3, [pc, #468]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d018      	beq.n	80039a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800396e:	4b72      	ldr	r3, [pc, #456]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f003 0203 	and.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d10d      	bne.n	800399a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
       ||
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003986:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
       ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d047      	beq.n	8003a2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	e044      	b.n	8003a2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d018      	beq.n	80039da <RCCEx_PLLSAI1_Config+0x86>
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d825      	bhi.n	80039f8 <RCCEx_PLLSAI1_Config+0xa4>
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d002      	beq.n	80039b6 <RCCEx_PLLSAI1_Config+0x62>
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d009      	beq.n	80039c8 <RCCEx_PLLSAI1_Config+0x74>
 80039b4:	e020      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039b6:	4b60      	ldr	r3, [pc, #384]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d11d      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c6:	e01a      	b.n	80039fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c8:	4b5b      	ldr	r3, [pc, #364]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d116      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d8:	e013      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039da:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10f      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039e6:	4b54      	ldr	r3, [pc, #336]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039f6:	e006      	b.n	8003a06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      break;
 80039fc:	e004      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fe:	bf00      	nop
 8003a00:	e002      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10d      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a0e:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6819      	ldr	r1, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	430b      	orrs	r3, r1
 8003a24:	4944      	ldr	r1, [pc, #272]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d17d      	bne.n	8003b2c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a30:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a40      	ldr	r2, [pc, #256]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3c:	f7fe f958 	bl	8001cf0 <HAL_GetTick>
 8003a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a42:	e009      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a44:	f7fe f954 	bl	8001cf0 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	73fb      	strb	r3, [r7, #15]
        break;
 8003a56:	e005      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a58:	4b37      	ldr	r3, [pc, #220]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ef      	bne.n	8003a44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d160      	bne.n	8003b2c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d111      	bne.n	8003a94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a70:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6892      	ldr	r2, [r2, #8]
 8003a80:	0211      	lsls	r1, r2, #8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68d2      	ldr	r2, [r2, #12]
 8003a86:	0912      	lsrs	r2, r2, #4
 8003a88:	0452      	lsls	r2, r2, #17
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	492a      	ldr	r1, [pc, #168]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	610b      	str	r3, [r1, #16]
 8003a92:	e027      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d112      	bne.n	8003ac0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a9a:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003aa2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6892      	ldr	r2, [r2, #8]
 8003aaa:	0211      	lsls	r1, r2, #8
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6912      	ldr	r2, [r2, #16]
 8003ab0:	0852      	lsrs	r2, r2, #1
 8003ab2:	3a01      	subs	r2, #1
 8003ab4:	0552      	lsls	r2, r2, #21
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	491f      	ldr	r1, [pc, #124]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	610b      	str	r3, [r1, #16]
 8003abe:	e011      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ac8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6892      	ldr	r2, [r2, #8]
 8003ad0:	0211      	lsls	r1, r2, #8
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6952      	ldr	r2, [r2, #20]
 8003ad6:	0852      	lsrs	r2, r2, #1
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	0652      	lsls	r2, r2, #25
 8003adc:	430a      	orrs	r2, r1
 8003ade:	4916      	ldr	r1, [pc, #88]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ae4:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fe f8fe 	bl	8001cf0 <HAL_GetTick>
 8003af4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af6:	e009      	b.n	8003b0c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af8:	f7fe f8fa 	bl	8001cf0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d902      	bls.n	8003b0c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	73fb      	strb	r3, [r7, #15]
          break;
 8003b0a:	e005      	b.n	8003b18 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ef      	beq.n	8003af8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	4904      	ldr	r1, [pc, #16]	; (8003b38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000

08003b3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d018      	beq.n	8003b88 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b56:	4b67      	ldr	r3, [pc, #412]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0203 	and.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d10d      	bne.n	8003b82 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
       ||
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b6e:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d047      	beq.n	8003c12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
 8003b86:	e044      	b.n	8003c12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d018      	beq.n	8003bc2 <RCCEx_PLLSAI2_Config+0x86>
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d825      	bhi.n	8003be0 <RCCEx_PLLSAI2_Config+0xa4>
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d002      	beq.n	8003b9e <RCCEx_PLLSAI2_Config+0x62>
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d009      	beq.n	8003bb0 <RCCEx_PLLSAI2_Config+0x74>
 8003b9c:	e020      	b.n	8003be0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b9e:	4b55      	ldr	r3, [pc, #340]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d11d      	bne.n	8003be6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bae:	e01a      	b.n	8003be6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bb0:	4b50      	ldr	r3, [pc, #320]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d116      	bne.n	8003bea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc0:	e013      	b.n	8003bea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bc2:	4b4c      	ldr	r3, [pc, #304]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10f      	bne.n	8003bee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bce:	4b49      	ldr	r3, [pc, #292]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bde:	e006      	b.n	8003bee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      break;
 8003be4:	e004      	b.n	8003bf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003be6:	bf00      	nop
 8003be8:	e002      	b.n	8003bf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bea:	bf00      	nop
 8003bec:	e000      	b.n	8003bf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bee:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bf6:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6819      	ldr	r1, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	4939      	ldr	r1, [pc, #228]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d167      	bne.n	8003ce8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c18:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a35      	ldr	r2, [pc, #212]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c24:	f7fe f864 	bl	8001cf0 <HAL_GetTick>
 8003c28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c2a:	e009      	b.n	8003c40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c2c:	f7fe f860 	bl	8001cf0 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d902      	bls.n	8003c40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c3e:	e005      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1ef      	bne.n	8003c2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d14a      	bne.n	8003ce8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d111      	bne.n	8003c7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c58:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6892      	ldr	r2, [r2, #8]
 8003c68:	0211      	lsls	r1, r2, #8
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	0912      	lsrs	r2, r2, #4
 8003c70:	0452      	lsls	r2, r2, #17
 8003c72:	430a      	orrs	r2, r1
 8003c74:	491f      	ldr	r1, [pc, #124]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	614b      	str	r3, [r1, #20]
 8003c7a:	e011      	b.n	8003ca0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c7c:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6892      	ldr	r2, [r2, #8]
 8003c8c:	0211      	lsls	r1, r2, #8
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6912      	ldr	r2, [r2, #16]
 8003c92:	0852      	lsrs	r2, r2, #1
 8003c94:	3a01      	subs	r2, #1
 8003c96:	0652      	lsls	r2, r2, #25
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	4916      	ldr	r1, [pc, #88]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a13      	ldr	r2, [pc, #76]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe f820 	bl	8001cf0 <HAL_GetTick>
 8003cb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cb2:	e009      	b.n	8003cc8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cb4:	f7fe f81c 	bl	8001cf0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d902      	bls.n	8003cc8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	73fb      	strb	r3, [r7, #15]
          break;
 8003cc6:	e005      	b.n	8003cd4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0ef      	beq.n	8003cb4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	4904      	ldr	r1, [pc, #16]	; (8003cf4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e049      	b.n	8003d9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd fd62 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f001 fa06 	bl	8005148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d001      	beq.n	8003dc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e047      	b.n	8003e50 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <HAL_TIM_Base_Start+0xb4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01d      	beq.n	8003e0e <HAL_TIM_Base_Start+0x66>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dda:	d018      	beq.n	8003e0e <HAL_TIM_Base_Start+0x66>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <HAL_TIM_Base_Start+0xb8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <HAL_TIM_Base_Start+0x66>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1e      	ldr	r2, [pc, #120]	; (8003e64 <HAL_TIM_Base_Start+0xbc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00e      	beq.n	8003e0e <HAL_TIM_Base_Start+0x66>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1c      	ldr	r2, [pc, #112]	; (8003e68 <HAL_TIM_Base_Start+0xc0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d009      	beq.n	8003e0e <HAL_TIM_Base_Start+0x66>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1b      	ldr	r2, [pc, #108]	; (8003e6c <HAL_TIM_Base_Start+0xc4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d004      	beq.n	8003e0e <HAL_TIM_Base_Start+0x66>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a19      	ldr	r2, [pc, #100]	; (8003e70 <HAL_TIM_Base_Start+0xc8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d115      	bne.n	8003e3a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <HAL_TIM_Base_Start+0xcc>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b06      	cmp	r3, #6
 8003e1e:	d015      	beq.n	8003e4c <HAL_TIM_Base_Start+0xa4>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e26:	d011      	beq.n	8003e4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e38:	e008      	b.n	8003e4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e000      	b.n	8003e4e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40000800 	.word	0x40000800
 8003e68:	40000c00 	.word	0x40000c00
 8003e6c:	40013400 	.word	0x40013400
 8003e70:	40014000 	.word	0x40014000
 8003e74:	00010007 	.word	0x00010007

08003e78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e049      	b.n	8003f1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f841 	bl	8003f26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f001 f946 	bl	8005148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e03c      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d109      	bne.n	8003f82 <HAL_TIM_PWM_Start_DMA+0x46>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e02f      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d109      	bne.n	8003f9c <HAL_TIM_PWM_Start_DMA+0x60>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e022      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d109      	bne.n	8003fb6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	e015      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d109      	bne.n	8003fd0 <HAL_TIM_PWM_Start_DMA+0x94>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e008      	b.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e1ab      	b.n	8004342 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e03c      	b.n	800407e <HAL_TIM_PWM_Start_DMA+0x142>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b04      	cmp	r3, #4
 8004008:	d109      	bne.n	800401e <HAL_TIM_PWM_Start_DMA+0xe2>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e02f      	b.n	800407e <HAL_TIM_PWM_Start_DMA+0x142>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d109      	bne.n	8004038 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e022      	b.n	800407e <HAL_TIM_PWM_Start_DMA+0x142>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d109      	bne.n	8004052 <HAL_TIM_PWM_Start_DMA+0x116>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b01      	cmp	r3, #1
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	e015      	b.n	800407e <HAL_TIM_PWM_Start_DMA+0x142>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b10      	cmp	r3, #16
 8004056:	d109      	bne.n	800406c <HAL_TIM_PWM_Start_DMA+0x130>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e008      	b.n	800407e <HAL_TIM_PWM_Start_DMA+0x142>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d034      	beq.n	80040ec <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_TIM_PWM_Start_DMA+0x152>
 8004088:	887b      	ldrh	r3, [r7, #2]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e157      	b.n	8004342 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d104      	bne.n	80040a2 <HAL_TIM_PWM_Start_DMA+0x166>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a0:	e026      	b.n	80040f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_PWM_Start_DMA+0x176>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b0:	e01e      	b.n	80040f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_PWM_Start_DMA+0x186>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c0:	e016      	b.n	80040f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d104      	bne.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x196>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040d0:	e00e      	b.n	80040f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d104      	bne.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e0:	e006      	b.n	80040f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ea:	e001      	b.n	80040f0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e128      	b.n	8004342 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	f200 80ae 	bhi.w	8004254 <HAL_TIM_PWM_Start_DMA+0x318>
 80040f8:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	08004135 	.word	0x08004135
 8004104:	08004255 	.word	0x08004255
 8004108:	08004255 	.word	0x08004255
 800410c:	08004255 	.word	0x08004255
 8004110:	0800417d 	.word	0x0800417d
 8004114:	08004255 	.word	0x08004255
 8004118:	08004255 	.word	0x08004255
 800411c:	08004255 	.word	0x08004255
 8004120:	080041c5 	.word	0x080041c5
 8004124:	08004255 	.word	0x08004255
 8004128:	08004255 	.word	0x08004255
 800412c:	08004255 	.word	0x08004255
 8004130:	0800420d 	.word	0x0800420d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	4a84      	ldr	r2, [pc, #528]	; (800434c <HAL_TIM_PWM_Start_DMA+0x410>)
 800413a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	4a83      	ldr	r2, [pc, #524]	; (8004350 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004142:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	4a82      	ldr	r2, [pc, #520]	; (8004354 <HAL_TIM_PWM_Start_DMA+0x418>)
 800414a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3334      	adds	r3, #52	; 0x34
 8004158:	461a      	mov	r2, r3
 800415a:	887b      	ldrh	r3, [r7, #2]
 800415c:	f7fd ffc2 	bl	80020e4 <HAL_DMA_Start_IT>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e0eb      	b.n	8004342 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004178:	60da      	str	r2, [r3, #12]
      break;
 800417a:	e06e      	b.n	800425a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	4a72      	ldr	r2, [pc, #456]	; (800434c <HAL_TIM_PWM_Start_DMA+0x410>)
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	4a71      	ldr	r2, [pc, #452]	; (8004350 <HAL_TIM_PWM_Start_DMA+0x414>)
 800418a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	4a70      	ldr	r2, [pc, #448]	; (8004354 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004192:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3338      	adds	r3, #56	; 0x38
 80041a0:	461a      	mov	r2, r3
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	f7fd ff9e 	bl	80020e4 <HAL_DMA_Start_IT>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e0c7      	b.n	8004342 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c0:	60da      	str	r2, [r3, #12]
      break;
 80041c2:	e04a      	b.n	800425a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	4a60      	ldr	r2, [pc, #384]	; (800434c <HAL_TIM_PWM_Start_DMA+0x410>)
 80041ca:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	4a5f      	ldr	r2, [pc, #380]	; (8004350 <HAL_TIM_PWM_Start_DMA+0x414>)
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	4a5e      	ldr	r2, [pc, #376]	; (8004354 <HAL_TIM_PWM_Start_DMA+0x418>)
 80041da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	333c      	adds	r3, #60	; 0x3c
 80041e8:	461a      	mov	r2, r3
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	f7fd ff7a 	bl	80020e4 <HAL_DMA_Start_IT>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e0a3      	b.n	8004342 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004208:	60da      	str	r2, [r3, #12]
      break;
 800420a:	e026      	b.n	800425a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	4a4e      	ldr	r2, [pc, #312]	; (800434c <HAL_TIM_PWM_Start_DMA+0x410>)
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	4a4d      	ldr	r2, [pc, #308]	; (8004350 <HAL_TIM_PWM_Start_DMA+0x414>)
 800421a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	4a4c      	ldr	r2, [pc, #304]	; (8004354 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004222:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3340      	adds	r3, #64	; 0x40
 8004230:	461a      	mov	r2, r3
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	f7fd ff56 	bl	80020e4 <HAL_DMA_Start_IT>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07f      	b.n	8004342 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004250:	60da      	str	r2, [r3, #12]
      break;
 8004252:	e002      	b.n	800425a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	75fb      	strb	r3, [r7, #23]
      break;
 8004258:	bf00      	nop
  }

  if (status == HAL_OK)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d16f      	bne.n	8004340 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2201      	movs	r2, #1
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fd2f 	bl	8005ccc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a39      	ldr	r2, [pc, #228]	; (8004358 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <HAL_TIM_PWM_Start_DMA+0x364>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a37      	ldr	r2, [pc, #220]	; (800435c <HAL_TIM_PWM_Start_DMA+0x420>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <HAL_TIM_PWM_Start_DMA+0x364>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a36      	ldr	r2, [pc, #216]	; (8004360 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <HAL_TIM_PWM_Start_DMA+0x364>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a34      	ldr	r2, [pc, #208]	; (8004364 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_TIM_PWM_Start_DMA+0x364>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a33      	ldr	r2, [pc, #204]	; (8004368 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_TIM_PWM_Start_DMA+0x368>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a26      	ldr	r2, [pc, #152]	; (8004358 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d01d      	beq.n	8004300 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042cc:	d018      	beq.n	8004300 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a26      	ldr	r2, [pc, #152]	; (800436c <HAL_TIM_PWM_Start_DMA+0x430>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a24      	ldr	r2, [pc, #144]	; (8004370 <HAL_TIM_PWM_Start_DMA+0x434>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00e      	beq.n	8004300 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a23      	ldr	r2, [pc, #140]	; (8004374 <HAL_TIM_PWM_Start_DMA+0x438>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d009      	beq.n	8004300 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1a      	ldr	r2, [pc, #104]	; (800435c <HAL_TIM_PWM_Start_DMA+0x420>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a19      	ldr	r2, [pc, #100]	; (8004360 <HAL_TIM_PWM_Start_DMA+0x424>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d115      	bne.n	800432c <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b06      	cmp	r3, #6
 8004310:	d015      	beq.n	800433e <HAL_TIM_PWM_Start_DMA+0x402>
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004318:	d011      	beq.n	800433e <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0201 	orr.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432a:	e008      	b.n	800433e <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	e000      	b.n	8004340 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	08005037 	.word	0x08005037
 8004350:	080050df 	.word	0x080050df
 8004354:	08004fa5 	.word	0x08004fa5
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40013400 	.word	0x40013400
 8004360:	40014000 	.word	0x40014000
 8004364:	40014400 	.word	0x40014400
 8004368:	40014800 	.word	0x40014800
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800
 8004374:	40000c00 	.word	0x40000c00
 8004378:	00010007 	.word	0x00010007

0800437c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e049      	b.n	8004422 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f841 	bl	800442a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 fec4 	bl	8005148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_TIM_IC_Start_IT+0x1e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445a:	b2db      	uxtb	r3, r3
 800445c:	e023      	b.n	80044a6 <HAL_TIM_IC_Start_IT+0x66>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b04      	cmp	r3, #4
 8004462:	d104      	bne.n	800446e <HAL_TIM_IC_Start_IT+0x2e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800446a:	b2db      	uxtb	r3, r3
 800446c:	e01b      	b.n	80044a6 <HAL_TIM_IC_Start_IT+0x66>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d104      	bne.n	800447e <HAL_TIM_IC_Start_IT+0x3e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800447a:	b2db      	uxtb	r3, r3
 800447c:	e013      	b.n	80044a6 <HAL_TIM_IC_Start_IT+0x66>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b0c      	cmp	r3, #12
 8004482:	d104      	bne.n	800448e <HAL_TIM_IC_Start_IT+0x4e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e00b      	b.n	80044a6 <HAL_TIM_IC_Start_IT+0x66>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b10      	cmp	r3, #16
 8004492:	d104      	bne.n	800449e <HAL_TIM_IC_Start_IT+0x5e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800449a:	b2db      	uxtb	r3, r3
 800449c:	e003      	b.n	80044a6 <HAL_TIM_IC_Start_IT+0x66>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d104      	bne.n	80044b8 <HAL_TIM_IC_Start_IT+0x78>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	e013      	b.n	80044e0 <HAL_TIM_IC_Start_IT+0xa0>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d104      	bne.n	80044c8 <HAL_TIM_IC_Start_IT+0x88>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e00b      	b.n	80044e0 <HAL_TIM_IC_Start_IT+0xa0>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d104      	bne.n	80044d8 <HAL_TIM_IC_Start_IT+0x98>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	e003      	b.n	80044e0 <HAL_TIM_IC_Start_IT+0xa0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80044e2:	7bbb      	ldrb	r3, [r7, #14]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d102      	bne.n	80044ee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80044e8:	7b7b      	ldrb	r3, [r7, #13]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d001      	beq.n	80044f2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0dd      	b.n	80046ae <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <HAL_TIM_IC_Start_IT+0xc2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004500:	e023      	b.n	800454a <HAL_TIM_IC_Start_IT+0x10a>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d104      	bne.n	8004512 <HAL_TIM_IC_Start_IT+0xd2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004510:	e01b      	b.n	800454a <HAL_TIM_IC_Start_IT+0x10a>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d104      	bne.n	8004522 <HAL_TIM_IC_Start_IT+0xe2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004520:	e013      	b.n	800454a <HAL_TIM_IC_Start_IT+0x10a>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b0c      	cmp	r3, #12
 8004526:	d104      	bne.n	8004532 <HAL_TIM_IC_Start_IT+0xf2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004530:	e00b      	b.n	800454a <HAL_TIM_IC_Start_IT+0x10a>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b10      	cmp	r3, #16
 8004536:	d104      	bne.n	8004542 <HAL_TIM_IC_Start_IT+0x102>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004540:	e003      	b.n	800454a <HAL_TIM_IC_Start_IT+0x10a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d104      	bne.n	800455a <HAL_TIM_IC_Start_IT+0x11a>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004558:	e013      	b.n	8004582 <HAL_TIM_IC_Start_IT+0x142>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d104      	bne.n	800456a <HAL_TIM_IC_Start_IT+0x12a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004568:	e00b      	b.n	8004582 <HAL_TIM_IC_Start_IT+0x142>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d104      	bne.n	800457a <HAL_TIM_IC_Start_IT+0x13a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004578:	e003      	b.n	8004582 <HAL_TIM_IC_Start_IT+0x142>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b0c      	cmp	r3, #12
 8004586:	d841      	bhi.n	800460c <HAL_TIM_IC_Start_IT+0x1cc>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <HAL_TIM_IC_Start_IT+0x150>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045c5 	.word	0x080045c5
 8004594:	0800460d 	.word	0x0800460d
 8004598:	0800460d 	.word	0x0800460d
 800459c:	0800460d 	.word	0x0800460d
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	0800460d 	.word	0x0800460d
 80045a8:	0800460d 	.word	0x0800460d
 80045ac:	0800460d 	.word	0x0800460d
 80045b0:	080045e9 	.word	0x080045e9
 80045b4:	0800460d 	.word	0x0800460d
 80045b8:	0800460d 	.word	0x0800460d
 80045bc:	0800460d 	.word	0x0800460d
 80045c0:	080045fb 	.word	0x080045fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0202 	orr.w	r2, r2, #2
 80045d2:	60da      	str	r2, [r3, #12]
      break;
 80045d4:	e01d      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0204 	orr.w	r2, r2, #4
 80045e4:	60da      	str	r2, [r3, #12]
      break;
 80045e6:	e014      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0208 	orr.w	r2, r2, #8
 80045f6:	60da      	str	r2, [r3, #12]
      break;
 80045f8:	e00b      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0210 	orr.w	r2, r2, #16
 8004608:	60da      	str	r2, [r3, #12]
      break;
 800460a:	e002      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
      break;
 8004610:	bf00      	nop
  }

  if (status == HAL_OK)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d149      	bne.n	80046ac <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2201      	movs	r2, #1
 800461e:	6839      	ldr	r1, [r7, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f001 fb53 	bl	8005ccc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a23      	ldr	r2, [pc, #140]	; (80046b8 <HAL_TIM_IC_Start_IT+0x278>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d01d      	beq.n	800466c <HAL_TIM_IC_Start_IT+0x22c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004638:	d018      	beq.n	800466c <HAL_TIM_IC_Start_IT+0x22c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <HAL_TIM_IC_Start_IT+0x27c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d013      	beq.n	800466c <HAL_TIM_IC_Start_IT+0x22c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <HAL_TIM_IC_Start_IT+0x280>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIM_IC_Start_IT+0x22c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <HAL_TIM_IC_Start_IT+0x284>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIM_IC_Start_IT+0x22c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <HAL_TIM_IC_Start_IT+0x288>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_IC_Start_IT+0x22c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a19      	ldr	r2, [pc, #100]	; (80046cc <HAL_TIM_IC_Start_IT+0x28c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d115      	bne.n	8004698 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <HAL_TIM_IC_Start_IT+0x290>)
 8004674:	4013      	ands	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d015      	beq.n	80046aa <HAL_TIM_IC_Start_IT+0x26a>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004684:	d011      	beq.n	80046aa <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0201 	orr.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004696:	e008      	b.n	80046aa <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e000      	b.n	80046ac <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40013400 	.word	0x40013400
 80046cc:	40014000 	.word	0x40014000
 80046d0:	00010007 	.word	0x00010007

080046d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d122      	bne.n	8004730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d11b      	bne.n	8004730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0202 	mvn.w	r2, #2
 8004700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fc f82e 	bl	8000778 <HAL_TIM_IC_CaptureCallback>
 800471c:	e005      	b.n	800472a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fc02 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fc09 	bl	8004f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b04      	cmp	r3, #4
 800473c:	d122      	bne.n	8004784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b04      	cmp	r3, #4
 800474a:	d11b      	bne.n	8004784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0204 	mvn.w	r2, #4
 8004754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc f804 	bl	8000778 <HAL_TIM_IC_CaptureCallback>
 8004770:	e005      	b.n	800477e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fbd8 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fbdf 	bl	8004f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b08      	cmp	r3, #8
 8004790:	d122      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b08      	cmp	r3, #8
 800479e:	d11b      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0208 	mvn.w	r2, #8
 80047a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2204      	movs	r2, #4
 80047ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fb ffda 	bl	8000778 <HAL_TIM_IC_CaptureCallback>
 80047c4:	e005      	b.n	80047d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fbae 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fbb5 	bl	8004f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b10      	cmp	r3, #16
 80047e4:	d122      	bne.n	800482c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d11b      	bne.n	800482c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0210 	mvn.w	r2, #16
 80047fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2208      	movs	r2, #8
 8004802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fb ffb0 	bl	8000778 <HAL_TIM_IC_CaptureCallback>
 8004818:	e005      	b.n	8004826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fb84 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fb8b 	bl	8004f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b01      	cmp	r3, #1
 8004838:	d10e      	bne.n	8004858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b01      	cmp	r3, #1
 8004846:	d107      	bne.n	8004858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0201 	mvn.w	r2, #1
 8004850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fb5e 	bl	8004f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	2b80      	cmp	r3, #128	; 0x80
 8004864:	d10e      	bne.n	8004884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004870:	2b80      	cmp	r3, #128	; 0x80
 8004872:	d107      	bne.n	8004884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800487c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 fadc 	bl	8005e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004892:	d10e      	bne.n	80048b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d107      	bne.n	80048b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f001 facf 	bl	8005e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d10e      	bne.n	80048de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d107      	bne.n	80048de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fb43 	bl	8004f64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d10e      	bne.n	800490a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d107      	bne.n	800490a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f06f 0220 	mvn.w	r2, #32
 8004902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f001 fa8f 	bl	8005e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIM_IC_ConfigChannel+0x1e>
 800492c:	2302      	movs	r3, #2
 800492e:	e088      	b.n	8004a42 <HAL_TIM_IC_ConfigChannel+0x130>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d11b      	bne.n	8004976 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	6819      	ldr	r1, [r3, #0]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f000 ffff 	bl	8005950 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 020c 	bic.w	r2, r2, #12
 8004960:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6999      	ldr	r1, [r3, #24]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	619a      	str	r2, [r3, #24]
 8004974:	e060      	b.n	8004a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d11c      	bne.n	80049b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f001 f87d 	bl	8005a8a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800499e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6999      	ldr	r1, [r3, #24]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	021a      	lsls	r2, r3, #8
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	619a      	str	r2, [r3, #24]
 80049b4:	e040      	b.n	8004a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f001 f8ca 	bl	8005b64 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 020c 	bic.w	r2, r2, #12
 80049de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69d9      	ldr	r1, [r3, #28]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	61da      	str	r2, [r3, #28]
 80049f2:	e021      	b.n	8004a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d11c      	bne.n	8004a34 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f001 f8e7 	bl	8005bdc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a1c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69d9      	ldr	r1, [r3, #28]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	021a      	lsls	r2, r3, #8
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	61da      	str	r2, [r3, #28]
 8004a32:	e001      	b.n	8004a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e0ff      	b.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b14      	cmp	r3, #20
 8004a76:	f200 80f0 	bhi.w	8004c5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004ad5 	.word	0x08004ad5
 8004a84:	08004c5b 	.word	0x08004c5b
 8004a88:	08004c5b 	.word	0x08004c5b
 8004a8c:	08004c5b 	.word	0x08004c5b
 8004a90:	08004b15 	.word	0x08004b15
 8004a94:	08004c5b 	.word	0x08004c5b
 8004a98:	08004c5b 	.word	0x08004c5b
 8004a9c:	08004c5b 	.word	0x08004c5b
 8004aa0:	08004b57 	.word	0x08004b57
 8004aa4:	08004c5b 	.word	0x08004c5b
 8004aa8:	08004c5b 	.word	0x08004c5b
 8004aac:	08004c5b 	.word	0x08004c5b
 8004ab0:	08004b97 	.word	0x08004b97
 8004ab4:	08004c5b 	.word	0x08004c5b
 8004ab8:	08004c5b 	.word	0x08004c5b
 8004abc:	08004c5b 	.word	0x08004c5b
 8004ac0:	08004bd9 	.word	0x08004bd9
 8004ac4:	08004c5b 	.word	0x08004c5b
 8004ac8:	08004c5b 	.word	0x08004c5b
 8004acc:	08004c5b 	.word	0x08004c5b
 8004ad0:	08004c19 	.word	0x08004c19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fbce 	bl	800527c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0208 	orr.w	r2, r2, #8
 8004aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0204 	bic.w	r2, r2, #4
 8004afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6999      	ldr	r1, [r3, #24]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	619a      	str	r2, [r3, #24]
      break;
 8004b12:	e0a5      	b.n	8004c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fc3e 	bl	800539c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6999      	ldr	r1, [r3, #24]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	021a      	lsls	r2, r3, #8
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	619a      	str	r2, [r3, #24]
      break;
 8004b54:	e084      	b.n	8004c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fca7 	bl	80054b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0208 	orr.w	r2, r2, #8
 8004b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0204 	bic.w	r2, r2, #4
 8004b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69d9      	ldr	r1, [r3, #28]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	61da      	str	r2, [r3, #28]
      break;
 8004b94:	e064      	b.n	8004c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fd0f 	bl	80055c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69d9      	ldr	r1, [r3, #28]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	021a      	lsls	r2, r3, #8
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	61da      	str	r2, [r3, #28]
      break;
 8004bd6:	e043      	b.n	8004c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fd58 	bl	8005694 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0208 	orr.w	r2, r2, #8
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0204 	bic.w	r2, r2, #4
 8004c02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c16:	e023      	b.n	8004c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fd9c 	bl	800575c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	021a      	lsls	r2, r3, #8
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c58:	e002      	b.n	8004c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop

08004c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_TIM_ConfigClockSource+0x1c>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e0b6      	b.n	8004dfe <HAL_TIM_ConfigClockSource+0x18a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ccc:	d03e      	beq.n	8004d4c <HAL_TIM_ConfigClockSource+0xd8>
 8004cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd2:	f200 8087 	bhi.w	8004de4 <HAL_TIM_ConfigClockSource+0x170>
 8004cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cda:	f000 8086 	beq.w	8004dea <HAL_TIM_ConfigClockSource+0x176>
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d87f      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x170>
 8004ce4:	2b70      	cmp	r3, #112	; 0x70
 8004ce6:	d01a      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0xaa>
 8004ce8:	2b70      	cmp	r3, #112	; 0x70
 8004cea:	d87b      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x170>
 8004cec:	2b60      	cmp	r3, #96	; 0x60
 8004cee:	d050      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x11e>
 8004cf0:	2b60      	cmp	r3, #96	; 0x60
 8004cf2:	d877      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x170>
 8004cf4:	2b50      	cmp	r3, #80	; 0x50
 8004cf6:	d03c      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0xfe>
 8004cf8:	2b50      	cmp	r3, #80	; 0x50
 8004cfa:	d873      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x170>
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d058      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x13e>
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d86f      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x170>
 8004d04:	2b30      	cmp	r3, #48	; 0x30
 8004d06:	d064      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d08:	2b30      	cmp	r3, #48	; 0x30
 8004d0a:	d86b      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x170>
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d060      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d867      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x170>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d05c      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d05a      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004d1c:	e062      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6899      	ldr	r1, [r3, #8]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f000 ffad 	bl	8005c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	609a      	str	r2, [r3, #8]
      break;
 8004d4a:	e04f      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	6899      	ldr	r1, [r3, #8]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f000 ff96 	bl	8005c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d6e:	609a      	str	r2, [r3, #8]
      break;
 8004d70:	e03c      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f000 fe54 	bl	8005a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2150      	movs	r1, #80	; 0x50
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 ff63 	bl	8005c56 <TIM_ITRx_SetConfig>
      break;
 8004d90:	e02c      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	6859      	ldr	r1, [r3, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f000 feb0 	bl	8005b04 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2160      	movs	r1, #96	; 0x60
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 ff53 	bl	8005c56 <TIM_ITRx_SetConfig>
      break;
 8004db0:	e01c      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6859      	ldr	r1, [r3, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f000 fe34 	bl	8005a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2140      	movs	r1, #64	; 0x40
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 ff43 	bl	8005c56 <TIM_ITRx_SetConfig>
      break;
 8004dd0:	e00c      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f000 ff3a 	bl	8005c56 <TIM_ITRx_SetConfig>
      break;
 8004de2:	e003      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
      break;
 8004de8:	e000      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_TIM_SlaveConfigSynchro+0x18>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e031      	b.n	8004e82 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fcf9 	bl	8005828 <TIM_SlaveTimer_SetConfig>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e018      	b.n	8004e82 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e5e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e6e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b0c      	cmp	r3, #12
 8004e9e:	d831      	bhi.n	8004f04 <HAL_TIM_ReadCapturedValue+0x78>
 8004ea0:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004edd 	.word	0x08004edd
 8004eac:	08004f05 	.word	0x08004f05
 8004eb0:	08004f05 	.word	0x08004f05
 8004eb4:	08004f05 	.word	0x08004f05
 8004eb8:	08004ee7 	.word	0x08004ee7
 8004ebc:	08004f05 	.word	0x08004f05
 8004ec0:	08004f05 	.word	0x08004f05
 8004ec4:	08004f05 	.word	0x08004f05
 8004ec8:	08004ef1 	.word	0x08004ef1
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004f05 	.word	0x08004f05
 8004ed4:	08004f05 	.word	0x08004f05
 8004ed8:	08004efb 	.word	0x08004efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee2:	60fb      	str	r3, [r7, #12]

      break;
 8004ee4:	e00f      	b.n	8004f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	60fb      	str	r3, [r7, #12]

      break;
 8004eee:	e00a      	b.n	8004f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	60fb      	str	r3, [r7, #12]

      break;
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	60fb      	str	r3, [r7, #12]

      break;
 8004f02:	e000      	b.n	8004f06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004f04:	bf00      	nop
  }

  return tmpreg;
 8004f06:	68fb      	ldr	r3, [r7, #12]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	7f1b      	ldrb	r3, [r3, #28]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d107      	bne.n	8004fcc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fca:	e02a      	b.n	8005022 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d107      	bne.n	8004fe6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe4:	e01d      	b.n	8005022 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d107      	bne.n	8005000 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ffe:	e010      	b.n	8005022 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d107      	bne.n	800501a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2208      	movs	r2, #8
 800500e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005018:	e003      	b.n	8005022 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff ffa8 	bl	8004f78 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	771a      	strb	r2, [r3, #28]
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	429a      	cmp	r2, r3
 800504c:	d10b      	bne.n	8005066 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d136      	bne.n	80050ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005064:	e031      	b.n	80050ca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	429a      	cmp	r2, r3
 800506e:	d10b      	bne.n	8005088 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2202      	movs	r2, #2
 8005074:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d125      	bne.n	80050ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005086:	e020      	b.n	80050ca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	429a      	cmp	r2, r3
 8005090:	d10b      	bne.n	80050aa <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2204      	movs	r2, #4
 8005096:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d114      	bne.n	80050ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a8:	e00f      	b.n	80050ca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d10a      	bne.n	80050ca <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2208      	movs	r2, #8
 80050b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d103      	bne.n	80050ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff ff36 	bl	8004f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	771a      	strb	r2, [r3, #28]
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d103      	bne.n	80050fe <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	771a      	strb	r2, [r3, #28]
 80050fc:	e019      	b.n	8005132 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	429a      	cmp	r2, r3
 8005106:	d103      	bne.n	8005110 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2202      	movs	r2, #2
 800510c:	771a      	strb	r2, [r3, #28]
 800510e:	e010      	b.n	8005132 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d103      	bne.n	8005122 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2204      	movs	r2, #4
 800511e:	771a      	strb	r2, [r3, #28]
 8005120:	e007      	b.n	8005132 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	429a      	cmp	r2, r3
 800512a:	d102      	bne.n	8005132 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2208      	movs	r2, #8
 8005130:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff ff0c 	bl	8004f50 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	771a      	strb	r2, [r3, #28]
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a40      	ldr	r2, [pc, #256]	; (800525c <TIM_Base_SetConfig+0x114>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d013      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005166:	d00f      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a3d      	ldr	r2, [pc, #244]	; (8005260 <TIM_Base_SetConfig+0x118>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00b      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a3c      	ldr	r2, [pc, #240]	; (8005264 <TIM_Base_SetConfig+0x11c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d007      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a3b      	ldr	r2, [pc, #236]	; (8005268 <TIM_Base_SetConfig+0x120>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_Base_SetConfig+0x40>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a3a      	ldr	r2, [pc, #232]	; (800526c <TIM_Base_SetConfig+0x124>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d108      	bne.n	800519a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2f      	ldr	r2, [pc, #188]	; (800525c <TIM_Base_SetConfig+0x114>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01f      	beq.n	80051e2 <TIM_Base_SetConfig+0x9a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a8:	d01b      	beq.n	80051e2 <TIM_Base_SetConfig+0x9a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2c      	ldr	r2, [pc, #176]	; (8005260 <TIM_Base_SetConfig+0x118>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d017      	beq.n	80051e2 <TIM_Base_SetConfig+0x9a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2b      	ldr	r2, [pc, #172]	; (8005264 <TIM_Base_SetConfig+0x11c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <TIM_Base_SetConfig+0x9a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a2a      	ldr	r2, [pc, #168]	; (8005268 <TIM_Base_SetConfig+0x120>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00f      	beq.n	80051e2 <TIM_Base_SetConfig+0x9a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a29      	ldr	r2, [pc, #164]	; (800526c <TIM_Base_SetConfig+0x124>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00b      	beq.n	80051e2 <TIM_Base_SetConfig+0x9a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a28      	ldr	r2, [pc, #160]	; (8005270 <TIM_Base_SetConfig+0x128>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d007      	beq.n	80051e2 <TIM_Base_SetConfig+0x9a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a27      	ldr	r2, [pc, #156]	; (8005274 <TIM_Base_SetConfig+0x12c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_Base_SetConfig+0x9a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a26      	ldr	r2, [pc, #152]	; (8005278 <TIM_Base_SetConfig+0x130>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d108      	bne.n	80051f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a10      	ldr	r2, [pc, #64]	; (800525c <TIM_Base_SetConfig+0x114>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00f      	beq.n	8005240 <TIM_Base_SetConfig+0xf8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a12      	ldr	r2, [pc, #72]	; (800526c <TIM_Base_SetConfig+0x124>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00b      	beq.n	8005240 <TIM_Base_SetConfig+0xf8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a11      	ldr	r2, [pc, #68]	; (8005270 <TIM_Base_SetConfig+0x128>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <TIM_Base_SetConfig+0xf8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a10      	ldr	r2, [pc, #64]	; (8005274 <TIM_Base_SetConfig+0x12c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_Base_SetConfig+0xf8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a0f      	ldr	r2, [pc, #60]	; (8005278 <TIM_Base_SetConfig+0x130>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d103      	bne.n	8005248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	615a      	str	r2, [r3, #20]
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40000400 	.word	0x40000400
 8005264:	40000800 	.word	0x40000800
 8005268:	40000c00 	.word	0x40000c00
 800526c:	40013400 	.word	0x40013400
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800

0800527c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f023 0201 	bic.w	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0303 	bic.w	r3, r3, #3
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f023 0302 	bic.w	r3, r3, #2
 80052c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <TIM_OC1_SetConfig+0x10c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00f      	beq.n	80052fc <TIM_OC1_SetConfig+0x80>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a2b      	ldr	r2, [pc, #172]	; (800538c <TIM_OC1_SetConfig+0x110>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_OC1_SetConfig+0x80>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <TIM_OC1_SetConfig+0x114>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_OC1_SetConfig+0x80>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a29      	ldr	r2, [pc, #164]	; (8005394 <TIM_OC1_SetConfig+0x118>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC1_SetConfig+0x80>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a28      	ldr	r2, [pc, #160]	; (8005398 <TIM_OC1_SetConfig+0x11c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d10c      	bne.n	8005316 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0308 	bic.w	r3, r3, #8
 8005302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f023 0304 	bic.w	r3, r3, #4
 8005314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <TIM_OC1_SetConfig+0x10c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00f      	beq.n	800533e <TIM_OC1_SetConfig+0xc2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1a      	ldr	r2, [pc, #104]	; (800538c <TIM_OC1_SetConfig+0x110>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_OC1_SetConfig+0xc2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a19      	ldr	r2, [pc, #100]	; (8005390 <TIM_OC1_SetConfig+0x114>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_OC1_SetConfig+0xc2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a18      	ldr	r2, [pc, #96]	; (8005394 <TIM_OC1_SetConfig+0x118>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_OC1_SetConfig+0xc2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a17      	ldr	r2, [pc, #92]	; (8005398 <TIM_OC1_SetConfig+0x11c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d111      	bne.n	8005362 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800534c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	621a      	str	r2, [r3, #32]
}
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40013400 	.word	0x40013400
 8005390:	40014000 	.word	0x40014000
 8005394:	40014400 	.word	0x40014400
 8005398:	40014800 	.word	0x40014800

0800539c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f023 0210 	bic.w	r2, r3, #16
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0320 	bic.w	r3, r3, #32
 80053ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a28      	ldr	r2, [pc, #160]	; (800549c <TIM_OC2_SetConfig+0x100>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_OC2_SetConfig+0x6c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <TIM_OC2_SetConfig+0x104>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d10d      	bne.n	8005424 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800540e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005422:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a1d      	ldr	r2, [pc, #116]	; (800549c <TIM_OC2_SetConfig+0x100>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00f      	beq.n	800544c <TIM_OC2_SetConfig+0xb0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <TIM_OC2_SetConfig+0x104>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00b      	beq.n	800544c <TIM_OC2_SetConfig+0xb0>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <TIM_OC2_SetConfig+0x108>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <TIM_OC2_SetConfig+0xb0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a1a      	ldr	r2, [pc, #104]	; (80054a8 <TIM_OC2_SetConfig+0x10c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_OC2_SetConfig+0xb0>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a19      	ldr	r2, [pc, #100]	; (80054ac <TIM_OC2_SetConfig+0x110>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d113      	bne.n	8005474 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800545a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40013400 	.word	0x40013400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800

080054b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a27      	ldr	r2, [pc, #156]	; (80055ac <TIM_OC3_SetConfig+0xfc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_OC3_SetConfig+0x6a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a26      	ldr	r2, [pc, #152]	; (80055b0 <TIM_OC3_SetConfig+0x100>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d10d      	bne.n	8005536 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <TIM_OC3_SetConfig+0xfc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00f      	beq.n	800555e <TIM_OC3_SetConfig+0xae>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <TIM_OC3_SetConfig+0x100>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00b      	beq.n	800555e <TIM_OC3_SetConfig+0xae>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a1a      	ldr	r2, [pc, #104]	; (80055b4 <TIM_OC3_SetConfig+0x104>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d007      	beq.n	800555e <TIM_OC3_SetConfig+0xae>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <TIM_OC3_SetConfig+0x108>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d003      	beq.n	800555e <TIM_OC3_SetConfig+0xae>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a18      	ldr	r2, [pc, #96]	; (80055bc <TIM_OC3_SetConfig+0x10c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d113      	bne.n	8005586 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800556c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	621a      	str	r2, [r3, #32]
}
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40013400 	.word	0x40013400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40014400 	.word	0x40014400
 80055bc:	40014800 	.word	0x40014800

080055c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800560e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	031b      	lsls	r3, r3, #12
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a18      	ldr	r2, [pc, #96]	; (8005680 <TIM_OC4_SetConfig+0xc0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00f      	beq.n	8005644 <TIM_OC4_SetConfig+0x84>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a17      	ldr	r2, [pc, #92]	; (8005684 <TIM_OC4_SetConfig+0xc4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00b      	beq.n	8005644 <TIM_OC4_SetConfig+0x84>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a16      	ldr	r2, [pc, #88]	; (8005688 <TIM_OC4_SetConfig+0xc8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d007      	beq.n	8005644 <TIM_OC4_SetConfig+0x84>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a15      	ldr	r2, [pc, #84]	; (800568c <TIM_OC4_SetConfig+0xcc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_OC4_SetConfig+0x84>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a14      	ldr	r2, [pc, #80]	; (8005690 <TIM_OC4_SetConfig+0xd0>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d109      	bne.n	8005658 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800564a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	019b      	lsls	r3, r3, #6
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40013400 	.word	0x40013400
 8005688:	40014000 	.word	0x40014000
 800568c:	40014400 	.word	0x40014400
 8005690:	40014800 	.word	0x40014800

08005694 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	041b      	lsls	r3, r3, #16
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a17      	ldr	r2, [pc, #92]	; (8005748 <TIM_OC5_SetConfig+0xb4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00f      	beq.n	800570e <TIM_OC5_SetConfig+0x7a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a16      	ldr	r2, [pc, #88]	; (800574c <TIM_OC5_SetConfig+0xb8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_OC5_SetConfig+0x7a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a15      	ldr	r2, [pc, #84]	; (8005750 <TIM_OC5_SetConfig+0xbc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_OC5_SetConfig+0x7a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a14      	ldr	r2, [pc, #80]	; (8005754 <TIM_OC5_SetConfig+0xc0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_OC5_SetConfig+0x7a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a13      	ldr	r2, [pc, #76]	; (8005758 <TIM_OC5_SetConfig+0xc4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d109      	bne.n	8005722 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005714:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	621a      	str	r2, [r3, #32]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40012c00 	.word	0x40012c00
 800574c:	40013400 	.word	0x40013400
 8005750:	40014000 	.word	0x40014000
 8005754:	40014400 	.word	0x40014400
 8005758:	40014800 	.word	0x40014800

0800575c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800578a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	051b      	lsls	r3, r3, #20
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a18      	ldr	r2, [pc, #96]	; (8005814 <TIM_OC6_SetConfig+0xb8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00f      	beq.n	80057d8 <TIM_OC6_SetConfig+0x7c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a17      	ldr	r2, [pc, #92]	; (8005818 <TIM_OC6_SetConfig+0xbc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_OC6_SetConfig+0x7c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a16      	ldr	r2, [pc, #88]	; (800581c <TIM_OC6_SetConfig+0xc0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_OC6_SetConfig+0x7c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a15      	ldr	r2, [pc, #84]	; (8005820 <TIM_OC6_SetConfig+0xc4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_OC6_SetConfig+0x7c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a14      	ldr	r2, [pc, #80]	; (8005824 <TIM_OC6_SetConfig+0xc8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d109      	bne.n	80057ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	029b      	lsls	r3, r3, #10
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	40014400 	.word	0x40014400
 8005824:	40014800 	.word	0x40014800

08005828 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005844:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005856:	f023 0307 	bic.w	r3, r3, #7
 800585a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b70      	cmp	r3, #112	; 0x70
 8005874:	d01a      	beq.n	80058ac <TIM_SlaveTimer_SetConfig+0x84>
 8005876:	2b70      	cmp	r3, #112	; 0x70
 8005878:	d860      	bhi.n	800593c <TIM_SlaveTimer_SetConfig+0x114>
 800587a:	2b60      	cmp	r3, #96	; 0x60
 800587c:	d054      	beq.n	8005928 <TIM_SlaveTimer_SetConfig+0x100>
 800587e:	2b60      	cmp	r3, #96	; 0x60
 8005880:	d85c      	bhi.n	800593c <TIM_SlaveTimer_SetConfig+0x114>
 8005882:	2b50      	cmp	r3, #80	; 0x50
 8005884:	d046      	beq.n	8005914 <TIM_SlaveTimer_SetConfig+0xec>
 8005886:	2b50      	cmp	r3, #80	; 0x50
 8005888:	d858      	bhi.n	800593c <TIM_SlaveTimer_SetConfig+0x114>
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d019      	beq.n	80058c2 <TIM_SlaveTimer_SetConfig+0x9a>
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d854      	bhi.n	800593c <TIM_SlaveTimer_SetConfig+0x114>
 8005892:	2b30      	cmp	r3, #48	; 0x30
 8005894:	d055      	beq.n	8005942 <TIM_SlaveTimer_SetConfig+0x11a>
 8005896:	2b30      	cmp	r3, #48	; 0x30
 8005898:	d850      	bhi.n	800593c <TIM_SlaveTimer_SetConfig+0x114>
 800589a:	2b20      	cmp	r3, #32
 800589c:	d051      	beq.n	8005942 <TIM_SlaveTimer_SetConfig+0x11a>
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d84c      	bhi.n	800593c <TIM_SlaveTimer_SetConfig+0x114>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d04d      	beq.n	8005942 <TIM_SlaveTimer_SetConfig+0x11a>
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d04b      	beq.n	8005942 <TIM_SlaveTimer_SetConfig+0x11a>
 80058aa:	e047      	b.n	800593c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68d9      	ldr	r1, [r3, #12]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f000 f9e6 	bl	8005c8c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80058c0:	e040      	b.n	8005944 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b05      	cmp	r3, #5
 80058c8:	d101      	bne.n	80058ce <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e03b      	b.n	8005946 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	621a      	str	r2, [r3, #32]
      break;
 8005912:	e017      	b.n	8005944 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	6899      	ldr	r1, [r3, #8]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	461a      	mov	r2, r3
 8005922:	f000 f883 	bl	8005a2c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005926:	e00d      	b.n	8005944 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	6899      	ldr	r1, [r3, #8]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	461a      	mov	r2, r3
 8005936:	f000 f8e5 	bl	8005b04 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800593a:	e003      	b.n	8005944 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	75fb      	strb	r3, [r7, #23]
      break;
 8005940:	e000      	b.n	8005944 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005942:	bf00      	nop
  }

  return status;
 8005944:	7dfb      	ldrb	r3, [r7, #23]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f023 0201 	bic.w	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4a26      	ldr	r2, [pc, #152]	; (8005a14 <TIM_TI1_SetConfig+0xc4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d017      	beq.n	80059ae <TIM_TI1_SetConfig+0x5e>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005984:	d013      	beq.n	80059ae <TIM_TI1_SetConfig+0x5e>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4a23      	ldr	r2, [pc, #140]	; (8005a18 <TIM_TI1_SetConfig+0xc8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00f      	beq.n	80059ae <TIM_TI1_SetConfig+0x5e>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4a22      	ldr	r2, [pc, #136]	; (8005a1c <TIM_TI1_SetConfig+0xcc>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00b      	beq.n	80059ae <TIM_TI1_SetConfig+0x5e>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a21      	ldr	r2, [pc, #132]	; (8005a20 <TIM_TI1_SetConfig+0xd0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <TIM_TI1_SetConfig+0x5e>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4a20      	ldr	r2, [pc, #128]	; (8005a24 <TIM_TI1_SetConfig+0xd4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_TI1_SetConfig+0x5e>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <TIM_TI1_SetConfig+0xd8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <TIM_TI1_SetConfig+0x62>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <TIM_TI1_SetConfig+0x64>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0303 	bic.w	r3, r3, #3
 80059be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e003      	b.n	80059d2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f023 030a 	bic.w	r3, r3, #10
 80059ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f003 030a 	and.w	r3, r3, #10
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40013400 	.word	0x40013400
 8005a28:	40014000 	.word	0x40014000

08005a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f023 0201 	bic.w	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f023 030a 	bic.w	r3, r3, #10
 8005a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b087      	sub	sp, #28
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f023 0210 	bic.w	r2, r3, #16
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	031b      	lsls	r3, r3, #12
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005adc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	621a      	str	r2, [r3, #32]
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f023 0210 	bic.w	r2, r3, #16
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	031b      	lsls	r3, r3, #12
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	621a      	str	r2, [r3, #32]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 0303 	bic.w	r3, r3, #3
 8005b90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ba0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005bb4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	621a      	str	r2, [r3, #32]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c1a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	031b      	lsls	r3, r3, #12
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005c2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	031b      	lsls	r3, r3, #12
 8005c34:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b085      	sub	sp, #20
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f043 0307 	orr.w	r3, r3, #7
 8005c78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	609a      	str	r2, [r3, #8]
}
 8005c80:	bf00      	nop
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	021a      	lsls	r2, r3, #8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	609a      	str	r2, [r3, #8]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	2201      	movs	r2, #1
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1a      	ldr	r2, [r3, #32]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	43db      	mvns	r3, r3
 8005cee:	401a      	ands	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1a      	ldr	r2, [r3, #32]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	fa01 f303 	lsl.w	r3, r1, r3
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e068      	b.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a2e      	ldr	r2, [pc, #184]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d108      	bne.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01d      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da2:	d018      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a1a      	ldr	r2, [pc, #104]	; (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00e      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a18      	ldr	r2, [pc, #96]	; (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a14      	ldr	r2, [pc, #80]	; (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10c      	bne.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40012c00 	.word	0x40012c00
 8005e14:	40013400 	.word	0x40013400
 8005e18:	40000400 	.word	0x40000400
 8005e1c:	40000800 	.word	0x40000800
 8005e20:	40000c00 	.word	0x40000c00
 8005e24:	40014000 	.word	0x40014000

08005e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e040      	b.n	8005ef8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fb fda4 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2224      	movs	r2, #36	; 0x24
 8005e90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f8c0 	bl	8006028 <UART_SetConfig>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e022      	b.n	8005ef8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fb6c 	bl	8006598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fbf3 	bl	80066dc <UART_CheckIdleState>
 8005ef6:	4603      	mov	r3, r0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	; 0x28
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	f040 8082 	bne.w	800601e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_UART_Transmit+0x26>
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e07a      	b.n	8006020 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_UART_Transmit+0x38>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e073      	b.n	8006020 <HAL_UART_Transmit+0x120>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2221      	movs	r2, #33	; 0x21
 8005f4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f4e:	f7fb fecf 	bl	8001cf0 <HAL_GetTick>
 8005f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6c:	d108      	bne.n	8005f80 <HAL_UART_Transmit+0x80>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e003      	b.n	8005f88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f90:	e02d      	b.n	8005fee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2180      	movs	r1, #128	; 0x80
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 fbe6 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e039      	b.n	8006020 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	881a      	ldrh	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fbe:	b292      	uxth	r2, r2
 8005fc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e008      	b.n	8005fdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	b292      	uxth	r2, r2
 8005fd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1cb      	bne.n	8005f92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2200      	movs	r2, #0
 8006002:	2140      	movs	r1, #64	; 0x40
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fbb2 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e005      	b.n	8006020 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	e000      	b.n	8006020 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800601e:	2302      	movs	r3, #2
  }
}
 8006020:	4618      	mov	r0, r3
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800602c:	b08a      	sub	sp, #40	; 0x28
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	431a      	orrs	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	431a      	orrs	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	4313      	orrs	r3, r2
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4ba4      	ldr	r3, [pc, #656]	; (80062e8 <UART_SetConfig+0x2c0>)
 8006058:	4013      	ands	r3, r2
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006060:	430b      	orrs	r3, r1
 8006062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a99      	ldr	r2, [pc, #612]	; (80062ec <UART_SetConfig+0x2c4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006090:	4313      	orrs	r3, r2
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a4:	430a      	orrs	r2, r1
 80060a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a90      	ldr	r2, [pc, #576]	; (80062f0 <UART_SetConfig+0x2c8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d126      	bne.n	8006100 <UART_SetConfig+0xd8>
 80060b2:	4b90      	ldr	r3, [pc, #576]	; (80062f4 <UART_SetConfig+0x2cc>)
 80060b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b8:	f003 0303 	and.w	r3, r3, #3
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d81b      	bhi.n	80060f8 <UART_SetConfig+0xd0>
 80060c0:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <UART_SetConfig+0xa0>)
 80060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c6:	bf00      	nop
 80060c8:	080060d9 	.word	0x080060d9
 80060cc:	080060e9 	.word	0x080060e9
 80060d0:	080060e1 	.word	0x080060e1
 80060d4:	080060f1 	.word	0x080060f1
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060de:	e116      	b.n	800630e <UART_SetConfig+0x2e6>
 80060e0:	2302      	movs	r3, #2
 80060e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e6:	e112      	b.n	800630e <UART_SetConfig+0x2e6>
 80060e8:	2304      	movs	r3, #4
 80060ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ee:	e10e      	b.n	800630e <UART_SetConfig+0x2e6>
 80060f0:	2308      	movs	r3, #8
 80060f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060f6:	e10a      	b.n	800630e <UART_SetConfig+0x2e6>
 80060f8:	2310      	movs	r3, #16
 80060fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060fe:	e106      	b.n	800630e <UART_SetConfig+0x2e6>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a7c      	ldr	r2, [pc, #496]	; (80062f8 <UART_SetConfig+0x2d0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d138      	bne.n	800617c <UART_SetConfig+0x154>
 800610a:	4b7a      	ldr	r3, [pc, #488]	; (80062f4 <UART_SetConfig+0x2cc>)
 800610c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006110:	f003 030c 	and.w	r3, r3, #12
 8006114:	2b0c      	cmp	r3, #12
 8006116:	d82d      	bhi.n	8006174 <UART_SetConfig+0x14c>
 8006118:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <UART_SetConfig+0xf8>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	08006155 	.word	0x08006155
 8006124:	08006175 	.word	0x08006175
 8006128:	08006175 	.word	0x08006175
 800612c:	08006175 	.word	0x08006175
 8006130:	08006165 	.word	0x08006165
 8006134:	08006175 	.word	0x08006175
 8006138:	08006175 	.word	0x08006175
 800613c:	08006175 	.word	0x08006175
 8006140:	0800615d 	.word	0x0800615d
 8006144:	08006175 	.word	0x08006175
 8006148:	08006175 	.word	0x08006175
 800614c:	08006175 	.word	0x08006175
 8006150:	0800616d 	.word	0x0800616d
 8006154:	2300      	movs	r3, #0
 8006156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800615a:	e0d8      	b.n	800630e <UART_SetConfig+0x2e6>
 800615c:	2302      	movs	r3, #2
 800615e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006162:	e0d4      	b.n	800630e <UART_SetConfig+0x2e6>
 8006164:	2304      	movs	r3, #4
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800616a:	e0d0      	b.n	800630e <UART_SetConfig+0x2e6>
 800616c:	2308      	movs	r3, #8
 800616e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006172:	e0cc      	b.n	800630e <UART_SetConfig+0x2e6>
 8006174:	2310      	movs	r3, #16
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617a:	e0c8      	b.n	800630e <UART_SetConfig+0x2e6>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a5e      	ldr	r2, [pc, #376]	; (80062fc <UART_SetConfig+0x2d4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d125      	bne.n	80061d2 <UART_SetConfig+0x1aa>
 8006186:	4b5b      	ldr	r3, [pc, #364]	; (80062f4 <UART_SetConfig+0x2cc>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006190:	2b30      	cmp	r3, #48	; 0x30
 8006192:	d016      	beq.n	80061c2 <UART_SetConfig+0x19a>
 8006194:	2b30      	cmp	r3, #48	; 0x30
 8006196:	d818      	bhi.n	80061ca <UART_SetConfig+0x1a2>
 8006198:	2b20      	cmp	r3, #32
 800619a:	d00a      	beq.n	80061b2 <UART_SetConfig+0x18a>
 800619c:	2b20      	cmp	r3, #32
 800619e:	d814      	bhi.n	80061ca <UART_SetConfig+0x1a2>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <UART_SetConfig+0x182>
 80061a4:	2b10      	cmp	r3, #16
 80061a6:	d008      	beq.n	80061ba <UART_SetConfig+0x192>
 80061a8:	e00f      	b.n	80061ca <UART_SetConfig+0x1a2>
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b0:	e0ad      	b.n	800630e <UART_SetConfig+0x2e6>
 80061b2:	2302      	movs	r3, #2
 80061b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b8:	e0a9      	b.n	800630e <UART_SetConfig+0x2e6>
 80061ba:	2304      	movs	r3, #4
 80061bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061c0:	e0a5      	b.n	800630e <UART_SetConfig+0x2e6>
 80061c2:	2308      	movs	r3, #8
 80061c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061c8:	e0a1      	b.n	800630e <UART_SetConfig+0x2e6>
 80061ca:	2310      	movs	r3, #16
 80061cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d0:	e09d      	b.n	800630e <UART_SetConfig+0x2e6>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a4a      	ldr	r2, [pc, #296]	; (8006300 <UART_SetConfig+0x2d8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d125      	bne.n	8006228 <UART_SetConfig+0x200>
 80061dc:	4b45      	ldr	r3, [pc, #276]	; (80062f4 <UART_SetConfig+0x2cc>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061e6:	2bc0      	cmp	r3, #192	; 0xc0
 80061e8:	d016      	beq.n	8006218 <UART_SetConfig+0x1f0>
 80061ea:	2bc0      	cmp	r3, #192	; 0xc0
 80061ec:	d818      	bhi.n	8006220 <UART_SetConfig+0x1f8>
 80061ee:	2b80      	cmp	r3, #128	; 0x80
 80061f0:	d00a      	beq.n	8006208 <UART_SetConfig+0x1e0>
 80061f2:	2b80      	cmp	r3, #128	; 0x80
 80061f4:	d814      	bhi.n	8006220 <UART_SetConfig+0x1f8>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <UART_SetConfig+0x1d8>
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	d008      	beq.n	8006210 <UART_SetConfig+0x1e8>
 80061fe:	e00f      	b.n	8006220 <UART_SetConfig+0x1f8>
 8006200:	2300      	movs	r3, #0
 8006202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006206:	e082      	b.n	800630e <UART_SetConfig+0x2e6>
 8006208:	2302      	movs	r3, #2
 800620a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620e:	e07e      	b.n	800630e <UART_SetConfig+0x2e6>
 8006210:	2304      	movs	r3, #4
 8006212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006216:	e07a      	b.n	800630e <UART_SetConfig+0x2e6>
 8006218:	2308      	movs	r3, #8
 800621a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800621e:	e076      	b.n	800630e <UART_SetConfig+0x2e6>
 8006220:	2310      	movs	r3, #16
 8006222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006226:	e072      	b.n	800630e <UART_SetConfig+0x2e6>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a35      	ldr	r2, [pc, #212]	; (8006304 <UART_SetConfig+0x2dc>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d12a      	bne.n	8006288 <UART_SetConfig+0x260>
 8006232:	4b30      	ldr	r3, [pc, #192]	; (80062f4 <UART_SetConfig+0x2cc>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006240:	d01a      	beq.n	8006278 <UART_SetConfig+0x250>
 8006242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006246:	d81b      	bhi.n	8006280 <UART_SetConfig+0x258>
 8006248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624c:	d00c      	beq.n	8006268 <UART_SetConfig+0x240>
 800624e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006252:	d815      	bhi.n	8006280 <UART_SetConfig+0x258>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <UART_SetConfig+0x238>
 8006258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800625c:	d008      	beq.n	8006270 <UART_SetConfig+0x248>
 800625e:	e00f      	b.n	8006280 <UART_SetConfig+0x258>
 8006260:	2300      	movs	r3, #0
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006266:	e052      	b.n	800630e <UART_SetConfig+0x2e6>
 8006268:	2302      	movs	r3, #2
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626e:	e04e      	b.n	800630e <UART_SetConfig+0x2e6>
 8006270:	2304      	movs	r3, #4
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006276:	e04a      	b.n	800630e <UART_SetConfig+0x2e6>
 8006278:	2308      	movs	r3, #8
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627e:	e046      	b.n	800630e <UART_SetConfig+0x2e6>
 8006280:	2310      	movs	r3, #16
 8006282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006286:	e042      	b.n	800630e <UART_SetConfig+0x2e6>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a17      	ldr	r2, [pc, #92]	; (80062ec <UART_SetConfig+0x2c4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d13a      	bne.n	8006308 <UART_SetConfig+0x2e0>
 8006292:	4b18      	ldr	r3, [pc, #96]	; (80062f4 <UART_SetConfig+0x2cc>)
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800629c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a0:	d01a      	beq.n	80062d8 <UART_SetConfig+0x2b0>
 80062a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a6:	d81b      	bhi.n	80062e0 <UART_SetConfig+0x2b8>
 80062a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ac:	d00c      	beq.n	80062c8 <UART_SetConfig+0x2a0>
 80062ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062b2:	d815      	bhi.n	80062e0 <UART_SetConfig+0x2b8>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <UART_SetConfig+0x298>
 80062b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062bc:	d008      	beq.n	80062d0 <UART_SetConfig+0x2a8>
 80062be:	e00f      	b.n	80062e0 <UART_SetConfig+0x2b8>
 80062c0:	2300      	movs	r3, #0
 80062c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c6:	e022      	b.n	800630e <UART_SetConfig+0x2e6>
 80062c8:	2302      	movs	r3, #2
 80062ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ce:	e01e      	b.n	800630e <UART_SetConfig+0x2e6>
 80062d0:	2304      	movs	r3, #4
 80062d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d6:	e01a      	b.n	800630e <UART_SetConfig+0x2e6>
 80062d8:	2308      	movs	r3, #8
 80062da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062de:	e016      	b.n	800630e <UART_SetConfig+0x2e6>
 80062e0:	2310      	movs	r3, #16
 80062e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e6:	e012      	b.n	800630e <UART_SetConfig+0x2e6>
 80062e8:	efff69f3 	.word	0xefff69f3
 80062ec:	40008000 	.word	0x40008000
 80062f0:	40013800 	.word	0x40013800
 80062f4:	40021000 	.word	0x40021000
 80062f8:	40004400 	.word	0x40004400
 80062fc:	40004800 	.word	0x40004800
 8006300:	40004c00 	.word	0x40004c00
 8006304:	40005000 	.word	0x40005000
 8006308:	2310      	movs	r3, #16
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a9f      	ldr	r2, [pc, #636]	; (8006590 <UART_SetConfig+0x568>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d17a      	bne.n	800640e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800631c:	2b08      	cmp	r3, #8
 800631e:	d824      	bhi.n	800636a <UART_SetConfig+0x342>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <UART_SetConfig+0x300>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	0800634d 	.word	0x0800634d
 800632c:	0800636b 	.word	0x0800636b
 8006330:	08006355 	.word	0x08006355
 8006334:	0800636b 	.word	0x0800636b
 8006338:	0800635b 	.word	0x0800635b
 800633c:	0800636b 	.word	0x0800636b
 8006340:	0800636b 	.word	0x0800636b
 8006344:	0800636b 	.word	0x0800636b
 8006348:	08006363 	.word	0x08006363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800634c:	f7fc ff8c 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8006350:	61f8      	str	r0, [r7, #28]
        break;
 8006352:	e010      	b.n	8006376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006354:	4b8f      	ldr	r3, [pc, #572]	; (8006594 <UART_SetConfig+0x56c>)
 8006356:	61fb      	str	r3, [r7, #28]
        break;
 8006358:	e00d      	b.n	8006376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635a:	f7fc feed 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 800635e:	61f8      	str	r0, [r7, #28]
        break;
 8006360:	e009      	b.n	8006376 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006366:	61fb      	str	r3, [r7, #28]
        break;
 8006368:	e005      	b.n	8006376 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006374:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 80fb 	beq.w	8006574 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	4413      	add	r3, r2
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	429a      	cmp	r2, r3
 800638c:	d305      	bcc.n	800639a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	429a      	cmp	r2, r3
 8006398:	d903      	bls.n	80063a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063a0:	e0e8      	b.n	8006574 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	2200      	movs	r2, #0
 80063a6:	461c      	mov	r4, r3
 80063a8:	4615      	mov	r5, r2
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	022b      	lsls	r3, r5, #8
 80063b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80063b8:	0222      	lsls	r2, r4, #8
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	6849      	ldr	r1, [r1, #4]
 80063be:	0849      	lsrs	r1, r1, #1
 80063c0:	2000      	movs	r0, #0
 80063c2:	4688      	mov	r8, r1
 80063c4:	4681      	mov	r9, r0
 80063c6:	eb12 0a08 	adds.w	sl, r2, r8
 80063ca:	eb43 0b09 	adc.w	fp, r3, r9
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	603b      	str	r3, [r7, #0]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063dc:	4650      	mov	r0, sl
 80063de:	4659      	mov	r1, fp
 80063e0:	f7f9 ff46 	bl	8000270 <__aeabi_uldivmod>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4613      	mov	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063f2:	d308      	bcc.n	8006406 <UART_SetConfig+0x3de>
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063fa:	d204      	bcs.n	8006406 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	60da      	str	r2, [r3, #12]
 8006404:	e0b6      	b.n	8006574 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800640c:	e0b2      	b.n	8006574 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006416:	d15e      	bne.n	80064d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006418:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800641c:	2b08      	cmp	r3, #8
 800641e:	d828      	bhi.n	8006472 <UART_SetConfig+0x44a>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <UART_SetConfig+0x400>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	0800644d 	.word	0x0800644d
 800642c:	08006455 	.word	0x08006455
 8006430:	0800645d 	.word	0x0800645d
 8006434:	08006473 	.word	0x08006473
 8006438:	08006463 	.word	0x08006463
 800643c:	08006473 	.word	0x08006473
 8006440:	08006473 	.word	0x08006473
 8006444:	08006473 	.word	0x08006473
 8006448:	0800646b 	.word	0x0800646b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800644c:	f7fc ff0c 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8006450:	61f8      	str	r0, [r7, #28]
        break;
 8006452:	e014      	b.n	800647e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006454:	f7fc ff1e 	bl	8003294 <HAL_RCC_GetPCLK2Freq>
 8006458:	61f8      	str	r0, [r7, #28]
        break;
 800645a:	e010      	b.n	800647e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800645c:	4b4d      	ldr	r3, [pc, #308]	; (8006594 <UART_SetConfig+0x56c>)
 800645e:	61fb      	str	r3, [r7, #28]
        break;
 8006460:	e00d      	b.n	800647e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006462:	f7fc fe69 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8006466:	61f8      	str	r0, [r7, #28]
        break;
 8006468:	e009      	b.n	800647e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800646a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646e:	61fb      	str	r3, [r7, #28]
        break;
 8006470:	e005      	b.n	800647e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800647c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d077      	beq.n	8006574 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	005a      	lsls	r2, r3, #1
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	441a      	add	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	fbb2 f3f3 	udiv	r3, r2, r3
 8006498:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b0f      	cmp	r3, #15
 800649e:	d916      	bls.n	80064ce <UART_SetConfig+0x4a6>
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a6:	d212      	bcs.n	80064ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f023 030f 	bic.w	r3, r3, #15
 80064b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	b29a      	uxth	r2, r3
 80064be:	8afb      	ldrh	r3, [r7, #22]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	8afa      	ldrh	r2, [r7, #22]
 80064ca:	60da      	str	r2, [r3, #12]
 80064cc:	e052      	b.n	8006574 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064d4:	e04e      	b.n	8006574 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d827      	bhi.n	800652e <UART_SetConfig+0x506>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <UART_SetConfig+0x4bc>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	08006509 	.word	0x08006509
 80064e8:	08006511 	.word	0x08006511
 80064ec:	08006519 	.word	0x08006519
 80064f0:	0800652f 	.word	0x0800652f
 80064f4:	0800651f 	.word	0x0800651f
 80064f8:	0800652f 	.word	0x0800652f
 80064fc:	0800652f 	.word	0x0800652f
 8006500:	0800652f 	.word	0x0800652f
 8006504:	08006527 	.word	0x08006527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006508:	f7fc feae 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 800650c:	61f8      	str	r0, [r7, #28]
        break;
 800650e:	e014      	b.n	800653a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006510:	f7fc fec0 	bl	8003294 <HAL_RCC_GetPCLK2Freq>
 8006514:	61f8      	str	r0, [r7, #28]
        break;
 8006516:	e010      	b.n	800653a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006518:	4b1e      	ldr	r3, [pc, #120]	; (8006594 <UART_SetConfig+0x56c>)
 800651a:	61fb      	str	r3, [r7, #28]
        break;
 800651c:	e00d      	b.n	800653a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800651e:	f7fc fe0b 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8006522:	61f8      	str	r0, [r7, #28]
        break;
 8006524:	e009      	b.n	800653a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800652a:	61fb      	str	r3, [r7, #28]
        break;
 800652c:	e005      	b.n	800653a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006538:	bf00      	nop
    }

    if (pclk != 0U)
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d019      	beq.n	8006574 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	085a      	lsrs	r2, r3, #1
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	441a      	add	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006552:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	2b0f      	cmp	r3, #15
 8006558:	d909      	bls.n	800656e <UART_SetConfig+0x546>
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006560:	d205      	bcs.n	800656e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60da      	str	r2, [r3, #12]
 800656c:	e002      	b.n	8006574 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006580:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006584:	4618      	mov	r0, r3
 8006586:	3728      	adds	r7, #40	; 0x28
 8006588:	46bd      	mov	sp, r7
 800658a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800658e:	bf00      	nop
 8006590:	40008000 	.word	0x40008000
 8006594:	00f42400 	.word	0x00f42400

08006598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01a      	beq.n	80066ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006696:	d10a      	bne.n	80066ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	605a      	str	r2, [r3, #4]
  }
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066ec:	f7fb fb00 	bl	8001cf0 <HAL_GetTick>
 80066f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d10e      	bne.n	800671e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f82d 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e023      	b.n	8006766 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b04      	cmp	r3, #4
 800672a:	d10e      	bne.n	800674a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800672c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f817 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e00d      	b.n	8006766 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b09c      	sub	sp, #112	; 0x70
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	4613      	mov	r3, r2
 800677c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677e:	e0a5      	b.n	80068cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	f000 80a1 	beq.w	80068cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678a:	f7fb fab1 	bl	8001cf0 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006796:	429a      	cmp	r2, r3
 8006798:	d302      	bcc.n	80067a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800679a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800679c:	2b00      	cmp	r3, #0
 800679e:	d13e      	bne.n	800681e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067b4:	667b      	str	r3, [r7, #100]	; 0x64
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e6      	bne.n	80067a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3308      	adds	r3, #8
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	663b      	str	r3, [r7, #96]	; 0x60
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3308      	adds	r3, #8
 80067f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80067f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e5      	bne.n	80067d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e067      	b.n	80068ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d04f      	beq.n	80068cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683a:	d147      	bne.n	80068cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006844:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800685a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
 8006866:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800686a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e6      	bne.n	8006846 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3308      	adds	r3, #8
 800687e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	613b      	str	r3, [r7, #16]
   return(result);
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f023 0301 	bic.w	r3, r3, #1
 800688e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006898:	623a      	str	r2, [r7, #32]
 800689a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	69f9      	ldr	r1, [r7, #28]
 800689e:	6a3a      	ldr	r2, [r7, #32]
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e5      	bne.n	8006878 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e010      	b.n	80068ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	69da      	ldr	r2, [r3, #28]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4013      	ands	r3, r2
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	429a      	cmp	r2, r3
 80068da:	bf0c      	ite	eq
 80068dc:	2301      	moveq	r3, #1
 80068de:	2300      	movne	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	f43f af4a 	beq.w	8006780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3770      	adds	r7, #112	; 0x70
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <__errno>:
 80068f8:	4b01      	ldr	r3, [pc, #4]	; (8006900 <__errno+0x8>)
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	2000002c 	.word	0x2000002c

08006904 <__libc_init_array>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	4d0d      	ldr	r5, [pc, #52]	; (800693c <__libc_init_array+0x38>)
 8006908:	4c0d      	ldr	r4, [pc, #52]	; (8006940 <__libc_init_array+0x3c>)
 800690a:	1b64      	subs	r4, r4, r5
 800690c:	10a4      	asrs	r4, r4, #2
 800690e:	2600      	movs	r6, #0
 8006910:	42a6      	cmp	r6, r4
 8006912:	d109      	bne.n	8006928 <__libc_init_array+0x24>
 8006914:	4d0b      	ldr	r5, [pc, #44]	; (8006944 <__libc_init_array+0x40>)
 8006916:	4c0c      	ldr	r4, [pc, #48]	; (8006948 <__libc_init_array+0x44>)
 8006918:	f001 f8ce 	bl	8007ab8 <_init>
 800691c:	1b64      	subs	r4, r4, r5
 800691e:	10a4      	asrs	r4, r4, #2
 8006920:	2600      	movs	r6, #0
 8006922:	42a6      	cmp	r6, r4
 8006924:	d105      	bne.n	8006932 <__libc_init_array+0x2e>
 8006926:	bd70      	pop	{r4, r5, r6, pc}
 8006928:	f855 3b04 	ldr.w	r3, [r5], #4
 800692c:	4798      	blx	r3
 800692e:	3601      	adds	r6, #1
 8006930:	e7ee      	b.n	8006910 <__libc_init_array+0xc>
 8006932:	f855 3b04 	ldr.w	r3, [r5], #4
 8006936:	4798      	blx	r3
 8006938:	3601      	adds	r6, #1
 800693a:	e7f2      	b.n	8006922 <__libc_init_array+0x1e>
 800693c:	08007dac 	.word	0x08007dac
 8006940:	08007dac 	.word	0x08007dac
 8006944:	08007dac 	.word	0x08007dac
 8006948:	08007db0 	.word	0x08007db0

0800694c <memset>:
 800694c:	4402      	add	r2, r0
 800694e:	4603      	mov	r3, r0
 8006950:	4293      	cmp	r3, r2
 8006952:	d100      	bne.n	8006956 <memset+0xa>
 8006954:	4770      	bx	lr
 8006956:	f803 1b01 	strb.w	r1, [r3], #1
 800695a:	e7f9      	b.n	8006950 <memset+0x4>

0800695c <iprintf>:
 800695c:	b40f      	push	{r0, r1, r2, r3}
 800695e:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <iprintf+0x2c>)
 8006960:	b513      	push	{r0, r1, r4, lr}
 8006962:	681c      	ldr	r4, [r3, #0]
 8006964:	b124      	cbz	r4, 8006970 <iprintf+0x14>
 8006966:	69a3      	ldr	r3, [r4, #24]
 8006968:	b913      	cbnz	r3, 8006970 <iprintf+0x14>
 800696a:	4620      	mov	r0, r4
 800696c:	f000 f8d8 	bl	8006b20 <__sinit>
 8006970:	ab05      	add	r3, sp, #20
 8006972:	9a04      	ldr	r2, [sp, #16]
 8006974:	68a1      	ldr	r1, [r4, #8]
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	4620      	mov	r0, r4
 800697a:	f000 fa95 	bl	8006ea8 <_vfiprintf_r>
 800697e:	b002      	add	sp, #8
 8006980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006984:	b004      	add	sp, #16
 8006986:	4770      	bx	lr
 8006988:	2000002c 	.word	0x2000002c

0800698c <putchar>:
 800698c:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <putchar+0x28>)
 800698e:	b513      	push	{r0, r1, r4, lr}
 8006990:	681c      	ldr	r4, [r3, #0]
 8006992:	4601      	mov	r1, r0
 8006994:	b134      	cbz	r4, 80069a4 <putchar+0x18>
 8006996:	69a3      	ldr	r3, [r4, #24]
 8006998:	b923      	cbnz	r3, 80069a4 <putchar+0x18>
 800699a:	9001      	str	r0, [sp, #4]
 800699c:	4620      	mov	r0, r4
 800699e:	f000 f8bf 	bl	8006b20 <__sinit>
 80069a2:	9901      	ldr	r1, [sp, #4]
 80069a4:	68a2      	ldr	r2, [r4, #8]
 80069a6:	4620      	mov	r0, r4
 80069a8:	b002      	add	sp, #8
 80069aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ae:	f000 bd3f 	b.w	8007430 <_putc_r>
 80069b2:	bf00      	nop
 80069b4:	2000002c 	.word	0x2000002c

080069b8 <rand>:
 80069b8:	4b16      	ldr	r3, [pc, #88]	; (8006a14 <rand+0x5c>)
 80069ba:	b510      	push	{r4, lr}
 80069bc:	681c      	ldr	r4, [r3, #0]
 80069be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069c0:	b9b3      	cbnz	r3, 80069f0 <rand+0x38>
 80069c2:	2018      	movs	r0, #24
 80069c4:	f000 f95e 	bl	8006c84 <malloc>
 80069c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80069ca:	b928      	cbnz	r0, 80069d8 <rand+0x20>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <rand+0x60>)
 80069d0:	4812      	ldr	r0, [pc, #72]	; (8006a1c <rand+0x64>)
 80069d2:	214e      	movs	r1, #78	; 0x4e
 80069d4:	f000 f82e 	bl	8006a34 <__assert_func>
 80069d8:	4a11      	ldr	r2, [pc, #68]	; (8006a20 <rand+0x68>)
 80069da:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <rand+0x6c>)
 80069dc:	e9c0 2300 	strd	r2, r3, [r0]
 80069e0:	4b11      	ldr	r3, [pc, #68]	; (8006a28 <rand+0x70>)
 80069e2:	6083      	str	r3, [r0, #8]
 80069e4:	230b      	movs	r3, #11
 80069e6:	8183      	strh	r3, [r0, #12]
 80069e8:	2201      	movs	r2, #1
 80069ea:	2300      	movs	r3, #0
 80069ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80069f0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80069f2:	4a0e      	ldr	r2, [pc, #56]	; (8006a2c <rand+0x74>)
 80069f4:	6920      	ldr	r0, [r4, #16]
 80069f6:	6963      	ldr	r3, [r4, #20]
 80069f8:	490d      	ldr	r1, [pc, #52]	; (8006a30 <rand+0x78>)
 80069fa:	4342      	muls	r2, r0
 80069fc:	fb01 2203 	mla	r2, r1, r3, r2
 8006a00:	fba0 0101 	umull	r0, r1, r0, r1
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	eb42 0001 	adc.w	r0, r2, r1
 8006a0a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006a0e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006a12:	bd10      	pop	{r4, pc}
 8006a14:	2000002c 	.word	0x2000002c
 8006a18:	08007c60 	.word	0x08007c60
 8006a1c:	08007c77 	.word	0x08007c77
 8006a20:	abcd330e 	.word	0xabcd330e
 8006a24:	e66d1234 	.word	0xe66d1234
 8006a28:	0005deec 	.word	0x0005deec
 8006a2c:	5851f42d 	.word	0x5851f42d
 8006a30:	4c957f2d 	.word	0x4c957f2d

08006a34 <__assert_func>:
 8006a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a36:	4614      	mov	r4, r2
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <__assert_func+0x2c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4605      	mov	r5, r0
 8006a40:	68d8      	ldr	r0, [r3, #12]
 8006a42:	b14c      	cbz	r4, 8006a58 <__assert_func+0x24>
 8006a44:	4b07      	ldr	r3, [pc, #28]	; (8006a64 <__assert_func+0x30>)
 8006a46:	9100      	str	r1, [sp, #0]
 8006a48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a4c:	4906      	ldr	r1, [pc, #24]	; (8006a68 <__assert_func+0x34>)
 8006a4e:	462b      	mov	r3, r5
 8006a50:	f000 f8e4 	bl	8006c1c <fiprintf>
 8006a54:	f000 fe5a 	bl	800770c <abort>
 8006a58:	4b04      	ldr	r3, [pc, #16]	; (8006a6c <__assert_func+0x38>)
 8006a5a:	461c      	mov	r4, r3
 8006a5c:	e7f3      	b.n	8006a46 <__assert_func+0x12>
 8006a5e:	bf00      	nop
 8006a60:	2000002c 	.word	0x2000002c
 8006a64:	08007cd2 	.word	0x08007cd2
 8006a68:	08007cdf 	.word	0x08007cdf
 8006a6c:	08007d0d 	.word	0x08007d0d

08006a70 <std>:
 8006a70:	2300      	movs	r3, #0
 8006a72:	b510      	push	{r4, lr}
 8006a74:	4604      	mov	r4, r0
 8006a76:	e9c0 3300 	strd	r3, r3, [r0]
 8006a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a7e:	6083      	str	r3, [r0, #8]
 8006a80:	8181      	strh	r1, [r0, #12]
 8006a82:	6643      	str	r3, [r0, #100]	; 0x64
 8006a84:	81c2      	strh	r2, [r0, #14]
 8006a86:	6183      	str	r3, [r0, #24]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	305c      	adds	r0, #92	; 0x5c
 8006a8e:	f7ff ff5d 	bl	800694c <memset>
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <std+0x38>)
 8006a94:	6263      	str	r3, [r4, #36]	; 0x24
 8006a96:	4b05      	ldr	r3, [pc, #20]	; (8006aac <std+0x3c>)
 8006a98:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a9a:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <std+0x40>)
 8006a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a9e:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <std+0x44>)
 8006aa0:	6224      	str	r4, [r4, #32]
 8006aa2:	6323      	str	r3, [r4, #48]	; 0x30
 8006aa4:	bd10      	pop	{r4, pc}
 8006aa6:	bf00      	nop
 8006aa8:	080074e1 	.word	0x080074e1
 8006aac:	08007503 	.word	0x08007503
 8006ab0:	0800753b 	.word	0x0800753b
 8006ab4:	0800755f 	.word	0x0800755f

08006ab8 <_cleanup_r>:
 8006ab8:	4901      	ldr	r1, [pc, #4]	; (8006ac0 <_cleanup_r+0x8>)
 8006aba:	f000 b8c1 	b.w	8006c40 <_fwalk_reent>
 8006abe:	bf00      	nop
 8006ac0:	08007849 	.word	0x08007849

08006ac4 <__sfmoreglue>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	2268      	movs	r2, #104	; 0x68
 8006ac8:	1e4d      	subs	r5, r1, #1
 8006aca:	4355      	muls	r5, r2
 8006acc:	460e      	mov	r6, r1
 8006ace:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ad2:	f000 f94b 	bl	8006d6c <_malloc_r>
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	b140      	cbz	r0, 8006aec <__sfmoreglue+0x28>
 8006ada:	2100      	movs	r1, #0
 8006adc:	e9c0 1600 	strd	r1, r6, [r0]
 8006ae0:	300c      	adds	r0, #12
 8006ae2:	60a0      	str	r0, [r4, #8]
 8006ae4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ae8:	f7ff ff30 	bl	800694c <memset>
 8006aec:	4620      	mov	r0, r4
 8006aee:	bd70      	pop	{r4, r5, r6, pc}

08006af0 <__sfp_lock_acquire>:
 8006af0:	4801      	ldr	r0, [pc, #4]	; (8006af8 <__sfp_lock_acquire+0x8>)
 8006af2:	f000 b8c5 	b.w	8006c80 <__retarget_lock_acquire_recursive>
 8006af6:	bf00      	nop
 8006af8:	20000329 	.word	0x20000329

08006afc <__sfp_lock_release>:
 8006afc:	4801      	ldr	r0, [pc, #4]	; (8006b04 <__sfp_lock_release+0x8>)
 8006afe:	f000 b8c0 	b.w	8006c82 <__retarget_lock_release_recursive>
 8006b02:	bf00      	nop
 8006b04:	20000329 	.word	0x20000329

08006b08 <__sinit_lock_acquire>:
 8006b08:	4801      	ldr	r0, [pc, #4]	; (8006b10 <__sinit_lock_acquire+0x8>)
 8006b0a:	f000 b8b9 	b.w	8006c80 <__retarget_lock_acquire_recursive>
 8006b0e:	bf00      	nop
 8006b10:	2000032a 	.word	0x2000032a

08006b14 <__sinit_lock_release>:
 8006b14:	4801      	ldr	r0, [pc, #4]	; (8006b1c <__sinit_lock_release+0x8>)
 8006b16:	f000 b8b4 	b.w	8006c82 <__retarget_lock_release_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	2000032a 	.word	0x2000032a

08006b20 <__sinit>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	4604      	mov	r4, r0
 8006b24:	f7ff fff0 	bl	8006b08 <__sinit_lock_acquire>
 8006b28:	69a3      	ldr	r3, [r4, #24]
 8006b2a:	b11b      	cbz	r3, 8006b34 <__sinit+0x14>
 8006b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b30:	f7ff bff0 	b.w	8006b14 <__sinit_lock_release>
 8006b34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b38:	6523      	str	r3, [r4, #80]	; 0x50
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <__sinit+0x68>)
 8006b3c:	4a13      	ldr	r2, [pc, #76]	; (8006b8c <__sinit+0x6c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	bf04      	itt	eq
 8006b46:	2301      	moveq	r3, #1
 8006b48:	61a3      	streq	r3, [r4, #24]
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 f820 	bl	8006b90 <__sfp>
 8006b50:	6060      	str	r0, [r4, #4]
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 f81c 	bl	8006b90 <__sfp>
 8006b58:	60a0      	str	r0, [r4, #8]
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 f818 	bl	8006b90 <__sfp>
 8006b60:	2200      	movs	r2, #0
 8006b62:	60e0      	str	r0, [r4, #12]
 8006b64:	2104      	movs	r1, #4
 8006b66:	6860      	ldr	r0, [r4, #4]
 8006b68:	f7ff ff82 	bl	8006a70 <std>
 8006b6c:	68a0      	ldr	r0, [r4, #8]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	2109      	movs	r1, #9
 8006b72:	f7ff ff7d 	bl	8006a70 <std>
 8006b76:	68e0      	ldr	r0, [r4, #12]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	2112      	movs	r1, #18
 8006b7c:	f7ff ff78 	bl	8006a70 <std>
 8006b80:	2301      	movs	r3, #1
 8006b82:	61a3      	str	r3, [r4, #24]
 8006b84:	e7d2      	b.n	8006b2c <__sinit+0xc>
 8006b86:	bf00      	nop
 8006b88:	08007c5c 	.word	0x08007c5c
 8006b8c:	08006ab9 	.word	0x08006ab9

08006b90 <__sfp>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	4607      	mov	r7, r0
 8006b94:	f7ff ffac 	bl	8006af0 <__sfp_lock_acquire>
 8006b98:	4b1e      	ldr	r3, [pc, #120]	; (8006c14 <__sfp+0x84>)
 8006b9a:	681e      	ldr	r6, [r3, #0]
 8006b9c:	69b3      	ldr	r3, [r6, #24]
 8006b9e:	b913      	cbnz	r3, 8006ba6 <__sfp+0x16>
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7ff ffbd 	bl	8006b20 <__sinit>
 8006ba6:	3648      	adds	r6, #72	; 0x48
 8006ba8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bac:	3b01      	subs	r3, #1
 8006bae:	d503      	bpl.n	8006bb8 <__sfp+0x28>
 8006bb0:	6833      	ldr	r3, [r6, #0]
 8006bb2:	b30b      	cbz	r3, 8006bf8 <__sfp+0x68>
 8006bb4:	6836      	ldr	r6, [r6, #0]
 8006bb6:	e7f7      	b.n	8006ba8 <__sfp+0x18>
 8006bb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bbc:	b9d5      	cbnz	r5, 8006bf4 <__sfp+0x64>
 8006bbe:	4b16      	ldr	r3, [pc, #88]	; (8006c18 <__sfp+0x88>)
 8006bc0:	60e3      	str	r3, [r4, #12]
 8006bc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bc6:	6665      	str	r5, [r4, #100]	; 0x64
 8006bc8:	f000 f859 	bl	8006c7e <__retarget_lock_init_recursive>
 8006bcc:	f7ff ff96 	bl	8006afc <__sfp_lock_release>
 8006bd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bd8:	6025      	str	r5, [r4, #0]
 8006bda:	61a5      	str	r5, [r4, #24]
 8006bdc:	2208      	movs	r2, #8
 8006bde:	4629      	mov	r1, r5
 8006be0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006be4:	f7ff feb2 	bl	800694c <memset>
 8006be8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf4:	3468      	adds	r4, #104	; 0x68
 8006bf6:	e7d9      	b.n	8006bac <__sfp+0x1c>
 8006bf8:	2104      	movs	r1, #4
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f7ff ff62 	bl	8006ac4 <__sfmoreglue>
 8006c00:	4604      	mov	r4, r0
 8006c02:	6030      	str	r0, [r6, #0]
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d1d5      	bne.n	8006bb4 <__sfp+0x24>
 8006c08:	f7ff ff78 	bl	8006afc <__sfp_lock_release>
 8006c0c:	230c      	movs	r3, #12
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	e7ee      	b.n	8006bf0 <__sfp+0x60>
 8006c12:	bf00      	nop
 8006c14:	08007c5c 	.word	0x08007c5c
 8006c18:	ffff0001 	.word	0xffff0001

08006c1c <fiprintf>:
 8006c1c:	b40e      	push	{r1, r2, r3}
 8006c1e:	b503      	push	{r0, r1, lr}
 8006c20:	4601      	mov	r1, r0
 8006c22:	ab03      	add	r3, sp, #12
 8006c24:	4805      	ldr	r0, [pc, #20]	; (8006c3c <fiprintf+0x20>)
 8006c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c2a:	6800      	ldr	r0, [r0, #0]
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	f000 f93b 	bl	8006ea8 <_vfiprintf_r>
 8006c32:	b002      	add	sp, #8
 8006c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c38:	b003      	add	sp, #12
 8006c3a:	4770      	bx	lr
 8006c3c:	2000002c 	.word	0x2000002c

08006c40 <_fwalk_reent>:
 8006c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c44:	4606      	mov	r6, r0
 8006c46:	4688      	mov	r8, r1
 8006c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c4c:	2700      	movs	r7, #0
 8006c4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c52:	f1b9 0901 	subs.w	r9, r9, #1
 8006c56:	d505      	bpl.n	8006c64 <_fwalk_reent+0x24>
 8006c58:	6824      	ldr	r4, [r4, #0]
 8006c5a:	2c00      	cmp	r4, #0
 8006c5c:	d1f7      	bne.n	8006c4e <_fwalk_reent+0xe>
 8006c5e:	4638      	mov	r0, r7
 8006c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c64:	89ab      	ldrh	r3, [r5, #12]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d907      	bls.n	8006c7a <_fwalk_reent+0x3a>
 8006c6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	d003      	beq.n	8006c7a <_fwalk_reent+0x3a>
 8006c72:	4629      	mov	r1, r5
 8006c74:	4630      	mov	r0, r6
 8006c76:	47c0      	blx	r8
 8006c78:	4307      	orrs	r7, r0
 8006c7a:	3568      	adds	r5, #104	; 0x68
 8006c7c:	e7e9      	b.n	8006c52 <_fwalk_reent+0x12>

08006c7e <__retarget_lock_init_recursive>:
 8006c7e:	4770      	bx	lr

08006c80 <__retarget_lock_acquire_recursive>:
 8006c80:	4770      	bx	lr

08006c82 <__retarget_lock_release_recursive>:
 8006c82:	4770      	bx	lr

08006c84 <malloc>:
 8006c84:	4b02      	ldr	r3, [pc, #8]	; (8006c90 <malloc+0xc>)
 8006c86:	4601      	mov	r1, r0
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	f000 b86f 	b.w	8006d6c <_malloc_r>
 8006c8e:	bf00      	nop
 8006c90:	2000002c 	.word	0x2000002c

08006c94 <_free_r>:
 8006c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c96:	2900      	cmp	r1, #0
 8006c98:	d044      	beq.n	8006d24 <_free_r+0x90>
 8006c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c9e:	9001      	str	r0, [sp, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ca6:	bfb8      	it	lt
 8006ca8:	18e4      	addlt	r4, r4, r3
 8006caa:	f000 fe81 	bl	80079b0 <__malloc_lock>
 8006cae:	4a1e      	ldr	r2, [pc, #120]	; (8006d28 <_free_r+0x94>)
 8006cb0:	9801      	ldr	r0, [sp, #4]
 8006cb2:	6813      	ldr	r3, [r2, #0]
 8006cb4:	b933      	cbnz	r3, 8006cc4 <_free_r+0x30>
 8006cb6:	6063      	str	r3, [r4, #4]
 8006cb8:	6014      	str	r4, [r2, #0]
 8006cba:	b003      	add	sp, #12
 8006cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cc0:	f000 be7c 	b.w	80079bc <__malloc_unlock>
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d908      	bls.n	8006cda <_free_r+0x46>
 8006cc8:	6825      	ldr	r5, [r4, #0]
 8006cca:	1961      	adds	r1, r4, r5
 8006ccc:	428b      	cmp	r3, r1
 8006cce:	bf01      	itttt	eq
 8006cd0:	6819      	ldreq	r1, [r3, #0]
 8006cd2:	685b      	ldreq	r3, [r3, #4]
 8006cd4:	1949      	addeq	r1, r1, r5
 8006cd6:	6021      	streq	r1, [r4, #0]
 8006cd8:	e7ed      	b.n	8006cb6 <_free_r+0x22>
 8006cda:	461a      	mov	r2, r3
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	b10b      	cbz	r3, 8006ce4 <_free_r+0x50>
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	d9fa      	bls.n	8006cda <_free_r+0x46>
 8006ce4:	6811      	ldr	r1, [r2, #0]
 8006ce6:	1855      	adds	r5, r2, r1
 8006ce8:	42a5      	cmp	r5, r4
 8006cea:	d10b      	bne.n	8006d04 <_free_r+0x70>
 8006cec:	6824      	ldr	r4, [r4, #0]
 8006cee:	4421      	add	r1, r4
 8006cf0:	1854      	adds	r4, r2, r1
 8006cf2:	42a3      	cmp	r3, r4
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	d1e0      	bne.n	8006cba <_free_r+0x26>
 8006cf8:	681c      	ldr	r4, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	6053      	str	r3, [r2, #4]
 8006cfe:	4421      	add	r1, r4
 8006d00:	6011      	str	r1, [r2, #0]
 8006d02:	e7da      	b.n	8006cba <_free_r+0x26>
 8006d04:	d902      	bls.n	8006d0c <_free_r+0x78>
 8006d06:	230c      	movs	r3, #12
 8006d08:	6003      	str	r3, [r0, #0]
 8006d0a:	e7d6      	b.n	8006cba <_free_r+0x26>
 8006d0c:	6825      	ldr	r5, [r4, #0]
 8006d0e:	1961      	adds	r1, r4, r5
 8006d10:	428b      	cmp	r3, r1
 8006d12:	bf04      	itt	eq
 8006d14:	6819      	ldreq	r1, [r3, #0]
 8006d16:	685b      	ldreq	r3, [r3, #4]
 8006d18:	6063      	str	r3, [r4, #4]
 8006d1a:	bf04      	itt	eq
 8006d1c:	1949      	addeq	r1, r1, r5
 8006d1e:	6021      	streq	r1, [r4, #0]
 8006d20:	6054      	str	r4, [r2, #4]
 8006d22:	e7ca      	b.n	8006cba <_free_r+0x26>
 8006d24:	b003      	add	sp, #12
 8006d26:	bd30      	pop	{r4, r5, pc}
 8006d28:	2000032c 	.word	0x2000032c

08006d2c <sbrk_aligned>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	4e0e      	ldr	r6, [pc, #56]	; (8006d68 <sbrk_aligned+0x3c>)
 8006d30:	460c      	mov	r4, r1
 8006d32:	6831      	ldr	r1, [r6, #0]
 8006d34:	4605      	mov	r5, r0
 8006d36:	b911      	cbnz	r1, 8006d3e <sbrk_aligned+0x12>
 8006d38:	f000 fbc2 	bl	80074c0 <_sbrk_r>
 8006d3c:	6030      	str	r0, [r6, #0]
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4628      	mov	r0, r5
 8006d42:	f000 fbbd 	bl	80074c0 <_sbrk_r>
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	d00a      	beq.n	8006d60 <sbrk_aligned+0x34>
 8006d4a:	1cc4      	adds	r4, r0, #3
 8006d4c:	f024 0403 	bic.w	r4, r4, #3
 8006d50:	42a0      	cmp	r0, r4
 8006d52:	d007      	beq.n	8006d64 <sbrk_aligned+0x38>
 8006d54:	1a21      	subs	r1, r4, r0
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 fbb2 	bl	80074c0 <_sbrk_r>
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d101      	bne.n	8006d64 <sbrk_aligned+0x38>
 8006d60:	f04f 34ff 	mov.w	r4, #4294967295
 8006d64:	4620      	mov	r0, r4
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	20000330 	.word	0x20000330

08006d6c <_malloc_r>:
 8006d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d70:	1ccd      	adds	r5, r1, #3
 8006d72:	f025 0503 	bic.w	r5, r5, #3
 8006d76:	3508      	adds	r5, #8
 8006d78:	2d0c      	cmp	r5, #12
 8006d7a:	bf38      	it	cc
 8006d7c:	250c      	movcc	r5, #12
 8006d7e:	2d00      	cmp	r5, #0
 8006d80:	4607      	mov	r7, r0
 8006d82:	db01      	blt.n	8006d88 <_malloc_r+0x1c>
 8006d84:	42a9      	cmp	r1, r5
 8006d86:	d905      	bls.n	8006d94 <_malloc_r+0x28>
 8006d88:	230c      	movs	r3, #12
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	2600      	movs	r6, #0
 8006d8e:	4630      	mov	r0, r6
 8006d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d94:	4e2e      	ldr	r6, [pc, #184]	; (8006e50 <_malloc_r+0xe4>)
 8006d96:	f000 fe0b 	bl	80079b0 <__malloc_lock>
 8006d9a:	6833      	ldr	r3, [r6, #0]
 8006d9c:	461c      	mov	r4, r3
 8006d9e:	bb34      	cbnz	r4, 8006dee <_malloc_r+0x82>
 8006da0:	4629      	mov	r1, r5
 8006da2:	4638      	mov	r0, r7
 8006da4:	f7ff ffc2 	bl	8006d2c <sbrk_aligned>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	4604      	mov	r4, r0
 8006dac:	d14d      	bne.n	8006e4a <_malloc_r+0xde>
 8006dae:	6834      	ldr	r4, [r6, #0]
 8006db0:	4626      	mov	r6, r4
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	d140      	bne.n	8006e38 <_malloc_r+0xcc>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	4631      	mov	r1, r6
 8006dba:	4638      	mov	r0, r7
 8006dbc:	eb04 0803 	add.w	r8, r4, r3
 8006dc0:	f000 fb7e 	bl	80074c0 <_sbrk_r>
 8006dc4:	4580      	cmp	r8, r0
 8006dc6:	d13a      	bne.n	8006e3e <_malloc_r+0xd2>
 8006dc8:	6821      	ldr	r1, [r4, #0]
 8006dca:	3503      	adds	r5, #3
 8006dcc:	1a6d      	subs	r5, r5, r1
 8006dce:	f025 0503 	bic.w	r5, r5, #3
 8006dd2:	3508      	adds	r5, #8
 8006dd4:	2d0c      	cmp	r5, #12
 8006dd6:	bf38      	it	cc
 8006dd8:	250c      	movcc	r5, #12
 8006dda:	4629      	mov	r1, r5
 8006ddc:	4638      	mov	r0, r7
 8006dde:	f7ff ffa5 	bl	8006d2c <sbrk_aligned>
 8006de2:	3001      	adds	r0, #1
 8006de4:	d02b      	beq.n	8006e3e <_malloc_r+0xd2>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	442b      	add	r3, r5
 8006dea:	6023      	str	r3, [r4, #0]
 8006dec:	e00e      	b.n	8006e0c <_malloc_r+0xa0>
 8006dee:	6822      	ldr	r2, [r4, #0]
 8006df0:	1b52      	subs	r2, r2, r5
 8006df2:	d41e      	bmi.n	8006e32 <_malloc_r+0xc6>
 8006df4:	2a0b      	cmp	r2, #11
 8006df6:	d916      	bls.n	8006e26 <_malloc_r+0xba>
 8006df8:	1961      	adds	r1, r4, r5
 8006dfa:	42a3      	cmp	r3, r4
 8006dfc:	6025      	str	r5, [r4, #0]
 8006dfe:	bf18      	it	ne
 8006e00:	6059      	strne	r1, [r3, #4]
 8006e02:	6863      	ldr	r3, [r4, #4]
 8006e04:	bf08      	it	eq
 8006e06:	6031      	streq	r1, [r6, #0]
 8006e08:	5162      	str	r2, [r4, r5]
 8006e0a:	604b      	str	r3, [r1, #4]
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f104 060b 	add.w	r6, r4, #11
 8006e12:	f000 fdd3 	bl	80079bc <__malloc_unlock>
 8006e16:	f026 0607 	bic.w	r6, r6, #7
 8006e1a:	1d23      	adds	r3, r4, #4
 8006e1c:	1af2      	subs	r2, r6, r3
 8006e1e:	d0b6      	beq.n	8006d8e <_malloc_r+0x22>
 8006e20:	1b9b      	subs	r3, r3, r6
 8006e22:	50a3      	str	r3, [r4, r2]
 8006e24:	e7b3      	b.n	8006d8e <_malloc_r+0x22>
 8006e26:	6862      	ldr	r2, [r4, #4]
 8006e28:	42a3      	cmp	r3, r4
 8006e2a:	bf0c      	ite	eq
 8006e2c:	6032      	streq	r2, [r6, #0]
 8006e2e:	605a      	strne	r2, [r3, #4]
 8006e30:	e7ec      	b.n	8006e0c <_malloc_r+0xa0>
 8006e32:	4623      	mov	r3, r4
 8006e34:	6864      	ldr	r4, [r4, #4]
 8006e36:	e7b2      	b.n	8006d9e <_malloc_r+0x32>
 8006e38:	4634      	mov	r4, r6
 8006e3a:	6876      	ldr	r6, [r6, #4]
 8006e3c:	e7b9      	b.n	8006db2 <_malloc_r+0x46>
 8006e3e:	230c      	movs	r3, #12
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	4638      	mov	r0, r7
 8006e44:	f000 fdba 	bl	80079bc <__malloc_unlock>
 8006e48:	e7a1      	b.n	8006d8e <_malloc_r+0x22>
 8006e4a:	6025      	str	r5, [r4, #0]
 8006e4c:	e7de      	b.n	8006e0c <_malloc_r+0xa0>
 8006e4e:	bf00      	nop
 8006e50:	2000032c 	.word	0x2000032c

08006e54 <__sfputc_r>:
 8006e54:	6893      	ldr	r3, [r2, #8]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	b410      	push	{r4}
 8006e5c:	6093      	str	r3, [r2, #8]
 8006e5e:	da08      	bge.n	8006e72 <__sfputc_r+0x1e>
 8006e60:	6994      	ldr	r4, [r2, #24]
 8006e62:	42a3      	cmp	r3, r4
 8006e64:	db01      	blt.n	8006e6a <__sfputc_r+0x16>
 8006e66:	290a      	cmp	r1, #10
 8006e68:	d103      	bne.n	8006e72 <__sfputc_r+0x1e>
 8006e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e6e:	f000 bb7b 	b.w	8007568 <__swbuf_r>
 8006e72:	6813      	ldr	r3, [r2, #0]
 8006e74:	1c58      	adds	r0, r3, #1
 8006e76:	6010      	str	r0, [r2, #0]
 8006e78:	7019      	strb	r1, [r3, #0]
 8006e7a:	4608      	mov	r0, r1
 8006e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <__sfputs_r>:
 8006e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e84:	4606      	mov	r6, r0
 8006e86:	460f      	mov	r7, r1
 8006e88:	4614      	mov	r4, r2
 8006e8a:	18d5      	adds	r5, r2, r3
 8006e8c:	42ac      	cmp	r4, r5
 8006e8e:	d101      	bne.n	8006e94 <__sfputs_r+0x12>
 8006e90:	2000      	movs	r0, #0
 8006e92:	e007      	b.n	8006ea4 <__sfputs_r+0x22>
 8006e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e98:	463a      	mov	r2, r7
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f7ff ffda 	bl	8006e54 <__sfputc_r>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d1f3      	bne.n	8006e8c <__sfputs_r+0xa>
 8006ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ea8 <_vfiprintf_r>:
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	460d      	mov	r5, r1
 8006eae:	b09d      	sub	sp, #116	; 0x74
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	4698      	mov	r8, r3
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	b118      	cbz	r0, 8006ec0 <_vfiprintf_r+0x18>
 8006eb8:	6983      	ldr	r3, [r0, #24]
 8006eba:	b90b      	cbnz	r3, 8006ec0 <_vfiprintf_r+0x18>
 8006ebc:	f7ff fe30 	bl	8006b20 <__sinit>
 8006ec0:	4b89      	ldr	r3, [pc, #548]	; (80070e8 <_vfiprintf_r+0x240>)
 8006ec2:	429d      	cmp	r5, r3
 8006ec4:	d11b      	bne.n	8006efe <_vfiprintf_r+0x56>
 8006ec6:	6875      	ldr	r5, [r6, #4]
 8006ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eca:	07d9      	lsls	r1, r3, #31
 8006ecc:	d405      	bmi.n	8006eda <_vfiprintf_r+0x32>
 8006ece:	89ab      	ldrh	r3, [r5, #12]
 8006ed0:	059a      	lsls	r2, r3, #22
 8006ed2:	d402      	bmi.n	8006eda <_vfiprintf_r+0x32>
 8006ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ed6:	f7ff fed3 	bl	8006c80 <__retarget_lock_acquire_recursive>
 8006eda:	89ab      	ldrh	r3, [r5, #12]
 8006edc:	071b      	lsls	r3, r3, #28
 8006ede:	d501      	bpl.n	8006ee4 <_vfiprintf_r+0x3c>
 8006ee0:	692b      	ldr	r3, [r5, #16]
 8006ee2:	b9eb      	cbnz	r3, 8006f20 <_vfiprintf_r+0x78>
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f000 fba2 	bl	8007630 <__swsetup_r>
 8006eec:	b1c0      	cbz	r0, 8006f20 <_vfiprintf_r+0x78>
 8006eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ef0:	07dc      	lsls	r4, r3, #31
 8006ef2:	d50e      	bpl.n	8006f12 <_vfiprintf_r+0x6a>
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	b01d      	add	sp, #116	; 0x74
 8006efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efe:	4b7b      	ldr	r3, [pc, #492]	; (80070ec <_vfiprintf_r+0x244>)
 8006f00:	429d      	cmp	r5, r3
 8006f02:	d101      	bne.n	8006f08 <_vfiprintf_r+0x60>
 8006f04:	68b5      	ldr	r5, [r6, #8]
 8006f06:	e7df      	b.n	8006ec8 <_vfiprintf_r+0x20>
 8006f08:	4b79      	ldr	r3, [pc, #484]	; (80070f0 <_vfiprintf_r+0x248>)
 8006f0a:	429d      	cmp	r5, r3
 8006f0c:	bf08      	it	eq
 8006f0e:	68f5      	ldreq	r5, [r6, #12]
 8006f10:	e7da      	b.n	8006ec8 <_vfiprintf_r+0x20>
 8006f12:	89ab      	ldrh	r3, [r5, #12]
 8006f14:	0598      	lsls	r0, r3, #22
 8006f16:	d4ed      	bmi.n	8006ef4 <_vfiprintf_r+0x4c>
 8006f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f1a:	f7ff feb2 	bl	8006c82 <__retarget_lock_release_recursive>
 8006f1e:	e7e9      	b.n	8006ef4 <_vfiprintf_r+0x4c>
 8006f20:	2300      	movs	r3, #0
 8006f22:	9309      	str	r3, [sp, #36]	; 0x24
 8006f24:	2320      	movs	r3, #32
 8006f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f2e:	2330      	movs	r3, #48	; 0x30
 8006f30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80070f4 <_vfiprintf_r+0x24c>
 8006f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f38:	f04f 0901 	mov.w	r9, #1
 8006f3c:	4623      	mov	r3, r4
 8006f3e:	469a      	mov	sl, r3
 8006f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f44:	b10a      	cbz	r2, 8006f4a <_vfiprintf_r+0xa2>
 8006f46:	2a25      	cmp	r2, #37	; 0x25
 8006f48:	d1f9      	bne.n	8006f3e <_vfiprintf_r+0x96>
 8006f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f4e:	d00b      	beq.n	8006f68 <_vfiprintf_r+0xc0>
 8006f50:	465b      	mov	r3, fp
 8006f52:	4622      	mov	r2, r4
 8006f54:	4629      	mov	r1, r5
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7ff ff93 	bl	8006e82 <__sfputs_r>
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f000 80aa 	beq.w	80070b6 <_vfiprintf_r+0x20e>
 8006f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f64:	445a      	add	r2, fp
 8006f66:	9209      	str	r2, [sp, #36]	; 0x24
 8006f68:	f89a 3000 	ldrb.w	r3, [sl]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80a2 	beq.w	80070b6 <_vfiprintf_r+0x20e>
 8006f72:	2300      	movs	r3, #0
 8006f74:	f04f 32ff 	mov.w	r2, #4294967295
 8006f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f7c:	f10a 0a01 	add.w	sl, sl, #1
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	9307      	str	r3, [sp, #28]
 8006f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f88:	931a      	str	r3, [sp, #104]	; 0x68
 8006f8a:	4654      	mov	r4, sl
 8006f8c:	2205      	movs	r2, #5
 8006f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f92:	4858      	ldr	r0, [pc, #352]	; (80070f4 <_vfiprintf_r+0x24c>)
 8006f94:	f7f9 f91c 	bl	80001d0 <memchr>
 8006f98:	9a04      	ldr	r2, [sp, #16]
 8006f9a:	b9d8      	cbnz	r0, 8006fd4 <_vfiprintf_r+0x12c>
 8006f9c:	06d1      	lsls	r1, r2, #27
 8006f9e:	bf44      	itt	mi
 8006fa0:	2320      	movmi	r3, #32
 8006fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa6:	0713      	lsls	r3, r2, #28
 8006fa8:	bf44      	itt	mi
 8006faa:	232b      	movmi	r3, #43	; 0x2b
 8006fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb6:	d015      	beq.n	8006fe4 <_vfiprintf_r+0x13c>
 8006fb8:	9a07      	ldr	r2, [sp, #28]
 8006fba:	4654      	mov	r4, sl
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	f04f 0c0a 	mov.w	ip, #10
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fc8:	3b30      	subs	r3, #48	; 0x30
 8006fca:	2b09      	cmp	r3, #9
 8006fcc:	d94e      	bls.n	800706c <_vfiprintf_r+0x1c4>
 8006fce:	b1b0      	cbz	r0, 8006ffe <_vfiprintf_r+0x156>
 8006fd0:	9207      	str	r2, [sp, #28]
 8006fd2:	e014      	b.n	8006ffe <_vfiprintf_r+0x156>
 8006fd4:	eba0 0308 	sub.w	r3, r0, r8
 8006fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	9304      	str	r3, [sp, #16]
 8006fe0:	46a2      	mov	sl, r4
 8006fe2:	e7d2      	b.n	8006f8a <_vfiprintf_r+0xe2>
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	1d19      	adds	r1, r3, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	9103      	str	r1, [sp, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bfbb      	ittet	lt
 8006ff0:	425b      	neglt	r3, r3
 8006ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ff6:	9307      	strge	r3, [sp, #28]
 8006ff8:	9307      	strlt	r3, [sp, #28]
 8006ffa:	bfb8      	it	lt
 8006ffc:	9204      	strlt	r2, [sp, #16]
 8006ffe:	7823      	ldrb	r3, [r4, #0]
 8007000:	2b2e      	cmp	r3, #46	; 0x2e
 8007002:	d10c      	bne.n	800701e <_vfiprintf_r+0x176>
 8007004:	7863      	ldrb	r3, [r4, #1]
 8007006:	2b2a      	cmp	r3, #42	; 0x2a
 8007008:	d135      	bne.n	8007076 <_vfiprintf_r+0x1ce>
 800700a:	9b03      	ldr	r3, [sp, #12]
 800700c:	1d1a      	adds	r2, r3, #4
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	9203      	str	r2, [sp, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	bfb8      	it	lt
 8007016:	f04f 33ff 	movlt.w	r3, #4294967295
 800701a:	3402      	adds	r4, #2
 800701c:	9305      	str	r3, [sp, #20]
 800701e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007104 <_vfiprintf_r+0x25c>
 8007022:	7821      	ldrb	r1, [r4, #0]
 8007024:	2203      	movs	r2, #3
 8007026:	4650      	mov	r0, sl
 8007028:	f7f9 f8d2 	bl	80001d0 <memchr>
 800702c:	b140      	cbz	r0, 8007040 <_vfiprintf_r+0x198>
 800702e:	2340      	movs	r3, #64	; 0x40
 8007030:	eba0 000a 	sub.w	r0, r0, sl
 8007034:	fa03 f000 	lsl.w	r0, r3, r0
 8007038:	9b04      	ldr	r3, [sp, #16]
 800703a:	4303      	orrs	r3, r0
 800703c:	3401      	adds	r4, #1
 800703e:	9304      	str	r3, [sp, #16]
 8007040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007044:	482c      	ldr	r0, [pc, #176]	; (80070f8 <_vfiprintf_r+0x250>)
 8007046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800704a:	2206      	movs	r2, #6
 800704c:	f7f9 f8c0 	bl	80001d0 <memchr>
 8007050:	2800      	cmp	r0, #0
 8007052:	d03f      	beq.n	80070d4 <_vfiprintf_r+0x22c>
 8007054:	4b29      	ldr	r3, [pc, #164]	; (80070fc <_vfiprintf_r+0x254>)
 8007056:	bb1b      	cbnz	r3, 80070a0 <_vfiprintf_r+0x1f8>
 8007058:	9b03      	ldr	r3, [sp, #12]
 800705a:	3307      	adds	r3, #7
 800705c:	f023 0307 	bic.w	r3, r3, #7
 8007060:	3308      	adds	r3, #8
 8007062:	9303      	str	r3, [sp, #12]
 8007064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007066:	443b      	add	r3, r7
 8007068:	9309      	str	r3, [sp, #36]	; 0x24
 800706a:	e767      	b.n	8006f3c <_vfiprintf_r+0x94>
 800706c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007070:	460c      	mov	r4, r1
 8007072:	2001      	movs	r0, #1
 8007074:	e7a5      	b.n	8006fc2 <_vfiprintf_r+0x11a>
 8007076:	2300      	movs	r3, #0
 8007078:	3401      	adds	r4, #1
 800707a:	9305      	str	r3, [sp, #20]
 800707c:	4619      	mov	r1, r3
 800707e:	f04f 0c0a 	mov.w	ip, #10
 8007082:	4620      	mov	r0, r4
 8007084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007088:	3a30      	subs	r2, #48	; 0x30
 800708a:	2a09      	cmp	r2, #9
 800708c:	d903      	bls.n	8007096 <_vfiprintf_r+0x1ee>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0c5      	beq.n	800701e <_vfiprintf_r+0x176>
 8007092:	9105      	str	r1, [sp, #20]
 8007094:	e7c3      	b.n	800701e <_vfiprintf_r+0x176>
 8007096:	fb0c 2101 	mla	r1, ip, r1, r2
 800709a:	4604      	mov	r4, r0
 800709c:	2301      	movs	r3, #1
 800709e:	e7f0      	b.n	8007082 <_vfiprintf_r+0x1da>
 80070a0:	ab03      	add	r3, sp, #12
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	462a      	mov	r2, r5
 80070a6:	4b16      	ldr	r3, [pc, #88]	; (8007100 <_vfiprintf_r+0x258>)
 80070a8:	a904      	add	r1, sp, #16
 80070aa:	4630      	mov	r0, r6
 80070ac:	f3af 8000 	nop.w
 80070b0:	4607      	mov	r7, r0
 80070b2:	1c78      	adds	r0, r7, #1
 80070b4:	d1d6      	bne.n	8007064 <_vfiprintf_r+0x1bc>
 80070b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070b8:	07d9      	lsls	r1, r3, #31
 80070ba:	d405      	bmi.n	80070c8 <_vfiprintf_r+0x220>
 80070bc:	89ab      	ldrh	r3, [r5, #12]
 80070be:	059a      	lsls	r2, r3, #22
 80070c0:	d402      	bmi.n	80070c8 <_vfiprintf_r+0x220>
 80070c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070c4:	f7ff fddd 	bl	8006c82 <__retarget_lock_release_recursive>
 80070c8:	89ab      	ldrh	r3, [r5, #12]
 80070ca:	065b      	lsls	r3, r3, #25
 80070cc:	f53f af12 	bmi.w	8006ef4 <_vfiprintf_r+0x4c>
 80070d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070d2:	e711      	b.n	8006ef8 <_vfiprintf_r+0x50>
 80070d4:	ab03      	add	r3, sp, #12
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	462a      	mov	r2, r5
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <_vfiprintf_r+0x258>)
 80070dc:	a904      	add	r1, sp, #16
 80070de:	4630      	mov	r0, r6
 80070e0:	f000 f880 	bl	80071e4 <_printf_i>
 80070e4:	e7e4      	b.n	80070b0 <_vfiprintf_r+0x208>
 80070e6:	bf00      	nop
 80070e8:	08007d30 	.word	0x08007d30
 80070ec:	08007d50 	.word	0x08007d50
 80070f0:	08007d10 	.word	0x08007d10
 80070f4:	08007d70 	.word	0x08007d70
 80070f8:	08007d7a 	.word	0x08007d7a
 80070fc:	00000000 	.word	0x00000000
 8007100:	08006e83 	.word	0x08006e83
 8007104:	08007d76 	.word	0x08007d76

08007108 <_printf_common>:
 8007108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800710c:	4616      	mov	r6, r2
 800710e:	4699      	mov	r9, r3
 8007110:	688a      	ldr	r2, [r1, #8]
 8007112:	690b      	ldr	r3, [r1, #16]
 8007114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007118:	4293      	cmp	r3, r2
 800711a:	bfb8      	it	lt
 800711c:	4613      	movlt	r3, r2
 800711e:	6033      	str	r3, [r6, #0]
 8007120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007124:	4607      	mov	r7, r0
 8007126:	460c      	mov	r4, r1
 8007128:	b10a      	cbz	r2, 800712e <_printf_common+0x26>
 800712a:	3301      	adds	r3, #1
 800712c:	6033      	str	r3, [r6, #0]
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	0699      	lsls	r1, r3, #26
 8007132:	bf42      	ittt	mi
 8007134:	6833      	ldrmi	r3, [r6, #0]
 8007136:	3302      	addmi	r3, #2
 8007138:	6033      	strmi	r3, [r6, #0]
 800713a:	6825      	ldr	r5, [r4, #0]
 800713c:	f015 0506 	ands.w	r5, r5, #6
 8007140:	d106      	bne.n	8007150 <_printf_common+0x48>
 8007142:	f104 0a19 	add.w	sl, r4, #25
 8007146:	68e3      	ldr	r3, [r4, #12]
 8007148:	6832      	ldr	r2, [r6, #0]
 800714a:	1a9b      	subs	r3, r3, r2
 800714c:	42ab      	cmp	r3, r5
 800714e:	dc26      	bgt.n	800719e <_printf_common+0x96>
 8007150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007154:	1e13      	subs	r3, r2, #0
 8007156:	6822      	ldr	r2, [r4, #0]
 8007158:	bf18      	it	ne
 800715a:	2301      	movne	r3, #1
 800715c:	0692      	lsls	r2, r2, #26
 800715e:	d42b      	bmi.n	80071b8 <_printf_common+0xb0>
 8007160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007164:	4649      	mov	r1, r9
 8007166:	4638      	mov	r0, r7
 8007168:	47c0      	blx	r8
 800716a:	3001      	adds	r0, #1
 800716c:	d01e      	beq.n	80071ac <_printf_common+0xa4>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	68e5      	ldr	r5, [r4, #12]
 8007172:	6832      	ldr	r2, [r6, #0]
 8007174:	f003 0306 	and.w	r3, r3, #6
 8007178:	2b04      	cmp	r3, #4
 800717a:	bf08      	it	eq
 800717c:	1aad      	subeq	r5, r5, r2
 800717e:	68a3      	ldr	r3, [r4, #8]
 8007180:	6922      	ldr	r2, [r4, #16]
 8007182:	bf0c      	ite	eq
 8007184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007188:	2500      	movne	r5, #0
 800718a:	4293      	cmp	r3, r2
 800718c:	bfc4      	itt	gt
 800718e:	1a9b      	subgt	r3, r3, r2
 8007190:	18ed      	addgt	r5, r5, r3
 8007192:	2600      	movs	r6, #0
 8007194:	341a      	adds	r4, #26
 8007196:	42b5      	cmp	r5, r6
 8007198:	d11a      	bne.n	80071d0 <_printf_common+0xc8>
 800719a:	2000      	movs	r0, #0
 800719c:	e008      	b.n	80071b0 <_printf_common+0xa8>
 800719e:	2301      	movs	r3, #1
 80071a0:	4652      	mov	r2, sl
 80071a2:	4649      	mov	r1, r9
 80071a4:	4638      	mov	r0, r7
 80071a6:	47c0      	blx	r8
 80071a8:	3001      	adds	r0, #1
 80071aa:	d103      	bne.n	80071b4 <_printf_common+0xac>
 80071ac:	f04f 30ff 	mov.w	r0, #4294967295
 80071b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b4:	3501      	adds	r5, #1
 80071b6:	e7c6      	b.n	8007146 <_printf_common+0x3e>
 80071b8:	18e1      	adds	r1, r4, r3
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	2030      	movs	r0, #48	; 0x30
 80071be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071c2:	4422      	add	r2, r4
 80071c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071cc:	3302      	adds	r3, #2
 80071ce:	e7c7      	b.n	8007160 <_printf_common+0x58>
 80071d0:	2301      	movs	r3, #1
 80071d2:	4622      	mov	r2, r4
 80071d4:	4649      	mov	r1, r9
 80071d6:	4638      	mov	r0, r7
 80071d8:	47c0      	blx	r8
 80071da:	3001      	adds	r0, #1
 80071dc:	d0e6      	beq.n	80071ac <_printf_common+0xa4>
 80071de:	3601      	adds	r6, #1
 80071e0:	e7d9      	b.n	8007196 <_printf_common+0x8e>
	...

080071e4 <_printf_i>:
 80071e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071e8:	7e0f      	ldrb	r7, [r1, #24]
 80071ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071ec:	2f78      	cmp	r7, #120	; 0x78
 80071ee:	4691      	mov	r9, r2
 80071f0:	4680      	mov	r8, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	469a      	mov	sl, r3
 80071f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071fa:	d807      	bhi.n	800720c <_printf_i+0x28>
 80071fc:	2f62      	cmp	r7, #98	; 0x62
 80071fe:	d80a      	bhi.n	8007216 <_printf_i+0x32>
 8007200:	2f00      	cmp	r7, #0
 8007202:	f000 80d8 	beq.w	80073b6 <_printf_i+0x1d2>
 8007206:	2f58      	cmp	r7, #88	; 0x58
 8007208:	f000 80a3 	beq.w	8007352 <_printf_i+0x16e>
 800720c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007214:	e03a      	b.n	800728c <_printf_i+0xa8>
 8007216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800721a:	2b15      	cmp	r3, #21
 800721c:	d8f6      	bhi.n	800720c <_printf_i+0x28>
 800721e:	a101      	add	r1, pc, #4	; (adr r1, 8007224 <_printf_i+0x40>)
 8007220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007224:	0800727d 	.word	0x0800727d
 8007228:	08007291 	.word	0x08007291
 800722c:	0800720d 	.word	0x0800720d
 8007230:	0800720d 	.word	0x0800720d
 8007234:	0800720d 	.word	0x0800720d
 8007238:	0800720d 	.word	0x0800720d
 800723c:	08007291 	.word	0x08007291
 8007240:	0800720d 	.word	0x0800720d
 8007244:	0800720d 	.word	0x0800720d
 8007248:	0800720d 	.word	0x0800720d
 800724c:	0800720d 	.word	0x0800720d
 8007250:	0800739d 	.word	0x0800739d
 8007254:	080072c1 	.word	0x080072c1
 8007258:	0800737f 	.word	0x0800737f
 800725c:	0800720d 	.word	0x0800720d
 8007260:	0800720d 	.word	0x0800720d
 8007264:	080073bf 	.word	0x080073bf
 8007268:	0800720d 	.word	0x0800720d
 800726c:	080072c1 	.word	0x080072c1
 8007270:	0800720d 	.word	0x0800720d
 8007274:	0800720d 	.word	0x0800720d
 8007278:	08007387 	.word	0x08007387
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	1d1a      	adds	r2, r3, #4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	602a      	str	r2, [r5, #0]
 8007284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800728c:	2301      	movs	r3, #1
 800728e:	e0a3      	b.n	80073d8 <_printf_i+0x1f4>
 8007290:	6820      	ldr	r0, [r4, #0]
 8007292:	6829      	ldr	r1, [r5, #0]
 8007294:	0606      	lsls	r6, r0, #24
 8007296:	f101 0304 	add.w	r3, r1, #4
 800729a:	d50a      	bpl.n	80072b2 <_printf_i+0xce>
 800729c:	680e      	ldr	r6, [r1, #0]
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	2e00      	cmp	r6, #0
 80072a2:	da03      	bge.n	80072ac <_printf_i+0xc8>
 80072a4:	232d      	movs	r3, #45	; 0x2d
 80072a6:	4276      	negs	r6, r6
 80072a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ac:	485e      	ldr	r0, [pc, #376]	; (8007428 <_printf_i+0x244>)
 80072ae:	230a      	movs	r3, #10
 80072b0:	e019      	b.n	80072e6 <_printf_i+0x102>
 80072b2:	680e      	ldr	r6, [r1, #0]
 80072b4:	602b      	str	r3, [r5, #0]
 80072b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072ba:	bf18      	it	ne
 80072bc:	b236      	sxthne	r6, r6
 80072be:	e7ef      	b.n	80072a0 <_printf_i+0xbc>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	6820      	ldr	r0, [r4, #0]
 80072c4:	1d19      	adds	r1, r3, #4
 80072c6:	6029      	str	r1, [r5, #0]
 80072c8:	0601      	lsls	r1, r0, #24
 80072ca:	d501      	bpl.n	80072d0 <_printf_i+0xec>
 80072cc:	681e      	ldr	r6, [r3, #0]
 80072ce:	e002      	b.n	80072d6 <_printf_i+0xf2>
 80072d0:	0646      	lsls	r6, r0, #25
 80072d2:	d5fb      	bpl.n	80072cc <_printf_i+0xe8>
 80072d4:	881e      	ldrh	r6, [r3, #0]
 80072d6:	4854      	ldr	r0, [pc, #336]	; (8007428 <_printf_i+0x244>)
 80072d8:	2f6f      	cmp	r7, #111	; 0x6f
 80072da:	bf0c      	ite	eq
 80072dc:	2308      	moveq	r3, #8
 80072de:	230a      	movne	r3, #10
 80072e0:	2100      	movs	r1, #0
 80072e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072e6:	6865      	ldr	r5, [r4, #4]
 80072e8:	60a5      	str	r5, [r4, #8]
 80072ea:	2d00      	cmp	r5, #0
 80072ec:	bfa2      	ittt	ge
 80072ee:	6821      	ldrge	r1, [r4, #0]
 80072f0:	f021 0104 	bicge.w	r1, r1, #4
 80072f4:	6021      	strge	r1, [r4, #0]
 80072f6:	b90e      	cbnz	r6, 80072fc <_printf_i+0x118>
 80072f8:	2d00      	cmp	r5, #0
 80072fa:	d04d      	beq.n	8007398 <_printf_i+0x1b4>
 80072fc:	4615      	mov	r5, r2
 80072fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007302:	fb03 6711 	mls	r7, r3, r1, r6
 8007306:	5dc7      	ldrb	r7, [r0, r7]
 8007308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800730c:	4637      	mov	r7, r6
 800730e:	42bb      	cmp	r3, r7
 8007310:	460e      	mov	r6, r1
 8007312:	d9f4      	bls.n	80072fe <_printf_i+0x11a>
 8007314:	2b08      	cmp	r3, #8
 8007316:	d10b      	bne.n	8007330 <_printf_i+0x14c>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	07de      	lsls	r6, r3, #31
 800731c:	d508      	bpl.n	8007330 <_printf_i+0x14c>
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	6861      	ldr	r1, [r4, #4]
 8007322:	4299      	cmp	r1, r3
 8007324:	bfde      	ittt	le
 8007326:	2330      	movle	r3, #48	; 0x30
 8007328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800732c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007330:	1b52      	subs	r2, r2, r5
 8007332:	6122      	str	r2, [r4, #16]
 8007334:	f8cd a000 	str.w	sl, [sp]
 8007338:	464b      	mov	r3, r9
 800733a:	aa03      	add	r2, sp, #12
 800733c:	4621      	mov	r1, r4
 800733e:	4640      	mov	r0, r8
 8007340:	f7ff fee2 	bl	8007108 <_printf_common>
 8007344:	3001      	adds	r0, #1
 8007346:	d14c      	bne.n	80073e2 <_printf_i+0x1fe>
 8007348:	f04f 30ff 	mov.w	r0, #4294967295
 800734c:	b004      	add	sp, #16
 800734e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007352:	4835      	ldr	r0, [pc, #212]	; (8007428 <_printf_i+0x244>)
 8007354:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007358:	6829      	ldr	r1, [r5, #0]
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007360:	6029      	str	r1, [r5, #0]
 8007362:	061d      	lsls	r5, r3, #24
 8007364:	d514      	bpl.n	8007390 <_printf_i+0x1ac>
 8007366:	07df      	lsls	r7, r3, #31
 8007368:	bf44      	itt	mi
 800736a:	f043 0320 	orrmi.w	r3, r3, #32
 800736e:	6023      	strmi	r3, [r4, #0]
 8007370:	b91e      	cbnz	r6, 800737a <_printf_i+0x196>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	f023 0320 	bic.w	r3, r3, #32
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	2310      	movs	r3, #16
 800737c:	e7b0      	b.n	80072e0 <_printf_i+0xfc>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	f043 0320 	orr.w	r3, r3, #32
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	2378      	movs	r3, #120	; 0x78
 8007388:	4828      	ldr	r0, [pc, #160]	; (800742c <_printf_i+0x248>)
 800738a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800738e:	e7e3      	b.n	8007358 <_printf_i+0x174>
 8007390:	0659      	lsls	r1, r3, #25
 8007392:	bf48      	it	mi
 8007394:	b2b6      	uxthmi	r6, r6
 8007396:	e7e6      	b.n	8007366 <_printf_i+0x182>
 8007398:	4615      	mov	r5, r2
 800739a:	e7bb      	b.n	8007314 <_printf_i+0x130>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	6826      	ldr	r6, [r4, #0]
 80073a0:	6961      	ldr	r1, [r4, #20]
 80073a2:	1d18      	adds	r0, r3, #4
 80073a4:	6028      	str	r0, [r5, #0]
 80073a6:	0635      	lsls	r5, r6, #24
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	d501      	bpl.n	80073b0 <_printf_i+0x1cc>
 80073ac:	6019      	str	r1, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <_printf_i+0x1d2>
 80073b0:	0670      	lsls	r0, r6, #25
 80073b2:	d5fb      	bpl.n	80073ac <_printf_i+0x1c8>
 80073b4:	8019      	strh	r1, [r3, #0]
 80073b6:	2300      	movs	r3, #0
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	4615      	mov	r5, r2
 80073bc:	e7ba      	b.n	8007334 <_printf_i+0x150>
 80073be:	682b      	ldr	r3, [r5, #0]
 80073c0:	1d1a      	adds	r2, r3, #4
 80073c2:	602a      	str	r2, [r5, #0]
 80073c4:	681d      	ldr	r5, [r3, #0]
 80073c6:	6862      	ldr	r2, [r4, #4]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4628      	mov	r0, r5
 80073cc:	f7f8 ff00 	bl	80001d0 <memchr>
 80073d0:	b108      	cbz	r0, 80073d6 <_printf_i+0x1f2>
 80073d2:	1b40      	subs	r0, r0, r5
 80073d4:	6060      	str	r0, [r4, #4]
 80073d6:	6863      	ldr	r3, [r4, #4]
 80073d8:	6123      	str	r3, [r4, #16]
 80073da:	2300      	movs	r3, #0
 80073dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e0:	e7a8      	b.n	8007334 <_printf_i+0x150>
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	462a      	mov	r2, r5
 80073e6:	4649      	mov	r1, r9
 80073e8:	4640      	mov	r0, r8
 80073ea:	47d0      	blx	sl
 80073ec:	3001      	adds	r0, #1
 80073ee:	d0ab      	beq.n	8007348 <_printf_i+0x164>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	079b      	lsls	r3, r3, #30
 80073f4:	d413      	bmi.n	800741e <_printf_i+0x23a>
 80073f6:	68e0      	ldr	r0, [r4, #12]
 80073f8:	9b03      	ldr	r3, [sp, #12]
 80073fa:	4298      	cmp	r0, r3
 80073fc:	bfb8      	it	lt
 80073fe:	4618      	movlt	r0, r3
 8007400:	e7a4      	b.n	800734c <_printf_i+0x168>
 8007402:	2301      	movs	r3, #1
 8007404:	4632      	mov	r2, r6
 8007406:	4649      	mov	r1, r9
 8007408:	4640      	mov	r0, r8
 800740a:	47d0      	blx	sl
 800740c:	3001      	adds	r0, #1
 800740e:	d09b      	beq.n	8007348 <_printf_i+0x164>
 8007410:	3501      	adds	r5, #1
 8007412:	68e3      	ldr	r3, [r4, #12]
 8007414:	9903      	ldr	r1, [sp, #12]
 8007416:	1a5b      	subs	r3, r3, r1
 8007418:	42ab      	cmp	r3, r5
 800741a:	dcf2      	bgt.n	8007402 <_printf_i+0x21e>
 800741c:	e7eb      	b.n	80073f6 <_printf_i+0x212>
 800741e:	2500      	movs	r5, #0
 8007420:	f104 0619 	add.w	r6, r4, #25
 8007424:	e7f5      	b.n	8007412 <_printf_i+0x22e>
 8007426:	bf00      	nop
 8007428:	08007d81 	.word	0x08007d81
 800742c:	08007d92 	.word	0x08007d92

08007430 <_putc_r>:
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	460d      	mov	r5, r1
 8007434:	4614      	mov	r4, r2
 8007436:	4606      	mov	r6, r0
 8007438:	b118      	cbz	r0, 8007442 <_putc_r+0x12>
 800743a:	6983      	ldr	r3, [r0, #24]
 800743c:	b90b      	cbnz	r3, 8007442 <_putc_r+0x12>
 800743e:	f7ff fb6f 	bl	8006b20 <__sinit>
 8007442:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <_putc_r+0x84>)
 8007444:	429c      	cmp	r4, r3
 8007446:	d124      	bne.n	8007492 <_putc_r+0x62>
 8007448:	6874      	ldr	r4, [r6, #4]
 800744a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800744c:	07d8      	lsls	r0, r3, #31
 800744e:	d405      	bmi.n	800745c <_putc_r+0x2c>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	0599      	lsls	r1, r3, #22
 8007454:	d402      	bmi.n	800745c <_putc_r+0x2c>
 8007456:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007458:	f7ff fc12 	bl	8006c80 <__retarget_lock_acquire_recursive>
 800745c:	68a3      	ldr	r3, [r4, #8]
 800745e:	3b01      	subs	r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	60a3      	str	r3, [r4, #8]
 8007464:	da05      	bge.n	8007472 <_putc_r+0x42>
 8007466:	69a2      	ldr	r2, [r4, #24]
 8007468:	4293      	cmp	r3, r2
 800746a:	db1c      	blt.n	80074a6 <_putc_r+0x76>
 800746c:	b2eb      	uxtb	r3, r5
 800746e:	2b0a      	cmp	r3, #10
 8007470:	d019      	beq.n	80074a6 <_putc_r+0x76>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	6022      	str	r2, [r4, #0]
 8007478:	701d      	strb	r5, [r3, #0]
 800747a:	b2ed      	uxtb	r5, r5
 800747c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800747e:	07da      	lsls	r2, r3, #31
 8007480:	d405      	bmi.n	800748e <_putc_r+0x5e>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	059b      	lsls	r3, r3, #22
 8007486:	d402      	bmi.n	800748e <_putc_r+0x5e>
 8007488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800748a:	f7ff fbfa 	bl	8006c82 <__retarget_lock_release_recursive>
 800748e:	4628      	mov	r0, r5
 8007490:	bd70      	pop	{r4, r5, r6, pc}
 8007492:	4b09      	ldr	r3, [pc, #36]	; (80074b8 <_putc_r+0x88>)
 8007494:	429c      	cmp	r4, r3
 8007496:	d101      	bne.n	800749c <_putc_r+0x6c>
 8007498:	68b4      	ldr	r4, [r6, #8]
 800749a:	e7d6      	b.n	800744a <_putc_r+0x1a>
 800749c:	4b07      	ldr	r3, [pc, #28]	; (80074bc <_putc_r+0x8c>)
 800749e:	429c      	cmp	r4, r3
 80074a0:	bf08      	it	eq
 80074a2:	68f4      	ldreq	r4, [r6, #12]
 80074a4:	e7d1      	b.n	800744a <_putc_r+0x1a>
 80074a6:	4629      	mov	r1, r5
 80074a8:	4622      	mov	r2, r4
 80074aa:	4630      	mov	r0, r6
 80074ac:	f000 f85c 	bl	8007568 <__swbuf_r>
 80074b0:	4605      	mov	r5, r0
 80074b2:	e7e3      	b.n	800747c <_putc_r+0x4c>
 80074b4:	08007d30 	.word	0x08007d30
 80074b8:	08007d50 	.word	0x08007d50
 80074bc:	08007d10 	.word	0x08007d10

080074c0 <_sbrk_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4d06      	ldr	r5, [pc, #24]	; (80074dc <_sbrk_r+0x1c>)
 80074c4:	2300      	movs	r3, #0
 80074c6:	4604      	mov	r4, r0
 80074c8:	4608      	mov	r0, r1
 80074ca:	602b      	str	r3, [r5, #0]
 80074cc:	f7fa f842 	bl	8001554 <_sbrk>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_sbrk_r+0x1a>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_sbrk_r+0x1a>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20000334 	.word	0x20000334

080074e0 <__sread>:
 80074e0:	b510      	push	{r4, lr}
 80074e2:	460c      	mov	r4, r1
 80074e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e8:	f000 fa6e 	bl	80079c8 <_read_r>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	bfab      	itete	ge
 80074f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074f2:	89a3      	ldrhlt	r3, [r4, #12]
 80074f4:	181b      	addge	r3, r3, r0
 80074f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074fa:	bfac      	ite	ge
 80074fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80074fe:	81a3      	strhlt	r3, [r4, #12]
 8007500:	bd10      	pop	{r4, pc}

08007502 <__swrite>:
 8007502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007506:	461f      	mov	r7, r3
 8007508:	898b      	ldrh	r3, [r1, #12]
 800750a:	05db      	lsls	r3, r3, #23
 800750c:	4605      	mov	r5, r0
 800750e:	460c      	mov	r4, r1
 8007510:	4616      	mov	r6, r2
 8007512:	d505      	bpl.n	8007520 <__swrite+0x1e>
 8007514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007518:	2302      	movs	r3, #2
 800751a:	2200      	movs	r2, #0
 800751c:	f000 f9d0 	bl	80078c0 <_lseek_r>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	4632      	mov	r2, r6
 800752e:	463b      	mov	r3, r7
 8007530:	4628      	mov	r0, r5
 8007532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007536:	f000 b869 	b.w	800760c <_write_r>

0800753a <__sseek>:
 800753a:	b510      	push	{r4, lr}
 800753c:	460c      	mov	r4, r1
 800753e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007542:	f000 f9bd 	bl	80078c0 <_lseek_r>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	bf15      	itete	ne
 800754c:	6560      	strne	r0, [r4, #84]	; 0x54
 800754e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007556:	81a3      	strheq	r3, [r4, #12]
 8007558:	bf18      	it	ne
 800755a:	81a3      	strhne	r3, [r4, #12]
 800755c:	bd10      	pop	{r4, pc}

0800755e <__sclose>:
 800755e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007562:	f000 b8db 	b.w	800771c <_close_r>
	...

08007568 <__swbuf_r>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	460e      	mov	r6, r1
 800756c:	4614      	mov	r4, r2
 800756e:	4605      	mov	r5, r0
 8007570:	b118      	cbz	r0, 800757a <__swbuf_r+0x12>
 8007572:	6983      	ldr	r3, [r0, #24]
 8007574:	b90b      	cbnz	r3, 800757a <__swbuf_r+0x12>
 8007576:	f7ff fad3 	bl	8006b20 <__sinit>
 800757a:	4b21      	ldr	r3, [pc, #132]	; (8007600 <__swbuf_r+0x98>)
 800757c:	429c      	cmp	r4, r3
 800757e:	d12b      	bne.n	80075d8 <__swbuf_r+0x70>
 8007580:	686c      	ldr	r4, [r5, #4]
 8007582:	69a3      	ldr	r3, [r4, #24]
 8007584:	60a3      	str	r3, [r4, #8]
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	071a      	lsls	r2, r3, #28
 800758a:	d52f      	bpl.n	80075ec <__swbuf_r+0x84>
 800758c:	6923      	ldr	r3, [r4, #16]
 800758e:	b36b      	cbz	r3, 80075ec <__swbuf_r+0x84>
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	6820      	ldr	r0, [r4, #0]
 8007594:	1ac0      	subs	r0, r0, r3
 8007596:	6963      	ldr	r3, [r4, #20]
 8007598:	b2f6      	uxtb	r6, r6
 800759a:	4283      	cmp	r3, r0
 800759c:	4637      	mov	r7, r6
 800759e:	dc04      	bgt.n	80075aa <__swbuf_r+0x42>
 80075a0:	4621      	mov	r1, r4
 80075a2:	4628      	mov	r0, r5
 80075a4:	f000 f950 	bl	8007848 <_fflush_r>
 80075a8:	bb30      	cbnz	r0, 80075f8 <__swbuf_r+0x90>
 80075aa:	68a3      	ldr	r3, [r4, #8]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	60a3      	str	r3, [r4, #8]
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	6022      	str	r2, [r4, #0]
 80075b6:	701e      	strb	r6, [r3, #0]
 80075b8:	6963      	ldr	r3, [r4, #20]
 80075ba:	3001      	adds	r0, #1
 80075bc:	4283      	cmp	r3, r0
 80075be:	d004      	beq.n	80075ca <__swbuf_r+0x62>
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	07db      	lsls	r3, r3, #31
 80075c4:	d506      	bpl.n	80075d4 <__swbuf_r+0x6c>
 80075c6:	2e0a      	cmp	r6, #10
 80075c8:	d104      	bne.n	80075d4 <__swbuf_r+0x6c>
 80075ca:	4621      	mov	r1, r4
 80075cc:	4628      	mov	r0, r5
 80075ce:	f000 f93b 	bl	8007848 <_fflush_r>
 80075d2:	b988      	cbnz	r0, 80075f8 <__swbuf_r+0x90>
 80075d4:	4638      	mov	r0, r7
 80075d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d8:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <__swbuf_r+0x9c>)
 80075da:	429c      	cmp	r4, r3
 80075dc:	d101      	bne.n	80075e2 <__swbuf_r+0x7a>
 80075de:	68ac      	ldr	r4, [r5, #8]
 80075e0:	e7cf      	b.n	8007582 <__swbuf_r+0x1a>
 80075e2:	4b09      	ldr	r3, [pc, #36]	; (8007608 <__swbuf_r+0xa0>)
 80075e4:	429c      	cmp	r4, r3
 80075e6:	bf08      	it	eq
 80075e8:	68ec      	ldreq	r4, [r5, #12]
 80075ea:	e7ca      	b.n	8007582 <__swbuf_r+0x1a>
 80075ec:	4621      	mov	r1, r4
 80075ee:	4628      	mov	r0, r5
 80075f0:	f000 f81e 	bl	8007630 <__swsetup_r>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d0cb      	beq.n	8007590 <__swbuf_r+0x28>
 80075f8:	f04f 37ff 	mov.w	r7, #4294967295
 80075fc:	e7ea      	b.n	80075d4 <__swbuf_r+0x6c>
 80075fe:	bf00      	nop
 8007600:	08007d30 	.word	0x08007d30
 8007604:	08007d50 	.word	0x08007d50
 8007608:	08007d10 	.word	0x08007d10

0800760c <_write_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d07      	ldr	r5, [pc, #28]	; (800762c <_write_r+0x20>)
 8007610:	4604      	mov	r4, r0
 8007612:	4608      	mov	r0, r1
 8007614:	4611      	mov	r1, r2
 8007616:	2200      	movs	r2, #0
 8007618:	602a      	str	r2, [r5, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	f7f9 ff49 	bl	80014b2 <_write>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_write_r+0x1e>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_write_r+0x1e>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	20000334 	.word	0x20000334

08007630 <__swsetup_r>:
 8007630:	4b32      	ldr	r3, [pc, #200]	; (80076fc <__swsetup_r+0xcc>)
 8007632:	b570      	push	{r4, r5, r6, lr}
 8007634:	681d      	ldr	r5, [r3, #0]
 8007636:	4606      	mov	r6, r0
 8007638:	460c      	mov	r4, r1
 800763a:	b125      	cbz	r5, 8007646 <__swsetup_r+0x16>
 800763c:	69ab      	ldr	r3, [r5, #24]
 800763e:	b913      	cbnz	r3, 8007646 <__swsetup_r+0x16>
 8007640:	4628      	mov	r0, r5
 8007642:	f7ff fa6d 	bl	8006b20 <__sinit>
 8007646:	4b2e      	ldr	r3, [pc, #184]	; (8007700 <__swsetup_r+0xd0>)
 8007648:	429c      	cmp	r4, r3
 800764a:	d10f      	bne.n	800766c <__swsetup_r+0x3c>
 800764c:	686c      	ldr	r4, [r5, #4]
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007654:	0719      	lsls	r1, r3, #28
 8007656:	d42c      	bmi.n	80076b2 <__swsetup_r+0x82>
 8007658:	06dd      	lsls	r5, r3, #27
 800765a:	d411      	bmi.n	8007680 <__swsetup_r+0x50>
 800765c:	2309      	movs	r3, #9
 800765e:	6033      	str	r3, [r6, #0]
 8007660:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007664:	81a3      	strh	r3, [r4, #12]
 8007666:	f04f 30ff 	mov.w	r0, #4294967295
 800766a:	e03e      	b.n	80076ea <__swsetup_r+0xba>
 800766c:	4b25      	ldr	r3, [pc, #148]	; (8007704 <__swsetup_r+0xd4>)
 800766e:	429c      	cmp	r4, r3
 8007670:	d101      	bne.n	8007676 <__swsetup_r+0x46>
 8007672:	68ac      	ldr	r4, [r5, #8]
 8007674:	e7eb      	b.n	800764e <__swsetup_r+0x1e>
 8007676:	4b24      	ldr	r3, [pc, #144]	; (8007708 <__swsetup_r+0xd8>)
 8007678:	429c      	cmp	r4, r3
 800767a:	bf08      	it	eq
 800767c:	68ec      	ldreq	r4, [r5, #12]
 800767e:	e7e6      	b.n	800764e <__swsetup_r+0x1e>
 8007680:	0758      	lsls	r0, r3, #29
 8007682:	d512      	bpl.n	80076aa <__swsetup_r+0x7a>
 8007684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007686:	b141      	cbz	r1, 800769a <__swsetup_r+0x6a>
 8007688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800768c:	4299      	cmp	r1, r3
 800768e:	d002      	beq.n	8007696 <__swsetup_r+0x66>
 8007690:	4630      	mov	r0, r6
 8007692:	f7ff faff 	bl	8006c94 <_free_r>
 8007696:	2300      	movs	r3, #0
 8007698:	6363      	str	r3, [r4, #52]	; 0x34
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076a0:	81a3      	strh	r3, [r4, #12]
 80076a2:	2300      	movs	r3, #0
 80076a4:	6063      	str	r3, [r4, #4]
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	f043 0308 	orr.w	r3, r3, #8
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	b94b      	cbnz	r3, 80076ca <__swsetup_r+0x9a>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c0:	d003      	beq.n	80076ca <__swsetup_r+0x9a>
 80076c2:	4621      	mov	r1, r4
 80076c4:	4630      	mov	r0, r6
 80076c6:	f000 f933 	bl	8007930 <__smakebuf_r>
 80076ca:	89a0      	ldrh	r0, [r4, #12]
 80076cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076d0:	f010 0301 	ands.w	r3, r0, #1
 80076d4:	d00a      	beq.n	80076ec <__swsetup_r+0xbc>
 80076d6:	2300      	movs	r3, #0
 80076d8:	60a3      	str	r3, [r4, #8]
 80076da:	6963      	ldr	r3, [r4, #20]
 80076dc:	425b      	negs	r3, r3
 80076de:	61a3      	str	r3, [r4, #24]
 80076e0:	6923      	ldr	r3, [r4, #16]
 80076e2:	b943      	cbnz	r3, 80076f6 <__swsetup_r+0xc6>
 80076e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076e8:	d1ba      	bne.n	8007660 <__swsetup_r+0x30>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	0781      	lsls	r1, r0, #30
 80076ee:	bf58      	it	pl
 80076f0:	6963      	ldrpl	r3, [r4, #20]
 80076f2:	60a3      	str	r3, [r4, #8]
 80076f4:	e7f4      	b.n	80076e0 <__swsetup_r+0xb0>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e7f7      	b.n	80076ea <__swsetup_r+0xba>
 80076fa:	bf00      	nop
 80076fc:	2000002c 	.word	0x2000002c
 8007700:	08007d30 	.word	0x08007d30
 8007704:	08007d50 	.word	0x08007d50
 8007708:	08007d10 	.word	0x08007d10

0800770c <abort>:
 800770c:	b508      	push	{r3, lr}
 800770e:	2006      	movs	r0, #6
 8007710:	f000 f994 	bl	8007a3c <raise>
 8007714:	2001      	movs	r0, #1
 8007716:	f7f9 fea5 	bl	8001464 <_exit>
	...

0800771c <_close_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d06      	ldr	r5, [pc, #24]	; (8007738 <_close_r+0x1c>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	f7f9 fedf 	bl	80014ea <_close>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_close_r+0x1a>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_close_r+0x1a>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20000334 	.word	0x20000334

0800773c <__sflush_r>:
 800773c:	898a      	ldrh	r2, [r1, #12]
 800773e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007742:	4605      	mov	r5, r0
 8007744:	0710      	lsls	r0, r2, #28
 8007746:	460c      	mov	r4, r1
 8007748:	d458      	bmi.n	80077fc <__sflush_r+0xc0>
 800774a:	684b      	ldr	r3, [r1, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	dc05      	bgt.n	800775c <__sflush_r+0x20>
 8007750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	dc02      	bgt.n	800775c <__sflush_r+0x20>
 8007756:	2000      	movs	r0, #0
 8007758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800775c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800775e:	2e00      	cmp	r6, #0
 8007760:	d0f9      	beq.n	8007756 <__sflush_r+0x1a>
 8007762:	2300      	movs	r3, #0
 8007764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007768:	682f      	ldr	r7, [r5, #0]
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	d032      	beq.n	80077d4 <__sflush_r+0x98>
 800776e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007770:	89a3      	ldrh	r3, [r4, #12]
 8007772:	075a      	lsls	r2, r3, #29
 8007774:	d505      	bpl.n	8007782 <__sflush_r+0x46>
 8007776:	6863      	ldr	r3, [r4, #4]
 8007778:	1ac0      	subs	r0, r0, r3
 800777a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800777c:	b10b      	cbz	r3, 8007782 <__sflush_r+0x46>
 800777e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007780:	1ac0      	subs	r0, r0, r3
 8007782:	2300      	movs	r3, #0
 8007784:	4602      	mov	r2, r0
 8007786:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007788:	6a21      	ldr	r1, [r4, #32]
 800778a:	4628      	mov	r0, r5
 800778c:	47b0      	blx	r6
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	d106      	bne.n	80077a2 <__sflush_r+0x66>
 8007794:	6829      	ldr	r1, [r5, #0]
 8007796:	291d      	cmp	r1, #29
 8007798:	d82c      	bhi.n	80077f4 <__sflush_r+0xb8>
 800779a:	4a2a      	ldr	r2, [pc, #168]	; (8007844 <__sflush_r+0x108>)
 800779c:	40ca      	lsrs	r2, r1
 800779e:	07d6      	lsls	r6, r2, #31
 80077a0:	d528      	bpl.n	80077f4 <__sflush_r+0xb8>
 80077a2:	2200      	movs	r2, #0
 80077a4:	6062      	str	r2, [r4, #4]
 80077a6:	04d9      	lsls	r1, r3, #19
 80077a8:	6922      	ldr	r2, [r4, #16]
 80077aa:	6022      	str	r2, [r4, #0]
 80077ac:	d504      	bpl.n	80077b8 <__sflush_r+0x7c>
 80077ae:	1c42      	adds	r2, r0, #1
 80077b0:	d101      	bne.n	80077b6 <__sflush_r+0x7a>
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	b903      	cbnz	r3, 80077b8 <__sflush_r+0x7c>
 80077b6:	6560      	str	r0, [r4, #84]	; 0x54
 80077b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077ba:	602f      	str	r7, [r5, #0]
 80077bc:	2900      	cmp	r1, #0
 80077be:	d0ca      	beq.n	8007756 <__sflush_r+0x1a>
 80077c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077c4:	4299      	cmp	r1, r3
 80077c6:	d002      	beq.n	80077ce <__sflush_r+0x92>
 80077c8:	4628      	mov	r0, r5
 80077ca:	f7ff fa63 	bl	8006c94 <_free_r>
 80077ce:	2000      	movs	r0, #0
 80077d0:	6360      	str	r0, [r4, #52]	; 0x34
 80077d2:	e7c1      	b.n	8007758 <__sflush_r+0x1c>
 80077d4:	6a21      	ldr	r1, [r4, #32]
 80077d6:	2301      	movs	r3, #1
 80077d8:	4628      	mov	r0, r5
 80077da:	47b0      	blx	r6
 80077dc:	1c41      	adds	r1, r0, #1
 80077de:	d1c7      	bne.n	8007770 <__sflush_r+0x34>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0c4      	beq.n	8007770 <__sflush_r+0x34>
 80077e6:	2b1d      	cmp	r3, #29
 80077e8:	d001      	beq.n	80077ee <__sflush_r+0xb2>
 80077ea:	2b16      	cmp	r3, #22
 80077ec:	d101      	bne.n	80077f2 <__sflush_r+0xb6>
 80077ee:	602f      	str	r7, [r5, #0]
 80077f0:	e7b1      	b.n	8007756 <__sflush_r+0x1a>
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f8:	81a3      	strh	r3, [r4, #12]
 80077fa:	e7ad      	b.n	8007758 <__sflush_r+0x1c>
 80077fc:	690f      	ldr	r7, [r1, #16]
 80077fe:	2f00      	cmp	r7, #0
 8007800:	d0a9      	beq.n	8007756 <__sflush_r+0x1a>
 8007802:	0793      	lsls	r3, r2, #30
 8007804:	680e      	ldr	r6, [r1, #0]
 8007806:	bf08      	it	eq
 8007808:	694b      	ldreq	r3, [r1, #20]
 800780a:	600f      	str	r7, [r1, #0]
 800780c:	bf18      	it	ne
 800780e:	2300      	movne	r3, #0
 8007810:	eba6 0807 	sub.w	r8, r6, r7
 8007814:	608b      	str	r3, [r1, #8]
 8007816:	f1b8 0f00 	cmp.w	r8, #0
 800781a:	dd9c      	ble.n	8007756 <__sflush_r+0x1a>
 800781c:	6a21      	ldr	r1, [r4, #32]
 800781e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007820:	4643      	mov	r3, r8
 8007822:	463a      	mov	r2, r7
 8007824:	4628      	mov	r0, r5
 8007826:	47b0      	blx	r6
 8007828:	2800      	cmp	r0, #0
 800782a:	dc06      	bgt.n	800783a <__sflush_r+0xfe>
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	e78e      	b.n	8007758 <__sflush_r+0x1c>
 800783a:	4407      	add	r7, r0
 800783c:	eba8 0800 	sub.w	r8, r8, r0
 8007840:	e7e9      	b.n	8007816 <__sflush_r+0xda>
 8007842:	bf00      	nop
 8007844:	20400001 	.word	0x20400001

08007848 <_fflush_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	690b      	ldr	r3, [r1, #16]
 800784c:	4605      	mov	r5, r0
 800784e:	460c      	mov	r4, r1
 8007850:	b913      	cbnz	r3, 8007858 <_fflush_r+0x10>
 8007852:	2500      	movs	r5, #0
 8007854:	4628      	mov	r0, r5
 8007856:	bd38      	pop	{r3, r4, r5, pc}
 8007858:	b118      	cbz	r0, 8007862 <_fflush_r+0x1a>
 800785a:	6983      	ldr	r3, [r0, #24]
 800785c:	b90b      	cbnz	r3, 8007862 <_fflush_r+0x1a>
 800785e:	f7ff f95f 	bl	8006b20 <__sinit>
 8007862:	4b14      	ldr	r3, [pc, #80]	; (80078b4 <_fflush_r+0x6c>)
 8007864:	429c      	cmp	r4, r3
 8007866:	d11b      	bne.n	80078a0 <_fflush_r+0x58>
 8007868:	686c      	ldr	r4, [r5, #4]
 800786a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0ef      	beq.n	8007852 <_fflush_r+0xa>
 8007872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007874:	07d0      	lsls	r0, r2, #31
 8007876:	d404      	bmi.n	8007882 <_fflush_r+0x3a>
 8007878:	0599      	lsls	r1, r3, #22
 800787a:	d402      	bmi.n	8007882 <_fflush_r+0x3a>
 800787c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800787e:	f7ff f9ff 	bl	8006c80 <__retarget_lock_acquire_recursive>
 8007882:	4628      	mov	r0, r5
 8007884:	4621      	mov	r1, r4
 8007886:	f7ff ff59 	bl	800773c <__sflush_r>
 800788a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800788c:	07da      	lsls	r2, r3, #31
 800788e:	4605      	mov	r5, r0
 8007890:	d4e0      	bmi.n	8007854 <_fflush_r+0xc>
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	059b      	lsls	r3, r3, #22
 8007896:	d4dd      	bmi.n	8007854 <_fflush_r+0xc>
 8007898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800789a:	f7ff f9f2 	bl	8006c82 <__retarget_lock_release_recursive>
 800789e:	e7d9      	b.n	8007854 <_fflush_r+0xc>
 80078a0:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <_fflush_r+0x70>)
 80078a2:	429c      	cmp	r4, r3
 80078a4:	d101      	bne.n	80078aa <_fflush_r+0x62>
 80078a6:	68ac      	ldr	r4, [r5, #8]
 80078a8:	e7df      	b.n	800786a <_fflush_r+0x22>
 80078aa:	4b04      	ldr	r3, [pc, #16]	; (80078bc <_fflush_r+0x74>)
 80078ac:	429c      	cmp	r4, r3
 80078ae:	bf08      	it	eq
 80078b0:	68ec      	ldreq	r4, [r5, #12]
 80078b2:	e7da      	b.n	800786a <_fflush_r+0x22>
 80078b4:	08007d30 	.word	0x08007d30
 80078b8:	08007d50 	.word	0x08007d50
 80078bc:	08007d10 	.word	0x08007d10

080078c0 <_lseek_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4d07      	ldr	r5, [pc, #28]	; (80078e0 <_lseek_r+0x20>)
 80078c4:	4604      	mov	r4, r0
 80078c6:	4608      	mov	r0, r1
 80078c8:	4611      	mov	r1, r2
 80078ca:	2200      	movs	r2, #0
 80078cc:	602a      	str	r2, [r5, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f7f9 fe32 	bl	8001538 <_lseek>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_lseek_r+0x1e>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_lseek_r+0x1e>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20000334 	.word	0x20000334

080078e4 <__swhatbuf_r>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	460e      	mov	r6, r1
 80078e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ec:	2900      	cmp	r1, #0
 80078ee:	b096      	sub	sp, #88	; 0x58
 80078f0:	4614      	mov	r4, r2
 80078f2:	461d      	mov	r5, r3
 80078f4:	da08      	bge.n	8007908 <__swhatbuf_r+0x24>
 80078f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	602a      	str	r2, [r5, #0]
 80078fe:	061a      	lsls	r2, r3, #24
 8007900:	d410      	bmi.n	8007924 <__swhatbuf_r+0x40>
 8007902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007906:	e00e      	b.n	8007926 <__swhatbuf_r+0x42>
 8007908:	466a      	mov	r2, sp
 800790a:	f000 f8b3 	bl	8007a74 <_fstat_r>
 800790e:	2800      	cmp	r0, #0
 8007910:	dbf1      	blt.n	80078f6 <__swhatbuf_r+0x12>
 8007912:	9a01      	ldr	r2, [sp, #4]
 8007914:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007918:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800791c:	425a      	negs	r2, r3
 800791e:	415a      	adcs	r2, r3
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	e7ee      	b.n	8007902 <__swhatbuf_r+0x1e>
 8007924:	2340      	movs	r3, #64	; 0x40
 8007926:	2000      	movs	r0, #0
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	b016      	add	sp, #88	; 0x58
 800792c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007930 <__smakebuf_r>:
 8007930:	898b      	ldrh	r3, [r1, #12]
 8007932:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007934:	079d      	lsls	r5, r3, #30
 8007936:	4606      	mov	r6, r0
 8007938:	460c      	mov	r4, r1
 800793a:	d507      	bpl.n	800794c <__smakebuf_r+0x1c>
 800793c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	6123      	str	r3, [r4, #16]
 8007944:	2301      	movs	r3, #1
 8007946:	6163      	str	r3, [r4, #20]
 8007948:	b002      	add	sp, #8
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	ab01      	add	r3, sp, #4
 800794e:	466a      	mov	r2, sp
 8007950:	f7ff ffc8 	bl	80078e4 <__swhatbuf_r>
 8007954:	9900      	ldr	r1, [sp, #0]
 8007956:	4605      	mov	r5, r0
 8007958:	4630      	mov	r0, r6
 800795a:	f7ff fa07 	bl	8006d6c <_malloc_r>
 800795e:	b948      	cbnz	r0, 8007974 <__smakebuf_r+0x44>
 8007960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007964:	059a      	lsls	r2, r3, #22
 8007966:	d4ef      	bmi.n	8007948 <__smakebuf_r+0x18>
 8007968:	f023 0303 	bic.w	r3, r3, #3
 800796c:	f043 0302 	orr.w	r3, r3, #2
 8007970:	81a3      	strh	r3, [r4, #12]
 8007972:	e7e3      	b.n	800793c <__smakebuf_r+0xc>
 8007974:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <__smakebuf_r+0x7c>)
 8007976:	62b3      	str	r3, [r6, #40]	; 0x28
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	6020      	str	r0, [r4, #0]
 800797c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007980:	81a3      	strh	r3, [r4, #12]
 8007982:	9b00      	ldr	r3, [sp, #0]
 8007984:	6163      	str	r3, [r4, #20]
 8007986:	9b01      	ldr	r3, [sp, #4]
 8007988:	6120      	str	r0, [r4, #16]
 800798a:	b15b      	cbz	r3, 80079a4 <__smakebuf_r+0x74>
 800798c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007990:	4630      	mov	r0, r6
 8007992:	f000 f881 	bl	8007a98 <_isatty_r>
 8007996:	b128      	cbz	r0, 80079a4 <__smakebuf_r+0x74>
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	f023 0303 	bic.w	r3, r3, #3
 800799e:	f043 0301 	orr.w	r3, r3, #1
 80079a2:	81a3      	strh	r3, [r4, #12]
 80079a4:	89a0      	ldrh	r0, [r4, #12]
 80079a6:	4305      	orrs	r5, r0
 80079a8:	81a5      	strh	r5, [r4, #12]
 80079aa:	e7cd      	b.n	8007948 <__smakebuf_r+0x18>
 80079ac:	08006ab9 	.word	0x08006ab9

080079b0 <__malloc_lock>:
 80079b0:	4801      	ldr	r0, [pc, #4]	; (80079b8 <__malloc_lock+0x8>)
 80079b2:	f7ff b965 	b.w	8006c80 <__retarget_lock_acquire_recursive>
 80079b6:	bf00      	nop
 80079b8:	20000328 	.word	0x20000328

080079bc <__malloc_unlock>:
 80079bc:	4801      	ldr	r0, [pc, #4]	; (80079c4 <__malloc_unlock+0x8>)
 80079be:	f7ff b960 	b.w	8006c82 <__retarget_lock_release_recursive>
 80079c2:	bf00      	nop
 80079c4:	20000328 	.word	0x20000328

080079c8 <_read_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4d07      	ldr	r5, [pc, #28]	; (80079e8 <_read_r+0x20>)
 80079cc:	4604      	mov	r4, r0
 80079ce:	4608      	mov	r0, r1
 80079d0:	4611      	mov	r1, r2
 80079d2:	2200      	movs	r2, #0
 80079d4:	602a      	str	r2, [r5, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	f7f9 fd4e 	bl	8001478 <_read>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_read_r+0x1e>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_read_r+0x1e>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	20000334 	.word	0x20000334

080079ec <_raise_r>:
 80079ec:	291f      	cmp	r1, #31
 80079ee:	b538      	push	{r3, r4, r5, lr}
 80079f0:	4604      	mov	r4, r0
 80079f2:	460d      	mov	r5, r1
 80079f4:	d904      	bls.n	8007a00 <_raise_r+0x14>
 80079f6:	2316      	movs	r3, #22
 80079f8:	6003      	str	r3, [r0, #0]
 80079fa:	f04f 30ff 	mov.w	r0, #4294967295
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a02:	b112      	cbz	r2, 8007a0a <_raise_r+0x1e>
 8007a04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a08:	b94b      	cbnz	r3, 8007a1e <_raise_r+0x32>
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f000 f830 	bl	8007a70 <_getpid_r>
 8007a10:	462a      	mov	r2, r5
 8007a12:	4601      	mov	r1, r0
 8007a14:	4620      	mov	r0, r4
 8007a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a1a:	f000 b817 	b.w	8007a4c <_kill_r>
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d00a      	beq.n	8007a38 <_raise_r+0x4c>
 8007a22:	1c59      	adds	r1, r3, #1
 8007a24:	d103      	bne.n	8007a2e <_raise_r+0x42>
 8007a26:	2316      	movs	r3, #22
 8007a28:	6003      	str	r3, [r0, #0]
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	e7e7      	b.n	80079fe <_raise_r+0x12>
 8007a2e:	2400      	movs	r4, #0
 8007a30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a34:	4628      	mov	r0, r5
 8007a36:	4798      	blx	r3
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e7e0      	b.n	80079fe <_raise_r+0x12>

08007a3c <raise>:
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <raise+0xc>)
 8007a3e:	4601      	mov	r1, r0
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	f7ff bfd3 	b.w	80079ec <_raise_r>
 8007a46:	bf00      	nop
 8007a48:	2000002c 	.word	0x2000002c

08007a4c <_kill_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d07      	ldr	r5, [pc, #28]	; (8007a6c <_kill_r+0x20>)
 8007a50:	2300      	movs	r3, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	4611      	mov	r1, r2
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	f7f9 fcf3 	bl	8001444 <_kill>
 8007a5e:	1c43      	adds	r3, r0, #1
 8007a60:	d102      	bne.n	8007a68 <_kill_r+0x1c>
 8007a62:	682b      	ldr	r3, [r5, #0]
 8007a64:	b103      	cbz	r3, 8007a68 <_kill_r+0x1c>
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	bd38      	pop	{r3, r4, r5, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000334 	.word	0x20000334

08007a70 <_getpid_r>:
 8007a70:	f7f9 bce0 	b.w	8001434 <_getpid>

08007a74 <_fstat_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d07      	ldr	r5, [pc, #28]	; (8007a94 <_fstat_r+0x20>)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	4611      	mov	r1, r2
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	f7f9 fd3e 	bl	8001502 <_fstat>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	d102      	bne.n	8007a90 <_fstat_r+0x1c>
 8007a8a:	682b      	ldr	r3, [r5, #0]
 8007a8c:	b103      	cbz	r3, 8007a90 <_fstat_r+0x1c>
 8007a8e:	6023      	str	r3, [r4, #0]
 8007a90:	bd38      	pop	{r3, r4, r5, pc}
 8007a92:	bf00      	nop
 8007a94:	20000334 	.word	0x20000334

08007a98 <_isatty_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d06      	ldr	r5, [pc, #24]	; (8007ab4 <_isatty_r+0x1c>)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	602b      	str	r3, [r5, #0]
 8007aa4:	f7f9 fd3d 	bl	8001522 <_isatty>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_isatty_r+0x1a>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_isatty_r+0x1a>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20000334 	.word	0x20000334

08007ab8 <_init>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	bf00      	nop
 8007abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007abe:	bc08      	pop	{r3}
 8007ac0:	469e      	mov	lr, r3
 8007ac2:	4770      	bx	lr

08007ac4 <_fini>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	bf00      	nop
 8007ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aca:	bc08      	pop	{r3}
 8007acc:	469e      	mov	lr, r3
 8007ace:	4770      	bx	lr
